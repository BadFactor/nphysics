var searchIndex = {};
searchIndex["nphysics"] = {"doc":"nphysics\n========\n**nphysics** is a 2 and 3-dimensional physics engine for games and animations. It uses\n[ncollide](http://ncollide.org) for collision detection, and\n[nalgebra](http://nalgebra.org) for vector/matrix math.","items":[[0,"aliases","nphysics","Aliases for complicated parameterized types.",null,null],[6,"DefaultBroadPhase","nphysics::aliases","The type of the broad phase used by the world by default.",null,null],[0,"integration","nphysics","Position and orientation update of rigid bodies.",null,null],[3,"BodyExpEulerIntegrator","nphysics::integration","An explicit Euler integrator.",null,null],[3,"BodySmpEulerIntegrator","","A semi-implicit Euler integrator.",null,null],[3,"BodyForceGenerator","","A constant linear and angular force generator.",null,null],[3,"BodyDamping","","A linear and angular velocity damper.",null,null],[3,"TranslationalCCDMotionClamping","","Handles Continuous Collision Detection.",null,null],[0,"integrator","","Trait implemented by every integrators.",null,null],[8,"Integrator","nphysics::integration::integrator","Trait implemented by every integrator.",null,null],[10,"update","","Updates the position and orientation of the object `o` after a time step of `dt`.",0,{"inputs":[{"name":"integrator"},{"name":"scalar"},{"name":"o"}],"output":null}],[11,"new","nphysics::integration","Creates a new `BodyExpEulerIntegrator`.",1,{"inputs":[],"output":{"name":"bodyexpeulerintegrator"}}],[11,"update","","",1,{"inputs":[{"name":"bodyexpeulerintegrator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodySmpEulerIntegrator`.",2,{"inputs":[],"output":{"name":"bodysmpeulerintegrator"}}],[11,"update","","",2,{"inputs":[{"name":"bodysmpeulerintegrator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyForceGenerator`.",3,{"inputs":[{"name":"vect"},{"name":"orientation"}],"output":{"name":"bodyforcegenerator"}}],[11,"lin_acc","","The linear acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"}],"output":{"name":"vect"}}],[11,"set_lin_acc","","Sets the linear acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"vect"}],"output":null}],[11,"ang_acc","","The angular acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"}],"output":{"name":"orientation"}}],[11,"set_ang_acc","","Sets the angular acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"orientation"}],"output":null}],[11,"update","","",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyDamping`.",4,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"bodydamping"}}],[11,"update","","",4,{"inputs":[{"name":"bodydamping"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `TranslationalCCDMotionClamping` to enable continuous collision detection to\nfast-moving rigid bodies.",5,{"inputs":[],"output":{"name":"translationalccdmotionclamping"}}],[11,"add_ccd_to","","Enables continuous collision for the given rigid body.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodyhandle"},{"name":"scalar"}],"output":null}],[11,"remove_ccd_from","","Remove continuous collision from the given rigid body.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodyhandle"}],"output":null}],[11,"update","","Update the time of impacts and apply motion clamping when necessary.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodycollisionworld"}],"output":null}],[0,"euler","","Euler integration functions.",null,null],[5,"explicit_integrate","nphysics::integration::euler","Explicit Euler integrator.",null,null],[5,"explicit_integrate_wo_rotation","","Explicit Euler integrator. This will not update the rotational components.",null,null],[5,"semi_implicit_integrate","","Semi-implicit Euler integrator.",null,null],[5,"semi_implicit_integrate_wo_rotation","","Semi-implicit Euler integrator. This will not update the rotational components.",null,null],[5,"displacement","","Computes the transformation matrix required to move an object with a `lin_vel` linear velocity,\na `ang_vil` angular velocity, and a center of mass `center_of_mass`, during the time step `dt`.",null,{"inputs":[{"name":"scalar"},{"name":"matrix"},{"name":"point"},{"name":"vect"},{"name":"orientation"}],"output":{"name":"matrix"}}],[0,"detection","nphysics","Collision detection and joints.",null,null],[3,"ActivationManager","nphysics::detection","Structure that monitors island-based activation/deactivation of objects.",null,null],[0,"constraint","","Data structure to describe a constraint between two rigid bodies.",null,null],[4,"Constraint","nphysics::detection::constraint","A constraint between two rigid bodies.",null,null],[13,"RBRB","","A contact.",6,null],[13,"BallInSocket","","A ball-in-socket joint.",6,null],[13,"Fixed","","A fixed joint.",6,null],[11,"clone","","",6,{"inputs":[{"name":"constraint"}],"output":{"name":"constraint"}}],[0,"detector","nphysics::detection","Collision detector.",null,null],[8,"Detector","nphysics::detection::detector","Trait implemented by collision detectors.",null,null],[10,"update","","Updates the collision detector, given an (already updated) broad-phase, and an activation\nmanager.",7,{"inputs":[{"name":"detector"},{"name":"bf"},{"name":"activationmanager"}],"output":null}],[10,"interferences","","Collects every interferences detected by this collision detector.",7,{"inputs":[{"name":"detector"},{"name":"vec"},{"name":"bf"}],"output":null}],[0,"joint","nphysics::detection","Joint handling.",null,null],[3,"Anchor","nphysics::detection::joint","One of the two end points of a joint.",null,null],[12,"body","","The body attached to this anchor.",8,null],[12,"position","","The attach position, in local coordinates of the attached body.",8,null],[3,"BallInSocket","","A ball-in-socket joint.",null,null],[3,"Fixed","","A joint that prevents any relative movement (linear and angular) between two objects.",null,null],[3,"JointManager","","Structure that handles creation and removal of joints.",null,null],[11,"new","","Creates a new `JointManager`.",9,{"inputs":[],"output":{"name":"jointmanager"}}],[11,"joints","","Joints handled by this manager.",9,{"inputs":[{"name":"jointmanager"}],"output":{"name":"hashmap"}}],[11,"joints_with_body","","List of joints attached to a specific body.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"}],"output":{"name":"option"}}],[11,"add_ball_in_socket","","Add a `BallInSocket` joint to this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_ball_in_socket","","Removes a `BallInSocket` joint from this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"add_fixed","","Add a `Fixed` joint to this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_joint","","Removes a joint from this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove","","Removes every joint attached to a given rigid body.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"update","","Activates the objects that interact with an activated object through a joint.",9,{"inputs":[{"name":"jointmanager"},{"name":"activationmanager"}],"output":null}],[11,"interferences","","Collects all the constraints caused by joints.",9,{"inputs":[{"name":"jointmanager"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new `Anchor` at a given `position` on a `body` local space.",8,{"inputs":[{"name":"option"},{"name":"p"}],"output":{"name":"anchor"}}],[11,"center_of_mass","","The center of mass of the body attached to this anchor.",8,{"inputs":[{"name":"anchor"}],"output":{"name":"point"}}],[11,"new","","Creates a ball-in-socket joint.",10,{"inputs":[{"name":"anchor"},{"name":"anchor"}],"output":{"name":"ballinsocket"}}],[11,"up_to_date","","Tells if this joint has been modified by the user.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",10,{"inputs":[{"name":"ballinsocket"},{"name":"point"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",10,{"inputs":[{"name":"ballinsocket"},{"name":"point"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"point"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"point"}}],[11,"new","","Creates a new `Fixed` joint.",11,{"inputs":[{"name":"anchor"},{"name":"anchor"}],"output":{"name":"fixed"}}],[11,"up_to_date","","Tells if the joint has been modified by the user.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",11,{"inputs":[{"name":"fixed"},{"name":"matrix"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",11,{"inputs":[{"name":"fixed"},{"name":"matrix"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"matrix"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"matrix"}}],[0,"joint","","",null,null],[8,"Joint","nphysics::detection::joint::joint","Trait implemented by every joint.",null,null],[10,"anchor1","","The first anchor affected by this joint.",12,{"inputs":[{"name":"joint"}],"output":{"name":"anchor"}}],[10,"anchor2","","The second anchor affected by this joint.",12,{"inputs":[{"name":"joint"}],"output":{"name":"anchor"}}],[10,"anchor1_pos","","The first attach point in global coordinates.",12,{"inputs":[{"name":"joint"}],"output":{"name":"a"}}],[10,"anchor2_pos","","The second attach point in global coordinates.",12,{"inputs":[{"name":"joint"}],"output":{"name":"a"}}],[11,"new","nphysics::detection","Creates a new `ActivationManager`.",13,{"inputs":[{"name":"scalar"}],"output":{"name":"activationmanager"}}],[11,"deferred_activate","","Notify the `ActivationManager` that is has to activate an object at the next update.",13,{"inputs":[{"name":"activationmanager"},{"name":"rigidbodyhandle"}],"output":null}],[11,"update","","Update the activation manager, activating and deactivating objects when needed.",13,{"inputs":[{"name":"activationmanager"},{"name":"rigidbodycollisionworld"},{"name":"jointmanager"},{"name":"hashmap"}],"output":null}],[0,"resolution","nphysics","Constraint resolution.",null,null],[3,"AccumulatedImpulseSolver","nphysics::resolution","Constraint solver using the projected gauss seidel algorithm and warm-starting.",null,null],[3,"Velocities","","Structure holding the result of the projected gauss seidel solver.",null,null],[12,"lv","","Linear velocity.",14,null],[12,"av","","Angular velocity.",14,null],[3,"ImpulseCache","","",null,null],[3,"ContactIdentifier","","The identifier of a contact stored in the impulse cache.",null,null],[3,"VelocityConstraint","","A constraint of velocity at a point of contact.",null,null],[12,"normal","","The contact normal.",15,null],[12,"weighted_normal1","","The contact normal multiplied by the first body&#39;s inverse mass.",15,null],[12,"weighted_normal2","","The contact normal multiplied by the second body&#39;s inverse mass.",15,null],[12,"rot_axis1","","The first body rotation axis.",15,null],[12,"weighted_rot_axis1","","The first body rotation axis multiplied by its inverse inertia.",15,null],[12,"rot_axis2","","The second body rotation axis.",15,null],[12,"weighted_rot_axis2","","The second body rotation axis multiplied by its inverse inertia.",15,null],[12,"inv_projected_mass","","The inverse of the sum of linear and angular inertia of both bodies.",15,null],[12,"impulse","","The total impulse applied.",15,null],[12,"lobound","","The lower bound of the impulse.",15,null],[12,"hibound","","The upper bound of the impulse.",15,null],[12,"objective","","The target delta velocity.",15,null],[12,"id1","","The id of the first body.",15,null],[12,"id2","","The id of the second body.",15,null],[12,"friction_limit_id","","The id of the friction constraint.",15,null],[12,"friction_coeff","","The friction coefficient on this contact.",15,null],[4,"CorrectionMode","","The correction coefficient used by the constraint solver.",null,null],[13,"Velocity","","Penetration are solved by the penalty method.",16,null],[13,"VelocityAndPosition","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[13,"VelocityAndPositionThresold","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[5,"projected_gauss_seidel_solve","","Solve a set of velocity constraints using the projected gauss seidel solver.",null,null],[0,"solver","","",null,null],[8,"Solver","nphysics::resolution::solver","Trait implemented by constraint solvers.",null,null],[10,"solve","","Solve the set of constraints of type `I`.",17,null],[11,"new","nphysics::resolution","Creates a new `AccumulatedImpulseSolver`.",18,{"inputs":[{"name":"scalar"},{"name":"correctionmode"},{"name":"scalar"},{"name":"scalar"},{"name":"usize"},{"name":"usize"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"num_first_order_iter","","Gets the number of iteration done by the penetration depth correction solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"}],"output":{"name":"usize"}}],[11,"set_num_first_order_iter","","Sets the number of iteration done by the penetration depth correction solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"},{"name":"usize"}],"output":null}],[11,"num_second_order_iter","","Gets the number of iteration done by the velocity constraint solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"}],"output":{"name":"usize"}}],[11,"set_num_second_order_iter","","Sets the number of iteration done by the velocity constraint solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"},{"name":"usize"}],"output":null}],[11,"solve","","",18,null],[11,"clone","","",14,{"inputs":[{"name":"velocities"}],"output":{"name":"velocities"}}],[11,"fmt","","",14,{"inputs":[{"name":"velocities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"velocities"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"velocities"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Velocities`.",14,{"inputs":[],"output":{"name":"velocities"}}],[11,"reset","","Reset this structure to zero.",14,{"inputs":[{"name":"velocities"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"velocityconstraint"}],"output":{"name":"velocityconstraint"}}],[11,"fmt","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"new","","Creates a new velocity constraint with all terms initialized to zero.",15,{"inputs":[],"output":{"name":"velocityconstraint"}}],[11,"vel_corr_factor","","The velocity correction coefficient.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"pos_corr_factor","","The position correction coefficient.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"min_depth_for_pos_corr","","The minimum penetration depth required to switch on the hard repositioning based method.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"max_depth_for_vel_corr","","The max penetration depth the velocity correction will attempt to correct.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[0,"world","nphysics","The physics world.",null,null],[3,"World","nphysics::world","The physical world.",null,null],[11,"new","","Creates a new physics world.",19,{"inputs":[],"output":{"name":"world"}}],[11,"step","","Updates the physics world.",19,{"inputs":[{"name":"world"},{"name":"scalar"}],"output":null}],[11,"add_body","","Adds a rigid body to the physics world.",19,{"inputs":[{"name":"world"},{"name":"rigidbody"}],"output":{"name":"rigidbodyhandle"}}],[11,"remove_body","","Remove a rigid body from the physics world.",19,{"inputs":[{"name":"world"},{"name":"rigidbodyhandle"}],"output":null}],[11,"forces_generator","","Gets a mutable reference to the force generator.",19,{"inputs":[{"name":"world"}],"output":{"name":"bodyforcegenerator"}}],[11,"integrator","","Gets a mutable reference to the position and orientation integrator.",19,{"inputs":[{"name":"world"}],"output":{"name":"bodysmpeulerintegrator"}}],[11,"ccd_manager","","Gets a mutable reference to the CCD manager.",19,{"inputs":[{"name":"world"}],"output":{"name":"translationalccdmotionclamping"}}],[11,"joint_manager","","Gets a mutable reference to the joint manager.",19,{"inputs":[{"name":"world"}],"output":{"name":"jointmanager"}}],[11,"constraints_solver","","Gets a mutable reference to the constraint solver.",19,{"inputs":[{"name":"world"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"collision_world","","Gets the underlying collision world.",19,{"inputs":[{"name":"world"}],"output":{"name":"rigidbodycollisionworld"}}],[11,"set_gravity","","Sets the linear acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"},{"name":"vect"}],"output":null}],[11,"gravity","","Sets the angular acceleration afecting every dynamic rigid body.\nGets the linear acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"}],"output":{"name":"vect"}}],[11,"add_ccd_to","","Gets the angular acceleration afecting every dynamic rigid body.\nAdds continuous collision detection to the given rigid body.",19,{"inputs":[{"name":"world"},{"name":"rigidbodyhandle"},{"name":"scalar"}],"output":null}],[11,"add_ball_in_socket","","Adds a ball-in-socket joint to the world.",19,{"inputs":[{"name":"world"},{"name":"ballinsocket"}],"output":{"name":"rc"}}],[11,"remove_ball_in_socket","","Removes a ball-in-socket joint from the world.",19,{"inputs":[{"name":"world"},{"name":"rc"}],"output":null}],[11,"add_fixed","","Adds a fixed joint to the world.",19,{"inputs":[{"name":"world"},{"name":"fixed"}],"output":{"name":"rc"}}],[11,"remove_fixed","","Removes a fixed joint from the world.",19,{"inputs":[{"name":"world"},{"name":"rc"}],"output":null}],[11,"interferences","","Collects every interferences detected since the last update.",19,{"inputs":[{"name":"world"},{"name":"vec"}],"output":null}],[11,"bodies","","An iterator visiting all rigid bodies on this world.",19,{"inputs":[{"name":"world"}],"output":{"name":"rigidbodies"}}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",19,{"inputs":[{"name":"world"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",19,{"inputs":[{"name":"world"},{"name":"str"}],"output":null}],[6,"WorldBroadPhase","","The default broad phase.",null,null],[6,"RigidBodyCollisionWorld","","Type of the collision world containing rigid bodies.",null,null],[0,"object","nphysics","Rigid bodies.",null,null],[3,"RigidBody","nphysics::object","The rigid body structure.",null,null],[4,"ActivationState","","The activation state of a rigid body.",null,null],[13,"Active","","The rigid body is active with a not-zero energy.",20,null],[13,"Inactive","","The rigid body is inactive.",20,null],[13,"Deleted","","The rigid body has been removed from the physics engine.",20,null],[4,"RigidBodyState","","The movement state of a rigid body.",null,null],[13,"Static","","The rigid body cannot move.",21,null],[13,"Dynamic","","The rigid body can move.",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"rigidbodystate"}],"output":{"name":"rigidbodystate"}}],[11,"eq","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"rigidbodystate"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"rigidbodystate"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"activationstate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"activationstate"}],"output":{"name":"activationstate"}}],[11,"eq","","",20,{"inputs":[{"name":"activationstate"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"activationstate"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"activationstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"energy","","The energy accumulated other several frames.",20,{"inputs":[{"name":"activationstate"}],"output":{"name":"scalar"}}],[11,"clone","","",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"rigidbody"}}],[11,"position","","Gets a reference to this body&#39;s transform.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"matrix"}}],[11,"shape_ref","","Gets a reference to this body&#39;s shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"repr"}}],[11,"shape","","Gets a copy of this body&#39;s shared shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"arc"}}],[11,"margin","","The margin surrounding this object&#39;s shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"center_of_mass","","Gets a reference to this body&#39;s center of mass.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"point"}}],[11,"restitution","","Gets this body&#39;s restitution coefficent.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"friction","","Gets this body&#39;s friction coefficient.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"is_active","","Indicates whether or not this rigid body is active.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"bool"}}],[11,"deactivation_threshold","","The velocity threshold bellow whith the rigid body might be deactivated.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"option"}}],[11,"set_deactivation_threshold","","Set the velocity threshold bellow whith the rigid body might be deactivated.",22,{"inputs":[{"name":"rigidbody"},{"name":"option"}],"output":null}],[11,"new_dynamic","","Creates a new rigid body that can move.",22,{"inputs":[{"name":"g"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"new_static","","Creates a new rigid body that cannot move.",22,{"inputs":[{"name":"g"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"new","","Creates a new rigid body with a given shape.",22,{"inputs":[{"name":"arc"},{"name":"option"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"collision_groups","","The collision groups this rigid body is part of.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"collisiongroups"}}],[11,"can_move","","Indicates whether this rigid body is static or dynamic.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"bool"}}],[11,"lin_acc_scale","","Gets the linear acceleraction scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_acc_scale","","Sets the linear acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"ang_acc_scale","","Gets the angular acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_acc_scale","","Sets the angular acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"lin_vel","","Get the linear velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_vel","","Sets the linear velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"lin_acc","","Gets the linear acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_acc","","Sets the linear acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"ang_vel","","Gets the angular velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_vel","","Sets the angular velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"ang_acc","","Gets the angular acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_acc","","Sets the angular acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"clear_forces","","Resets linear and angular force.",22,{"inputs":[{"name":"rigidbody"}],"output":null}],[11,"clear_linear_force","","Resets linear force.",22,{"inputs":[{"name":"rigidbody"}],"output":null}],[11,"clear_angular_force","","Resets angular force.",22,{"inputs":[{"name":"rigidbody"}],"output":null}],[11,"append_lin_force","","Adds an additional linear force.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"append_ang_force","","Adds an additional angular force.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"append_force_wrt_point","","Adds an additional force acting at a point different to the center of mass.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"},{"name":"vect"}],"output":null}],[11,"apply_central_impulse","","Applies a one-time central impulse.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"apply_angular_momentum","","Applies a one-time angular impulse.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"apply_impulse_wrt_point","","Applies a one-time impulse to a point relative to the center of mass.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"},{"name":"vect"}],"output":null}],[11,"inv_mass","","Gets the inverse mass of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"set_inv_mass","","Sets the inverse mass of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"scalar"}],"output":null}],[11,"inv_inertia","","Gets the inverse inertia tensor of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"angularinertia"}}],[11,"set_inv_inertia","","Sets the inverse inertia tensor of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"angularinertia"}],"output":null}],[11,"append_transformation","","Appends a transformation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"prepend_transformation","","Prepends a transformation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"set_transformation","","Sets the transformation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"append_translation","","Appends a translation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"prepend_translation","","Prepends a translation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"set_translation","","Stes the translation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"append_rotation","","Appends a rotation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"prepend_rotation","","Prepends a rotation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"set_rotation","","Sets the rotation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"bounding_volume","","",22,{"inputs":[{"name":"rigidbody"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",22,{"inputs":[{"name":"rigidbody"},{"name":"m"}],"output":{"name":"aabb"}}],[6,"RigidBodyHandle","","A shared, mutable, rigid body.",null,null],[0,"utils","nphysics","Miscellaneous utilities.",null,null],[0,"union_find","nphysics::utils","The union find algorithm.",null,null],[3,"UnionFindSet","nphysics::utils::union_find","An element used by the union-find algorithm.",null,null],[5,"find","","Performs the `find` part of the union-find algorithm.",null,null],[5,"union","","Performs the `union` part of the union-find algorithm.",null,null],[11,"clone","","",23,{"inputs":[{"name":"unionfindset"}],"output":{"name":"unionfindset"}}],[11,"new","","Creates a new `UnionFindSet`.",23,{"inputs":[{"name":"usize"}],"output":{"name":"unionfindset"}}],[11,"reinit","","Reinitialize this set.",23,{"inputs":[{"name":"unionfindset"},{"name":"usize"}],"output":null}],[0,"volumetric","nphysics","Volume and inertia tensor computation.",null,null],[5,"ball_volume","nphysics::volumetric","The volume of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_surface","","The surface of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_center_of_mass","","The center of mass of a ball.",null,{"inputs":[],"output":{"name":"p"}}],[5,"ball_unit_angular_inertia","","The unit angular inertia of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"i"}}],[5,"cylinder_volume","","The volume of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_surface","","The surface of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_center_of_mass","","The center of mass of a cylinder.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cylinder_unit_angular_inertia","","The unit angular inertia of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cone_volume","","The volume of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_surface","","The surface of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_center_of_mass","","The center of mass of a cone.",null,{"inputs":[{"name":"n"}],"output":{"name":"p"}}],[5,"cone_unit_angular_inertia","","The unit angular inertia of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cuboid_volume","","The volume of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"n"}}],[5,"cuboid_surface","","The surface of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"n"}}],[5,"cuboid_center_of_mass","","The center of mass of a cuboid.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cuboid_unit_angular_inertia","","The unit angular inertia of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"i"}}],[5,"convex_mesh_surface","","The surface of a convex mesh.",null,null],[5,"convex_mesh_volume_and_center_of_mass","","The volume and center of mass of a convex mesh.",null,null],[5,"convex_mesh_mass_properties","","The mass properties of a convex mesh.",null,null],[5,"convex_hull_surface","","The surface of a convex hull.",null,null],[5,"convex_hull_volume","","The volume of the convex hull of a set of points.",null,null],[5,"convex_hull_center_of_mass","","The center of mass of the convex hull of a set of points.",null,null],[5,"convex_hull_unit_angular_inertia","","The angular inertia of the convex hull of a set of points.",null,null],[11,"surface","nphysics::volumetric::volumetric_ball","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"n"}}],[11,"volume","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"mat1"}}],[11,"surface","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"n"}}],[11,"volume","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cylinder","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"n"}}],[11,"volume","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"mat1"}}],[11,"surface","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"n"}}],[11,"volume","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cuboid","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"n"}}],[11,"volume","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"mat1"}}],[11,"surface","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"n"}}],[11,"volume","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cone","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"n"}}],[11,"volume","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"mat1"}}],[11,"surface","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"n"}}],[11,"volume","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_compound","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"n"}}],[11,"volume","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"mat1"}}],[11,"mass_properties","","The mass properties of this `CompoundData`.",32,null],[11,"surface","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"n"}}],[11,"volume","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"mat3"}}],[11,"mass_properties","","The mass properties of this `CompoundData`.",33,null],[11,"surface","nphysics::volumetric::volumetric_convex","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"n"}}],[11,"volume","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"mat3"}}],[11,"mass_properties","","",34,null],[11,"surface","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"n"}}],[11,"volume","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"mat1"}}],[11,"mass_properties","","",35,null],[11,"surface","nphysics::volumetric","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"volume","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"center_of_mass","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"mat1"}}],[11,"mass_properties","","",36,null],[11,"surface","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"volume","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"center_of_mass","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"mat3"}}],[11,"mass_properties","","",36,null],[8,"Volumetric","","Trait implemented by objects which have a mass, a center of mass, and an inertia tensor.",null,null],[10,"surface","","Computes the surface of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"n"}}],[10,"volume","","Computes the volume of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"n"}}],[10,"center_of_mass","","Computes the center of mass of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"p"}}],[10,"unit_angular_inertia","","Computes the angular inertia tensor of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"i"}}],[11,"mass","","Given its density, this computes the mass of this object.",37,{"inputs":[{"name":"volumetric"},{"name":"n"}],"output":{"name":"n"}}],[11,"angular_inertia","","Given its mass, this computes the angular inertia of this object.",37,{"inputs":[{"name":"volumetric"},{"name":"n"}],"output":{"name":"i"}}],[11,"mass_properties","","Given its density, this computes the mass, center of mass, and inertia tensor of this object.",37,null],[8,"InertiaTensor","","Trait implemented by inertia tensors.",null,null],[10,"apply","","Applies this inertia tensor to a vector.",38,{"inputs":[{"name":"inertiatensor"},{"name":"av"}],"output":{"name":"av"}}],[10,"to_world_space","","Transforms this inertia tensor from local space to world space.",38,{"inputs":[{"name":"inertiatensor"},{"name":"m"}],"output":{"name":"self"}}],[10,"to_relative_wrt_point","","Computes this inertia tensor relative to a given point.",38,{"inputs":[{"name":"inertiatensor"},{"name":"n"},{"name":"p"}],"output":{"name":"self"}}],[0,"math","nphysics","Compilation flags dependent aliases for mathematical types.",null,null],[6,"Scalar","nphysics::math","The scalar type.",null,null],[6,"Point","","The point type.",null,null],[6,"Vect","","The vector type.",null,null],[6,"Orientation","","The orientation type.",null,null],[6,"Matrix","","The transformation matrix type.",null,null],[6,"RotationMatrix","","The rotation matrix type.",null,null],[6,"AngularInertia","","The inertia tensor type.",null,null]],"paths":[[8,"Integrator"],[3,"BodyExpEulerIntegrator"],[3,"BodySmpEulerIntegrator"],[3,"BodyForceGenerator"],[3,"BodyDamping"],[3,"TranslationalCCDMotionClamping"],[4,"Constraint"],[8,"Detector"],[3,"Anchor"],[3,"JointManager"],[3,"BallInSocket"],[3,"Fixed"],[8,"Joint"],[3,"ActivationManager"],[3,"Velocities"],[3,"VelocityConstraint"],[4,"CorrectionMode"],[8,"Solver"],[3,"AccumulatedImpulseSolver"],[3,"World"],[4,"ActivationState"],[4,"RigidBodyState"],[3,"RigidBody"],[3,"UnionFindSet"],[6,"Ball2"],[6,"Ball3"],[6,"Cylinder2"],[6,"Cylinder3"],[6,"Cuboid2"],[6,"Cuboid3"],[6,"Cone2"],[6,"Cone3"],[6,"Compound2"],[6,"Compound3"],[6,"Convex3"],[6,"Convex2"],[8,"Repr"],[8,"Volumetric"],[8,"InertiaTensor"]]};
searchIndex["ncollide"] = {"doc":"ncollide\n========","items":[[8,"FloatError","ncollide::math","Trait for constant helping handling floating point computations.",null,null],[10,"epsilon","","Epsilon value used to perform fuzzy comparisons with zero.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Scalar","","Trait implemented by scalar types.",null,null],[8,"Point","","Trait implemented by point types.",null,null],[16,"Vect","","",1,null],[8,"Vect","","Trait implemented by vector types.",null,null],[16,"Scalar","","",2,null],[8,"Isometry","","Trait implemented by transformation matrices types.",null,null],[8,"HasInertiaMatrix","","Trait implement by vectors that are transformable by the inertia matrix `I`.",null,null],[0,"data","ncollide::utils","Data structure utilities.",null,null],[0,"pair","ncollide::utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[11,"new","ncollide_utils::data::pair","Builds a new `Pair`.",3,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"pair"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"pair"}],"output":{"name":"pair"}}],[11,"eq","","",3,{"inputs":[{"name":"pair"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"pairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new PairTWHash",4,{"inputs":[],"output":{"name":"pairtwhash"}}],[11,"hash","","",4,{"inputs":[{"name":"pairtwhash"},{"name":"pair"}],"output":{"name":"usize"}}],[11,"decode","ncollide_utils::data::hash","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"uintpairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"new","","Creates a new UintPairTWHash.",5,{"inputs":[],"output":{"name":"uintpairtwhash"}}],[11,"hash","","",5,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"uinttwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"new","","Creates a new UintTWHash.",6,{"inputs":[],"output":{"name":"uinttwhash"}}],[11,"hash","","",6,{"inputs":[{"name":"uinttwhash"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"decode","ncollide_utils::data::hash_map","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"entry"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"entry"}],"output":{"name":"entry"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"hashmap"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates a new hash map.",8,{"inputs":[{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",8,{"inputs":[{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",8,null],[11,"elements_mut","","The elements added to this hash map.",8,null],[11,"len","","The number of elements contained by this hashmap.",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",8,null],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",8,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet. If the functions returns `None`, nothing is\ninserted.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"new","ncollide_utils::data::owned_allocation_cache","Initializes the cache.",9,{"inputs":[],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",9,{"inputs":[{"name":"ownedallocationcache"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",9,null],[11,"clear","","Clears the cache, destroying any stored pointer.",9,null],[11,"new","ncollide_utils::data::vec_slice","Creates a new immutable slice.",10,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",10,null],[11,"len","","The length of this slice.",10,{"inputs":[{"name":"vecslice"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",10,{"inputs":[{"name":"vecslice"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",10,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",10,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",11,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",11,null],[11,"len","","The length of this slice.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice.\nBoth slices must have the same length.",11,null],[11,"new","ncollide_utils::data::ref_with_cost","Creates a new reference packed with a cost value.",12,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"eq","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[11,"decode","ncollide_utils::data::uid_remap","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"fastkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"fmt","","",13,{"inputs":[{"name":"fastkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_invalid","","Creates a new invalid key that won&#39;t be used by the `UidRemap` structure, ever.",13,{"inputs":[],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",13,{"inputs":[{"name":"fastkey"}],"output":{"name":"usize"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"lookupdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"lookupdata"}],"output":{"name":"lookupdata"}}],[11,"fmt","","",14,{"inputs":[{"name":"lookupdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"fmt","","",15,{"inputs":[{"name":"uidremap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"uidremap"}}],[11,"new","","Creates an empty `UidRemap`.",15,{"inputs":[{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",15,null],[11,"get","","Returns a reference to the value corresponding to the key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value\npresent in the map, that value and its fast key are returned. Otherwise, `None` is\nreturned.",15,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values.\nThe iterator&#39;s element type is `&amp;&#39;r O`.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"itermut"}}],[11,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"uidremap"}}],[11,"extend","","",15,null],[11,"index","","",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"o"}}],[11,"default","ncollide_utils::data::vec_map","",16,{"inputs":[],"output":{"name":"vecmap"}}],[11,"clone","","",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",16,null],[11,"hash","","",16,null],[11,"new","","Creates an empty `VecMap`.",16,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",16,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",16,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",16,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"len","","Returns the number of elements in the map.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",16,null],[11,"get","","Returns a reference to the value corresponding to the key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",17,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",17,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",17,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",18,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",19,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",16,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",16,null],[11,"index","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",23,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"new","ncollide_utils::optimization","Creates a new backtracking line search methods.",25,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"usize"}],"output":{"name":"backtrackinglinesearch"}}],[11,"step_size","","",25,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[11,"fmt","ncollide_utils::hashable_partial_eq","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"hashablepartialeq"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really\nwant to transform the wrapped object&#39;s partial equality to an equivalence relation.",26,{"inputs":[{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",26,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"t"}}],[11,"hash","","",26,null],[3,"Pair","ncollide::utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",3,null],[12,"second","","second object of the pair",3,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[0,"hash","ncollide::utils::data","Trait for hash functions.",null,null],[8,"HashFun","ncollide::utils::data::hash","Hash function.",null,null],[10,"hash","","Hash function.",27,{"inputs":[{"name":"hashfun"},{"name":"k"}],"output":{"name":"usize"}}],[3,"UintPairTWHash","","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide::utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide::utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",7,null],[12,"value","","The value of the entry.",7,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[0,"owned_allocation_cache","ncollide::utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide::utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[0,"vec_slice","ncollide::utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide::utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[0,"ref_with_cost","ncollide::utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide::utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",12,null],[12,"cost","","The cost of the object.",12,null],[0,"uid_remap","ncollide::utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide::utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined\nid of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[0,"vec_map","ncollide::utils::data","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","ncollide::utils::data::vec_map","A map optimized for small integer keys.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",17,null],[13,"Occupied","","An occupied Entry",17,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[5,"is_affinely_dependent_triangle3","ncollide::utils","Tests if three 3D points are exactly aligned without the need of the `Cross` trait.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"bfgs","","Minimizes a function using the quasi-newton BFGS method.",null,null],[5,"newton","","Finds the root of a function using the Newton method.",null,null],[5,"median","","Computes the median of a set of values.",null,null],[5,"center","","Computes the center of a set of point.",null,null],[5,"cov_and_center","","Computes the covariance matrix and center of a set of points.",null,null],[5,"is_affinely_dependent_triangle","","Tests if three points are exactly aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"project_homogeneous","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[3,"BacktrackingLineSearch","","The backtracking line search method.",null,null],[5,"cov","","Computes the convariance matrix of a set of points.",null,null],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"project_homogeneous_to","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[5,"triangle_perimeter","","Computes the perimeter of a triangle.",null,null],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"maximize_with_newton","","Maximizes a real function using the Newton method.",null,null],[5,"cross3","","A 3d cross product that do not require the `Cross&lt;Self, Self&gt;` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"minimize_with_bfgs","","Minimizes a function using the bfgs method.",null,null],[5,"center_reduce","","Centers and reduces a set of data.",null,null],[5,"binom","","Computes the binomial coefficient C^k_n (&quot;k among n&quot;).",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[3,"HashablePartialEq","","A structure that implements `Eq` and is hashable even if the wrapped data implements only\n`PartialEq`.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[8,"LineSearch","","Trait for line search methods.",null,null],[10,"step_size","","Gets a near-optimal step size for the next descent.",28,{"inputs":[{"name":"linesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",29,null],[0,"shape","ncollide","Collision shapes supported by ncollide.",null,null],[11,"decode","ncollide_entities::shape::plane","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"fmt","","",30,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"new","","Builds a new plane from its center and its normal.",30,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",30,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",30,{"inputs":[{"name":"plane"}],"output":{"name":"v"}}],[11,"repr","","",30,{"inputs":[{"name":"plane"}],"output":{"name":"reprdesc"}}],[11,"decode","ncollide_entities::shape::cuboid","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"cuboid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"cuboid"}],"output":{"name":"cuboid"}}],[11,"fmt","","",31,{"inputs":[{"name":"cuboid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each\naxis. Each half-extent must be greater than 0.04.",31,{"inputs":[{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",31,{"inputs":[{"name":"cuboid"}],"output":{"name":"v"}}],[11,"fmt","ncollide_entities::shape::minkowski_sum","",32,{"inputs":[{"name":"minkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",32,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",32,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",32,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",32,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",32,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g2"}}],[11,"fmt","","",33,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",33,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",33,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",33,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",33,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",33,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g2"}}],[11,"decode","ncollide_entities::shape::segment","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"segment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"fmt","","",34,{"inputs":[{"name":"segment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"new","","Creates a new segment from two points.",34,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",34,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",34,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",34,null],[11,"decode","ncollide_entities::shape::triangle","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"triangle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"triangle"}],"output":{"name":"triangle"}}],[11,"fmt","","",35,{"inputs":[{"name":"triangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"new","","Creates a triangle from three points.",35,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",35,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",35,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",35,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",35,null],[11,"clone","ncollide_entities::shape::base_mesh","",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"basemesh"}}],[11,"new","","Builds a new mesh.",36,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",36,null],[11,"indices","","The indices of this mesh.",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",36,{"inputs":[{"name":"basemesh"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",36,{"inputs":[{"name":"basemesh"},{"name":"usize"}],"output":{"name":"e"}}],[11,"clone","ncollide_entities::shape::trimesh","",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Builds a new mesh.",37,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",37,null],[11,"indices","","The indices of this mesh.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",37,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"clone","ncollide_entities::shape::polyline","",38,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Builds a new mesh.",38,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",38,null],[11,"indices","","The indices of this mesh.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",38,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",38,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"decode","ncollide_entities::shape::ball","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"ball"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"ball"}],"output":{"name":"ball"}}],[11,"fmt","","",39,{"inputs":[{"name":"ball"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"new","","Creates a new ball from its radius and center.",39,{"inputs":[{"name":"n"}],"output":{"name":"ball"}}],[11,"radius","","The ball radius.",39,{"inputs":[{"name":"ball"}],"output":{"name":"n"}}],[11,"decode","ncollide_entities::shape::capsule","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"capsule"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"capsule"}],"output":{"name":"capsule"}}],[11,"fmt","","",40,{"inputs":[{"name":"capsule"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"new","","Creates a new capsule.",40,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",40,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule&#39;s rounded part.",40,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"decode","ncollide_entities::shape::cone","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"cone"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"cone"}],"output":{"name":"cone"}}],[11,"fmt","","",41,{"inputs":[{"name":"cone"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cone.",41,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",41,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",41,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"decode","ncollide_entities::shape::cylinder","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"fmt","","",42,{"inputs":[{"name":"cylinder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cylinder.",42,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",42,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",42,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"fmt","ncollide_entities::shape::reflection","",43,{"inputs":[{"name":"reflection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit,\nthe reflection computation is done in constant time.",43,{"inputs":[{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",43,{"inputs":[{"name":"reflection"}],"output":{"name":"g"}}],[11,"decode","ncollide_entities::shape::torus","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"torus"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"torus"}],"output":{"name":"torus"}}],[11,"fmt","","",44,{"inputs":[{"name":"torus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"new","","Creates a new torus with the given radiuses.",44,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",44,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",44,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"clone","ncollide_entities::shape::compound","",45,{"inputs":[{"name":"compound"}],"output":{"name":"compound"}}],[11,"new","","Builds a new compound shape.",45,{"inputs":[{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",45,null],[11,"bvt","","The optimization structure used by this compound shape.",45,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",45,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",45,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"decode","ncollide_entities::shape::convex","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"convex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"convex"}],"output":{"name":"convex"}}],[11,"fmt","","",46,{"inputs":[{"name":"convex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"new","","Creates a polytope from a set of point.",46,{"inputs":[{"name":"vec"}],"output":{"name":"convex"}}],[11,"points","","The list of points of this convex polytope.",46,null],[11,"map_part_at","ncollide_entities::shape::compound","",45,null],[11,"map_transformed_part_at","","",45,null],[11,"aabb_at","","",45,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",45,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"map_part_at","ncollide_entities::shape::trimesh","",37,null],[11,"map_transformed_part_at","","",37,null],[11,"aabb_at","","",37,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"map_part_at","ncollide_entities::shape::polyline","",38,null],[11,"map_transformed_part_at","","",38,null],[11,"aabb_at","","",38,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",38,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"support_point","ncollide_entities::shape::cuboid","",31,null],[11,"support_point","ncollide_entities::shape::ball","",39,null],[11,"support_point","ncollide_entities::shape::capsule","",40,null],[11,"support_point","ncollide_entities::shape::cone","",41,null],[11,"support_point","ncollide_entities::shape::cylinder","",42,null],[11,"support_point","ncollide_entities::shape::convex","",46,null],[11,"support_point","ncollide_entities::shape::reflection","",43,null],[11,"support_point","ncollide_entities::shape::triangle","",35,null],[11,"support_point","ncollide_entities::shape::segment","",34,null],[11,"support_point","ncollide_entities::shape::minkowski_sum","",32,null],[11,"support_point","","",33,null],[11,"new","ncollide_entities::bounding_volume::bounding_volume_bvt","Creates a new `BoundingVolumeInterferencesCollector`.",47,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",47,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",47,null],[11,"bounding_volume","ncollide_entities::shape::cuboid","",31,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::cone","",41,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::cylinder","",42,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::capsule","",40,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::triangle","",35,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::segment","",34,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::ball","",39,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::plane","",30,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::convex","",46,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::compound","",45,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::base_mesh","",36,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::trimesh","",37,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::polyline","",38,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide","",48,{"inputs":[{"name":"repr"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","ncollide_entities::shape::cuboid","",31,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::cone","",41,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::ball","",39,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::cylinder","",42,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::capsule","",40,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::plane","",30,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::convex","",46,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::compound","",45,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::triangle","",35,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::segment","",34,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::base_mesh","",36,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::trimesh","",37,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide_entities::shape::polyline","",38,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","ncollide","",48,{"inputs":[{"name":"repr"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"decode","ncollide_entities::partitioning::dbvt","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"updatestate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",50,{"inputs":[],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",50,null],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",50,{"inputs":[{"name":"dbvt"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",50,null],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",50,null],[11,"clone","","",51,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"dbvtleafstate"}}],[11,"is_root","","Indicates whether this leaf is the root.",51,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"bool"}}],[11,"is_detached","","Indicates whether this leaf is detached.",51,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"dbvtleaf"}}],[11,"new","","Creates a new leaf.",52,{"inputs":[{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",52,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",52,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"decode","ncollide_entities::partitioning::bvt","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"bvt"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"bvt"}],"output":{"name":"bvt"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"bvtnode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bvtnode"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",53,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",53,null],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",53,null],[11,"best_first_search","","Performs a best-fist-search on the tree.",53,{"inputs":[{"name":"bvt"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",53,{"inputs":[{"name":"bvt"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",53,{"inputs":[{"name":"bvt"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",53,{"inputs":[{"name":"vec"}],"output":{"name":"bvt"}}],[11,"bounding_volume","","The bounding volume of this node.",54,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bv"}}],[11,"repr","ncollide_entities::shape::compound","",45,{"inputs":[{"name":"compound"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::trimesh","",37,{"inputs":[{"name":"trimesh"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::polyline","",38,{"inputs":[{"name":"polyline"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::ball","",39,{"inputs":[{"name":"ball"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::capsule","",40,{"inputs":[{"name":"capsule"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cone","",41,{"inputs":[{"name":"cone"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::convex","",46,{"inputs":[{"name":"convex"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cuboid","",31,{"inputs":[{"name":"cuboid"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cylinder","",42,{"inputs":[{"name":"cylinder"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::segment","",34,{"inputs":[{"name":"segment"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::triangle","",35,{"inputs":[{"name":"triangle"}],"output":{"name":"reprdesc"}}],[6,"Ball2","ncollide::shape","",null,null],[6,"Plane2","","",null,null],[6,"Cuboid2","","",null,null],[6,"Capsule2","","",null,null],[6,"Cone2","","",null,null],[6,"Cylinder2","","",null,null],[6,"Convex2","","",null,null],[6,"Segment2","","",null,null],[6,"Triangle2","","",null,null],[6,"Polyline2","","",null,null],[6,"Compound2","","",null,null],[6,"Ball3","","",null,null],[6,"Plane3","","",null,null],[6,"Cuboid3","","",null,null],[6,"Capsule3","","",null,null],[6,"Cone3","","",null,null],[6,"Cylinder3","","",null,null],[6,"Convex3","","",null,null],[6,"Segment3","","",null,null],[6,"Triangle3","","",null,null],[6,"Polyline3","","",null,null],[6,"TriMesh3","","",null,null],[6,"Compound3","","",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cuboid","","Shape of a box.",null,null],[3,"Ball","","A Ball shape.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",55,null],[3,"Torus","","A torus.",null,null],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped shapes.",null,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"Convex","","The implicit convex hull of a set of points.",null,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",56,null],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave\nshape.",56,null],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",56,{"inputs":[{"name":"compositeshape"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",56,{"inputs":[{"name":"compositeshape"}],"output":{"name":"bvt"}}],[3,"Triangle","","A triangle shape.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[0,"inspection","ncollide","Traits and methods to inspect and retrieve the capabilities and representations of shapes at runtime.",null,null],[6,"Repr2","ncollide::inspection","",null,null],[6,"Repr3","","",null,null],[6,"ReprDesc2","","",null,null],[6,"ReprDesc3","","",null,null],[8,"Repr","","An object with a unique runtime geometric representation.",null,null],[10,"repr","","Gets a reference to this object&#39;s main representation.",48,{"inputs":[{"name":"repr"}],"output":{"name":"reprdesc"}}],[5,"maybe_repr_desc_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"composite_shape_repr_id","","Gets the id associated with the `CompositeShape` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[5,"support_map_repr_id","","Gets the id associated with the `SupportMap` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[5,"maybe_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_support_map","","Converts a shape descriptor to a support map if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[3,"ReprDesc","","",null,null],[5,"maybe_as_support_map","","Converts a shape to a support map if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[0,"bounding_volume","ncollide","Bounding volumes.",null,null],[6,"BoundingSphere2","ncollide::bounding_volume","",null,null],[6,"AABB2","","",null,null],[6,"BoundingSphere3","","",null,null],[6,"AABB3","","",null,null],[5,"implicit_shape_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The bounding volume of `self` transformed by `m`.",57,{"inputs":[{"name":"hasboundingvolume"},{"name":"m"}],"output":{"name":"bv"}}],[5,"bounding_sphere","","Computes the bounding sphere of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[5,"aabb","","Computes the axis-aligned bounding box of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"aabb"}}],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[3,"AABB","","An Axis Aligned Bounding Box.",null,null],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"intersects","","Checks if this bounding volume intersect with another one.",58,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",58,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",58,null],[10,"merged","","Merges this bounding volume with another one.",58,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",58,null],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",58,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[10,"tighten","","Tighten this bounding volume.",58,null],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",58,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[0,"partitioning","ncollide","Spatial partitioning tools.",null,null],[3,"BVT","ncollide::partitioning","A Boundig Volume Tree.",null,null],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",59,{"inputs":[{"name":"bvtvisitor"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",59,null],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",60,{"inputs":[{"name":"bvtcostfn"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",60,{"inputs":[{"name":"bvtcostfn"},{"name":"b"}],"output":{"name":"option"}}],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",61,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",61,null],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",61,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",61,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",52,null],[12,"center","","The center of this node bounding volume.",52,null],[12,"object","","An user-defined object.",52,null],[5,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",62,null],[13,"Parts","","Result of the partitioning of several elements.",62,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[3,"DBVT","","A Dynamic Bounding Volume Tree.",null,null],[5,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",54,null],[13,"Leaf","","A leaf.",54,null],[0,"support_map","ncollide","Definition of support functions.",null,null],[5,"cso_support_point","ncollide::support_map","Computes the support point of the CSO `g1 - g2` on a given direction.",null,null],[8,"SupportMap","","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a\nfunction associating a vector to the shape point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\nshape-dependent. Use `support_point` to sample the complete shape.",63,null],[5,"point_cloud_support_point","","Computes the support point of a cloud of points.",null,null],[0,"geometry","ncollide","Non-persistant pairwise geometric queries.",null,null],[0,"algorithms","ncollide::geometry","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide::geometry::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide::geometry::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",64,null],[10,"add_point","","Adds a point to the simplex.",64,null],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",64,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is\nmutable for optimization purpose.",64,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",64,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",64,{"inputs":[{"name":"simplex"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",64,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",64,null],[0,"johnson_simplex","ncollide::geometry::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[11,"new","ncollide_queries::geometry::algorithms::johnson_simplex","Creates a new, empty, Johnson simplex.",65,{"inputs":[{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",65,{"inputs":[],"output":{"name":"johnsonsimplex"}}],[11,"clone","","",65,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"recursiontemplate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"recursiontemplate"}],"output":{"name":"recursiontemplate"}}],[11,"eq","","",66,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",66,{"inputs":[{"name":"usize"}],"output":{"name":"arc"}}],[11,"reset","","",65,null],[11,"dimension","","",65,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",65,null],[11,"contains_point","","",65,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",65,null],[11,"project_origin_and_reduce","","",65,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"project_origin","","",65,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"modify_pnts","","",65,null],[11,"clone","ncollide_queries::geometry::algorithms::gjk","",67,{"inputs":[{"name":"gjkresult"}],"output":{"name":"gjkresult"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"gjkresult"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","ncollide_queries::geometry::contacts_internal::contact","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"contact"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"contact"}],"output":{"name":"contact"}}],[11,"eq","","",68,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"contact"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new contact.",68,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",68,null],[11,"new","ncollide_queries::geometry::distance_internal::composite_shape_against_any","",69,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"compositeshapeagainstanydistcostfn"}}],[11,"compute_bv_cost","","",69,{"inputs":[{"name":"compositeshapeagainstanydistcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",69,{"inputs":[{"name":"compositeshapeagainstanydistcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","ncollide_queries::geometry::time_of_impact_internal::composite_shape_against_any","",70,null],[11,"compute_bv_cost","","",70,{"inputs":[{"name":"compositeshapeagainstanytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",70,{"inputs":[{"name":"compositeshapeagainstanytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"project_point","ncollide::shape","",30,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",30,null],[11,"contains_point","","",30,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",39,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",39,null],[11,"contains_point","","",39,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",31,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",31,null],[11,"contains_point","","",31,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::bounding_volume","",71,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",71,null],[11,"contains_point","","",71,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",72,null],[11,"contains_point","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::shape","",42,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",42,null],[11,"contains_point","","",42,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",41,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",41,null],[11,"contains_point","","",41,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",40,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",40,null],[11,"contains_point","","",40,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",46,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",46,null],[11,"contains_point","","",46,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",34,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",34,null],[11,"contains_point","","",34,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",35,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",35,null],[11,"contains_point","","",35,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",45,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",45,null],[11,"contains_point","","",45,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"compute_bv_cost","ncollide_queries::point::point_compound","",73,{"inputs":[{"name":"compoundpointprojcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",73,{"inputs":[{"name":"compoundpointprojcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"visit_internal","","",74,{"inputs":[{"name":"pointcontainementtest"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",74,null],[11,"project_point","ncollide::shape","",36,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",36,null],[11,"contains_point","","",36,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"compute_bv_cost","ncollide_queries::point::point_mesh","",75,{"inputs":[{"name":"basemeshpointprojcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",75,{"inputs":[{"name":"basemeshpointprojcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"visit_internal","","",76,{"inputs":[{"name":"pointcontainementtest"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",76,null],[11,"project_point","ncollide::shape","",37,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",37,null],[11,"contains_point","","",37,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",38,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",38,null],[11,"contains_point","","",38,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::geometry::algorithms","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",48,null],[11,"contains_point","","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","ncollide_queries::point::point_bvt","Creates a new `PointInterferencesCollector`.",77,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"visit_internal","","",77,{"inputs":[{"name":"pointinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",77,null],[11,"toi_and_normal_with_ray","ncollide::shape","",30,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",39,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",39,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",39,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",31,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",31,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",31,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::bounding_volume","",71,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",71,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",71,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",72,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide::shape","",42,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",41,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",40,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",46,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",34,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",32,{"inputs":[{"name":"minkowskisum"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",35,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",45,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",45,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"compute_bv_cost","ncollide_queries::ray::ray_compound","",78,{"inputs":[{"name":"compoundraytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",78,{"inputs":[{"name":"compoundraytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",79,{"inputs":[{"name":"compoundraytoiandnormalcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",79,{"inputs":[{"name":"compoundraytoiandnormalcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::shape","",36,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",36,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",36,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"compute_bv_cost","ncollide_queries::ray::ray_mesh","",80,{"inputs":[{"name":"basemeshraytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",80,{"inputs":[{"name":"basemeshraytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",81,{"inputs":[{"name":"basemeshraytoiandnormalcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",81,{"inputs":[{"name":"basemeshraytoiandnormalcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",82,{"inputs":[{"name":"basemeshraytoiandnormalanduvscostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",82,{"inputs":[{"name":"basemeshraytoiandnormalanduvscostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::shape","",37,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",37,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",37,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",38,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",38,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",38,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::geometry::algorithms","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",48,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","ncollide_queries::ray::ray_bvt","Creates a new `BestRayInterferenceSearch`.",83,{"inputs":[{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"compute_bv_cost","","",83,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",83,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"b"}],"output":{"name":"option"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",84,{"inputs":[{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"visit_internal","","",84,{"inputs":[{"name":"rayinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",84,null],[3,"JohnsonSimplex","ncollide::geometry::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex.",null,null],[0,"gjk","ncollide::geometry::algorithms","The Gilbert–Johnson–Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide::geometry::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",67,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",67,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is to far away from the polytope.",67,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK\nalgorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK.\nalgorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[0,"minkowski_sampling","ncollide::geometry::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide::geometry::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide::geometry","Implementation details of the `contact` and `contacts` functions.",null,null],[5,"any_against_any","ncollide::geometry::contacts_internal","Computes one contact point between two shapes.",null,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, Convex, etc.)",null,null],[5,"ball_against_ball","","Contact between balls.",null,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, Convex, etc.) and a plane.",null,null],[5,"composite_shape_against_any","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"any_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",68,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",68,null],[12,"normal","","Contact normal",68,null],[12,"depth","","Penetration depth",68,null],[0,"distance_internal","ncollide::geometry","Implementation details of the `distance` function.",null,null],[5,"support_map_against_support_map_with_params","ncollide::geometry::distance_internal","Distance between support-mapped shapes.",null,null],[5,"any_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[5,"composite_shape_against_any","","Smallest distance between a composite shape and any other shape.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"ball_against_ball","","Distance between balls.",null,null],[5,"any_against_any","","Computes the minimum distance separating two shapes.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[5,"plane_against_support_map","","Distance between a plane and a support-mapped shape.",null,null],[0,"time_of_impact_internal","ncollide::geometry","Implementation details of the `time_of_impact` function.",null,null],[5,"plane_against_support_map","ncollide::geometry::time_of_impact_internal","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"any_against_any","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"any_against_composite_shape","","Time Of Impact of any shape with a composite shape, under translational movement.",null,null],[5,"ball_against_ball","","Time Of Impact of two balls under translational movement.",null,null],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"composite_shape_against_any","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,null],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,null],[5,"any_against_any","ncollide::geometry","Computes one contact point between two shapes.",null,null],[5,"any_against_any","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"any_against_any","","Computes the minimum distance separating two shapes.",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",68,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",68,null],[12,"normal","","Contact normal",68,null],[12,"depth","","Penetration depth",68,null],[0,"point","ncollide","Point inclusion and projection.",null,null],[8,"PointQuery","ncollide::point","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",85,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[10,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",85,null],[10,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",85,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[3,"PointInterferencesCollector","","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[0,"ray","ncollide","Ray-casting related definitions and implementations.",null,null],[6,"Ray3","ncollide::ray","",null,null],[6,"Ray2","","",null,null],[6,"RayIntersection3","","",null,null],[6,"RayIntersection2","","",null,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",86,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",86,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed\nshape and a ray.",86,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",86,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",87,null],[12,"normal","","The normal at the intersection point.",87,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape\ndo not support texture coordinates.",87,null],[3,"Ray","","A Ray.",null,null],[12,"orig","","Starting point of the ray.",88,null],[12,"dir","","Direction of the ray.",88,null],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[0,"narrow_phase","ncollide","Collision detection algorithms and structure for the Narrow Phase.",null,null],[3,"BallBall","ncollide::narrow_phase","Collision detector between two balls.",null,null],[3,"PlaneSupportMap","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[6,"CollisionAlgorithm","","",null,null],[3,"SupportMapSupportMap","","Persistent collision detector between two shapes having a support mapping function.",null,null],[3,"CompositeShapeRepr","","Collision detector between a concave shape and another shape.",null,null],[8,"ContactSignalHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact","","Activate an action for when two objects start or stop to be close to each other.",89,null],[8,"CollisionDetector","","Trait of the algorithms executed during the so-called Narrow Phase.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",90,{"inputs":[{"name":"collisiondetector"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[10,"num_colls","","The number of collision detected during the last update.",90,{"inputs":[{"name":"collisiondetector"}],"output":{"name":"usize"}}],[10,"colls","","Collects the collisions detected during the last update.",90,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[8,"CollisionDispatcher","","",null,null],[10,"get_collision_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",91,{"inputs":[{"name":"collisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[3,"OneShotContactManifoldGenerator","","Contact manifold generator producing a full manifold at the first update.",null,null],[3,"SupportMapPlane","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[3,"ReprCompositeShape","","Collision detector between a shape and a concave shape.",null,null],[3,"BasicCollisionDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[0,"broad_phase","ncollide","Broad phases.",null,null],[8,"BroadPhase","ncollide::broad_phase","Trait all broad phase must implement.",null,null],[10,"deferred_add","","Tells the broad phase to add an element during the next update.",92,null],[10,"deferred_remove","","Tells the broad phase to remove an element during the next update.",92,null],[10,"deferred_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",92,null],[10,"update","","Updates the object additions, removals, and interferences detection.",92,null],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",92,null],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",92,null],[10,"interferences_with_point","","Collects every object which might contain a given point.",92,null],[3,"DBVTBroadPhase","","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[0,"world","ncollide","High level API to detect collisions in large, complex scenes.",null,null],[6,"CollisionWorld3","ncollide::world","",null,null],[6,"CollisionWorld2","","",null,null],[3,"Contacts","","An iterator through contacts.",null,null],[3,"ContactPairs","","Iterator through contact pairs.",null,null],[3,"CollisionObjectsDispatcher","","Collision detector dispatcher for collision objects.",null,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[3,"CollisionGroups","","30 groups of collision used to filter which object collide with which other one.",null,null],[6,"BroadPhaseObject","","",null,null],[3,"CollisionObject","","A stand-alone object that has a position and a shape.",null,null],[12,"position","","The position of the collision object.",93,null],[12,"shape","","The shape of the collision object.",93,null],[12,"collision_groups","","The collision groups of the collision object.",93,null],[12,"data","","The data associated to this object.",93,null],[0,"utils","ncollide::procedural","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide::procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,null],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer.\nThe circle is contained on the plane spanned by the `x` and `y` axis.",null,null],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the\n`base_circle` point in common.\nPushes `nsubdiv - 2` elements to `out`.",null,null],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,null],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each\nidentical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide::procedural","Path generation.",null,null],[8,"StrokePattern","ncollide::procedural::path","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",94,{"inputs":[{"name":"strokepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"new","ncollide_procedural::path::polyline_path","Creates a new polyline-based path.",95,{"inputs":[{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"new","ncollide_procedural::path::no_cap","Creates a new `NoCap`.",96,{"inputs":[],"output":{"name":"nocap"}}],[11,"gen_start_cap","","",96,null],[11,"gen_end_cap","","",96,null],[11,"new","ncollide_procedural::path::arrowhead_cap","Creates a cap that looks like an arrow.",97,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"gen_end_cap","","",97,null],[11,"gen_start_cap","","",97,null],[11,"new","ncollide_procedural::path::polyline_pattern","Creates a new polyline pattern.",98,{"inputs":[{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"stroke","","",98,{"inputs":[{"name":"polylinepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"next","ncollide_procedural::path::polyline_path","",95,{"inputs":[{"name":"polylinepath"}],"output":{"name":"pathsample"}}],[11,"fmt","ncollide_procedural::trimesh","",99,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",99,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",99,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"fmt","","",100,{"inputs":[{"name":"trimesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new `TriMesh`.",100,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",100,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",100,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",100,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",100,null],[11,"num_triangles","","The number of triangles on this mesh.",100,{"inputs":[{"name":"trimesh"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",100,null],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations\ninfered from the index buffer.",100,null],[11,"scale_by","","Scales each vertex of this mesh.",100,null],[11,"scale_by_scalar","","Scales each vertex of this mesh.",100,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",100,null],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",100,null],[11,"clone","ncollide_procedural::polyline","",101,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Creates a new polyline.",101,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"translate_by","","Translates each vertex of this polyline.",101,null],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",101,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",101,null],[11,"scale_by_scalar","","Scales each vertex of this polyline.",101,null],[11,"scale_by","","Scales each vertex of this mesh.",101,null],[3,"PolylinePath","ncollide::procedural::path","A path with its sample points given by a polyline.",null,null],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",102,{"inputs":[{"name":"curvesampler"}],"output":{"name":"pathsample"}}],[3,"NoCap","","A cap that renders nothing.",null,null],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",103,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",103,null],[13,"EndPoint","","A point that ends the path currently generated.",103,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",103,null],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",104,null],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",104,null],[3,"PolylinePattern","","A pattern composed of polyline and two caps.",null,null],[6,"TriMesh3","ncollide::procedural","",null,null],[6,"Polyline3","","",null,null],[6,"TriMesh2","","",null,null],[6,"Polyline2","","",null,null],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",99,null],[13,"Split","","The vertex, normal, and uvs have different indices.",99,null],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"vec3"}],"output":{"name":"trimesh"}}],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[3,"TriMesh","","Shapeetric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",100,null],[12,"normals","","Coordinates of the mesh normals.",100,null],[12,"uvs","","Textures coordinates of the mesh.",100,null],[12,"indices","","Index buffer of the mesh.",100,null],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[3,"Polyline","","Shapeetric description of a polyline.",null,null],[12,"coords","","Coordinates of the polyline vertices.",101,null],[12,"normals","","Coordinates of the polyline normals.",101,null],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,null],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[8,"ToPolyline","ncollide::transformation","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",105,{"inputs":[{"name":"topolyline"},{"name":"i"}],"output":{"name":"polyline"}}],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[5,"convex_hull2","","Computes the convex hull of a set of 2d points.",null,null],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull\nvertices.",null,null],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null],[5,"hacd","","Approximate convex decomposition of a triangle mesh.",null,null],[8,"ToTriMesh","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",106,{"inputs":[{"name":"totrimesh"},{"name":"i"}],"output":{"name":"trimesh"}}]],"paths":[[8,"FloatError"],[8,"Point"],[8,"Vect"],[3,"Pair"],[3,"PairTWHash"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"Entry"],[3,"HashMap"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"RefWithCost"],[3,"FastKey"],[3,"LookupData"],[3,"UidRemap"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"BacktrackingLineSearch"],[3,"HashablePartialEq"],[8,"HashFun"],[8,"LineSearch"],[8,"AsBytes"],[3,"Plane"],[3,"Cuboid"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Segment"],[3,"Triangle"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[3,"Ball"],[3,"Capsule"],[3,"Cone"],[3,"Cylinder"],[3,"Reflection"],[3,"Torus"],[3,"Compound"],[3,"Convex"],[3,"BoundingVolumeInterferencesCollector"],[8,"Repr"],[4,"UpdateState"],[3,"DBVT"],[4,"DBVTLeafState"],[3,"DBVTLeaf"],[3,"BVT"],[4,"BVTNode"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"HasBoundingVolume"],[8,"BoundingVolume"],[8,"BVTVisitor"],[8,"BVTCostFn"],[8,"BVTTVisitor"],[4,"BinaryPartition"],[8,"SupportMap"],[8,"Simplex"],[3,"JohnsonSimplex"],[3,"RecursionTemplate"],[4,"GJKResult"],[3,"Contact"],[3,"CompositeShapeAgainstAnyDistCostFn"],[3,"CompositeShapeAgainstAnyTOICostFn"],[3,"AABB"],[3,"BoundingSphere"],[3,"CompoundPointProjCostFn"],[3,"PointContainementTest"],[3,"BaseMeshPointProjCostFn"],[3,"PointContainementTest"],[3,"PointInterferencesCollector"],[3,"CompoundRayToiCostFn"],[3,"CompoundRayToiAndNormalCostFn"],[3,"BaseMeshRayToiCostFn"],[3,"BaseMeshRayToiAndNormalCostFn"],[3,"BaseMeshRayToiAndNormalAndUVsCostFn"],[3,"RayIntersectionCostFn"],[3,"RayInterferencesCollector"],[8,"PointQuery"],[8,"RayCast"],[3,"RayIntersection"],[3,"Ray"],[8,"ContactSignalHandler"],[8,"CollisionDetector"],[8,"CollisionDispatcher"],[8,"BroadPhase"],[3,"CollisionObject"],[8,"StrokePattern"],[3,"PolylinePath"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePattern"],[4,"IndexBuffer"],[3,"TriMesh"],[3,"Polyline"],[8,"CurveSampler"],[4,"PathSample"],[8,"PolylineCompatibleCap"],[8,"ToPolyline"],[8,"ToTriMesh"]]};
searchIndex["ncollide_pipeline"] = {"doc":"Persistent and time-coherent collision detection.","items":[[0,"broad_phase","ncollide_pipeline","Broad phases.",null,null],[3,"DBVTBroadPhase","ncollide_pipeline::broad_phase","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[11,"new","","Creates a new broad phase based on a Dynamic Bounding Volume Tree.",0,null],[11,"num_interferences","","Number of interferences detected by this broad phase.",0,{"inputs":[{"name":"dbvtbroadphase"}],"output":{"name":"usize"}}],[11,"deferred_add","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[11,"deferred_remove","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"}],"output":null}],[11,"update","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[11,"deferred_set_bounding_volume","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"},{"name":"bv"}],"output":null}],[11,"interferences_with_bounding_volume","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"bv"},{"name":"vec"}],"output":null}],[11,"interferences_with_ray","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"ray"},{"name":"vec"}],"output":null}],[11,"interferences_with_point","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"p"},{"name":"vec"}],"output":null}],[8,"BroadPhase","","Trait all broad phase must implement.",null,null],[10,"deferred_add","","Tells the broad phase to add an element during the next update.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[10,"deferred_remove","","Tells the broad phase to remove an element during the next update.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"}],"output":null}],[10,"deferred_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"},{"name":"bv"}],"output":null}],[10,"update","","Updates the object additions, removals, and interferences detection.",1,{"inputs":[{"name":"broadphase"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",1,{"inputs":[{"name":"broadphase"},{"name":"bv"},{"name":"vec"}],"output":null}],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",1,{"inputs":[{"name":"broadphase"},{"name":"ray"},{"name":"vec"}],"output":null}],[10,"interferences_with_point","","Collects every object which might contain a given point.",1,{"inputs":[{"name":"broadphase"},{"name":"p"},{"name":"vec"}],"output":null}],[0,"narrow_phase","ncollide_pipeline","Collision detection algorithms and structure for the Narrow Phase.",null,null],[3,"BallBall","ncollide_pipeline::narrow_phase","Collision detector between two balls.",null,null],[3,"PlaneSupportMap","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapPlane","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapSupportMap","","Persistent collision detector between two shapes having a support mapping function.",null,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[3,"OneShotContactManifoldGenerator","","Contact manifold generator producing a full manifold at the first update.",null,null],[3,"CompositeShapeRepr","","Collision detector between a concave shape and another shape.",null,null],[3,"ReprCompositeShape","","Collision detector between a shape and a concave shape.",null,null],[3,"BasicCollisionDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[11,"clone","","",2,{"inputs":[{"name":"ballball"}],"output":{"name":"ballball"}}],[11,"new","","Creates a new persistent collision detector between two balls.",2,null],[11,"update","","",2,{"inputs":[{"name":"ballball"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",2,{"inputs":[{"name":"ballball"}],"output":{"name":"usize"}}],[11,"colls","","",2,{"inputs":[{"name":"ballball"},{"name":"vec"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"planesupportmap"}],"output":{"name":"planesupportmap"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support\nmapping function.",3,null],[11,"clone","","",4,{"inputs":[{"name":"supportmapplane"}],"output":{"name":"supportmapplane"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support\nmapping function.",4,null],[11,"update","","",3,{"inputs":[{"name":"planesupportmap"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",3,{"inputs":[{"name":"planesupportmap"}],"output":{"name":"usize"}}],[11,"colls","","",3,{"inputs":[{"name":"planesupportmap"},{"name":"vec"}],"output":null}],[11,"update","","",4,{"inputs":[{"name":"supportmapplane"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",4,{"inputs":[{"name":"supportmapplane"}],"output":{"name":"usize"}}],[11,"colls","","",4,{"inputs":[{"name":"supportmapplane"},{"name":"vec"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"supportmapsupportmap"}],"output":{"name":"supportmapsupportmap"}}],[11,"new","","Creates a new persistant collision detector between two shapes with support mapping\nfunctions.",5,null],[11,"update","","",5,{"inputs":[{"name":"supportmapsupportmap"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",5,{"inputs":[{"name":"supportmapsupportmap"}],"output":{"name":"usize"}}],[11,"colls","","",5,{"inputs":[{"name":"supportmapsupportmap"},{"name":"vec"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new incremental contact manifold generator.",6,null],[11,"get_sub_collision","","Gets a collision from the sub-detector used by this manifold generator. This does not\nupdate the manifold itself.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"option"}}],[11,"add_new_contacts","","Updates the current manifold by adding one point.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"update_contacts","","Updates the contacts already existing on this manifold.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"m"},{"name":"m"}],"output":null}],[11,"update","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"}],"output":{"name":"usize"}}],[11,"colls","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"vec"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new one shot contact manifold generator.",7,null],[11,"update","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"}],"output":{"name":"usize"}}],[11,"colls","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new collision detector between a concave shape and another shape.",8,null],[11,"new","","Creates a new collision detector between a shape and a concave shape.",9,null],[11,"update","","",8,{"inputs":[{"name":"compositeshaperepr"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",8,{"inputs":[{"name":"compositeshaperepr"}],"output":{"name":"usize"}}],[11,"colls","","",8,{"inputs":[{"name":"compositeshaperepr"},{"name":"vec"}],"output":null}],[11,"update","","",9,{"inputs":[{"name":"reprcompositeshape"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",9,{"inputs":[{"name":"reprcompositeshape"}],"output":{"name":"usize"}}],[11,"colls","","",9,{"inputs":[{"name":"reprcompositeshape"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new basic collision dispatcher.",10,null],[11,"get_collision_algorithm","","",10,{"inputs":[{"name":"basiccollisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[6,"CollisionAlgorithm","","",null,null],[8,"CollisionDetector","","Trait of the algorithms executed during the so-called Narrow Phase.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",11,{"inputs":[{"name":"collisiondetector"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[10,"num_colls","","The number of collision detected during the last update.",11,{"inputs":[{"name":"collisiondetector"}],"output":{"name":"usize"}}],[10,"colls","","Collects the collisions detected during the last update.",11,{"inputs":[{"name":"collisiondetector"},{"name":"vec"}],"output":null}],[8,"CollisionDispatcher","","",null,null],[10,"get_collision_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",12,{"inputs":[{"name":"collisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[8,"ContactSignalHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact","","Activate an action for when two objects start or stop to be close to each other.",13,{"inputs":[{"name":"contactsignalhandler"},{"name":"b"},{"name":"b"},{"name":"bool"}],"output":null}],[0,"world","ncollide_pipeline","High level API to detect collisions in large, complex scenes.",null,null],[3,"CollisionObject","ncollide_pipeline::world","A stand-alone object that has a position and a shape.",null,null],[12,"position","","The position of the collision object.",14,null],[12,"shape","","The shape of the collision object.",14,null],[12,"collision_groups","","The collision groups of the collision object.",14,null],[12,"data","","The data associated to this object.",14,null],[3,"CollisionGroups","","30 groups of collision used to filter which object collide with which other one.",null,null],[3,"CollisionObjectsDispatcher","","Collision detector dispatcher for collision objects.",null,null],[3,"ContactPairs","","Iterator through contact pairs.",null,null],[3,"Contacts","","An iterator through contacts.",null,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[11,"new","","Creates a new collision object.",14,{"inputs":[{"name":"m"},{"name":"arc"},{"name":"collisiongroups"},{"name":"t"}],"output":{"name":"collisionobject"}}],[11,"fmt","","",15,{"inputs":[{"name":"collisiongroups"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"collisiongroups"}],"output":{"name":"collisiongroups"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"collisiongroups"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new `CollisionGroups` that enables collisions with everything except\nself-collision.",15,{"inputs":[],"output":{"name":"collisiongroups"}}],[11,"new_with_groups","","Creates a new `CollisionGroups` that enables collisions with the given groups.",15,null],[11,"new_without_groups","","Creates a new `CollisionGroups` that enables collisions with every group but the given\nones.",15,null],[11,"enable_collisions_with_all_groups","","Enables collision with all groups.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"disable_collisions_with_all_groups","","Disables collision with all groups.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"enable_collisions_with_group","","Enable collision detection with a specific group.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":null}],[11,"disable_collisions_with_group","","Disables collision detection with a specific group.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":null}],[11,"enable_self_collision","","Enables self collision detection.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"disable_self_collision","","Disables self collision detection.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"can_collide_with_group","","Tests whether collisions with a given group is enabled.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_collide_with_groups","","Tests whether two collision groups have at least one group in common.",15,{"inputs":[{"name":"collisiongroups"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_collide_with_self","","Tests whether self-collision is enabled.",15,{"inputs":[{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CollisionObjectsDispatcher`.",16,{"inputs":[{"name":"box"}],"output":{"name":"collisionobjectsdispatcher"}}],[11,"update","","Updates the contact pairs.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"usize"}],"output":null}],[11,"contact_pairs","","Iterates through all the contact pairs.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"}],"output":{"name":"contactpairs"}}],[11,"contacts","","Iterates through all the contacts detected since the last update.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"}],"output":{"name":"contacts"}}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"str"},{"name":"box"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"str"}],"output":null}],[11,"handle_proximity","","Creates/removes the persistant collision detector associated to a given pair of objects.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"},{"name":"bool"}],"output":null}],[11,"is_proximity_allowed","","Tests if two objects can be tested for mutual collision.",16,{"inputs":[{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"next","","",17,{"inputs":[{"name":"contactpairs"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"contacts"}],"output":{"name":"option"}}],[11,"new","","Creates a new collision world.",19,null],[11,"add","","Adds a collision object to the world.",19,{"inputs":[{"name":"collisionworld"},{"name":"usize"},{"name":"m"},{"name":"arc"},{"name":"collisiongroups"},{"name":"t"}],"output":null}],[11,"update","","Updates the collision world.",19,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"deferred_remove","","Marks a collision object for removal from the world during the next update.",19,{"inputs":[{"name":"collisionworld"},{"name":"usize"}],"output":null}],[11,"deferred_set_position","","Sets the position the collision object attached to the specified object will have during\nthe next update.",19,{"inputs":[{"name":"collisionworld"},{"name":"usize"},{"name":"m"}],"output":null}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",19,{"inputs":[{"name":"collisionworld"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",19,{"inputs":[{"name":"collisionworld"},{"name":"str"}],"output":null}],[11,"perform_position_update","","Executes the position updates.",19,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"perform_broad_phase","","Executes the broad phase of the collision detection pipeline.",19,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"perform_removals_and_broad_phase","","Actually removes all the objects marked by `.deferred_remove(...)` and updates the broad\nphase.",19,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"perform_narrow_phase","","Executes the narrow phase of the collision detection pipeline.",19,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"contact_pairs","","Iterates through all the contact pairs detected since the last update.",19,{"inputs":[{"name":"collisionworld"}],"output":{"name":"contactpairs"}}],[11,"contacts","","Iterates through every contact detected since the last update.",19,{"inputs":[{"name":"collisionworld"}],"output":{"name":"contacts"}}],[11,"interferences_with_ray","","Computes the interferences between every rigid bodies on this world and a ray.",19,{"inputs":[{"name":"collisionworld"},{"name":"ray"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithray"}}],[11,"interferences_with_point","","Computes the interferences between every rigid bodies of a given broad phase, and a point.",19,{"inputs":[{"name":"collisionworld"},{"name":"p"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithpoint"}}],[11,"interferences_with_aabb","","Computes the interferences between every rigid bodies of a given broad phase, and a aabb.",19,{"inputs":[{"name":"collisionworld"},{"name":"aabb"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithaabb"}}],[6,"BroadPhaseObject","","Type of the broad phase trait-object used by the collision world.",null,null],[6,"CollisionWorld3","","A 3D collision world associating collision objects to user-defined data of type `T`.",null,null],[6,"CollisionWorld2","","A 2D collision world associating collision objects to user-defined data of type `T`.",null,null]],"paths":[[3,"DBVTBroadPhase"],[8,"BroadPhase"],[3,"BallBall"],[3,"PlaneSupportMap"],[3,"SupportMapPlane"],[3,"SupportMapSupportMap"],[3,"IncrementalContactManifoldGenerator"],[3,"OneShotContactManifoldGenerator"],[3,"CompositeShapeRepr"],[3,"ReprCompositeShape"],[3,"BasicCollisionDispatcher"],[8,"CollisionDetector"],[8,"CollisionDispatcher"],[8,"ContactSignalHandler"],[3,"CollisionObject"],[3,"CollisionGroups"],[3,"CollisionObjectsDispatcher"],[3,"ContactPairs"],[3,"Contacts"],[3,"CollisionWorld"]]};
searchIndex["ncollide_transformation"] = {"doc":"Transformation, simplification and decomposition of meshes.","items":[[5,"hacd","ncollide_transformation","Approximate convex decomposition of a triangle mesh.",null,null],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null],[5,"convex_hull2","","Computes the convex hull of a set of 2d points.",null,null],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull\nvertices.",null,null],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::ball_to_trimesh","",0,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::capsule_to_trimesh","",1,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::cone_to_trimesh","",2,{"inputs":[{"name":"cone3"},{"name":"u32"}],"output":{"name":"trimesh3"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::cuboid_to_trimesh","",3,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::cylinder_to_trimesh","",4,{"inputs":[{"name":"cylinder3"},{"name":"u32"}],"output":{"name":"trimesh3"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::mesh_to_trimesh","",5,null],[11,"to_trimesh","ncollide_entities::shape::minkowski_sum","",6,null],[11,"to_trimesh","ncollide_entities::shape::reflection","",7,{"inputs":[{"name":"reflection"},{"name":"i"}],"output":{"name":"trimesh"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::triangle_to_trimesh","",8,null],[11,"to_polyline","ncollide_transformation::to_polyline::ball_to_polyline","",9,{"inputs":[{"name":"ball2"},{"name":"u32"}],"output":{"name":"polyline2"}}],[11,"to_polyline","ncollide_transformation::to_polyline::capsule_to_polyline","",10,{"inputs":[{"name":"capsule2"},{"name":"u32"}],"output":{"name":"polyline2"}}],[11,"to_polyline","ncollide_transformation::to_polyline::cone_to_polyline","",11,null],[11,"to_polyline","ncollide_transformation::to_polyline::cuboid_to_polyline","",12,null],[11,"to_polyline","ncollide_transformation::to_polyline::cylinder_to_polyline","",13,null],[11,"to_polyline","ncollide_entities::shape::minkowski_sum","",6,null],[11,"to_polyline","ncollide_entities::shape::reflection","",7,{"inputs":[{"name":"reflection"},{"name":"i"}],"output":{"name":"polyline"}}],[11,"to_polyline","ncollide_transformation::to_polyline::segment_to_polyline","",14,null],[11,"to_polyline","ncollide_transformation::to_polyline::triangle_to_polyline","",15,null],[8,"ToTriMesh","ncollide_transformation","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",16,{"inputs":[{"name":"totrimesh"},{"name":"i"}],"output":{"name":"trimesh"}}],[8,"ToPolyline","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",17,{"inputs":[{"name":"topolyline"},{"name":"i"}],"output":{"name":"polyline"}}]],"paths":[[6,"Ball3"],[6,"Capsule3"],[6,"Cone3"],[6,"Cuboid3"],[6,"Cylinder3"],[6,"TriMesh3"],[3,"MinkowskiSum"],[3,"Reflection"],[6,"Triangle3"],[6,"Ball2"],[6,"Capsule2"],[6,"Cone2"],[6,"Cuboid2"],[6,"Cylinder2"],[6,"Segment2"],[6,"Triangle2"],[8,"ToTriMesh"],[8,"ToPolyline"]]};
searchIndex["ncollide_queries"] = {"doc":"Geometric queries.","items":[[0,"geometry","ncollide_queries","Non-persistant pairwise geometric queries.",null,null],[3,"Contact","ncollide_queries::geometry","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",0,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",0,null],[12,"normal","","Contact normal",0,null],[12,"depth","","Penetration depth",0,null],[5,"contact","","Computes one contact point between two shapes.",null,null],[5,"distance","","Computes the minimum distance separating two shapes.",null,null],[5,"time_of_impact","","Computes the smallest time of impact of two shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[0,"algorithms","","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide_queries::geometry::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide_queries::geometry::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":null}],[10,"add_point","","Adds a point to the simplex.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":null}],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is\nmutable for optimization purpose.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",1,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",1,{"inputs":[{"name":"simplex"},{"name":"fn"}],"output":null}],[0,"johnson_simplex","ncollide_queries::geometry::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"JohnsonSimplex","ncollide_queries::geometry::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex.",null,null],[11,"clone","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"recursiontemplate"}],"output":{"name":"recursiontemplate"}}],[11,"eq","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",3,{"inputs":[{"name":"usize"}],"output":{"name":"arc"}}],[11,"new","","Creates a new, empty, Johnson simplex.",2,{"inputs":[{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",2,{"inputs":[],"output":{"name":"johnsonsimplex"}}],[11,"reset","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":null}],[11,"dimension","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",2,null],[11,"contains_point","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":null}],[11,"project_origin_and_reduce","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"project_origin","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"modify_pnts","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"fn"}],"output":null}],[0,"gjk","ncollide_queries::geometry::algorithms","The Gilbert–Johnson–Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide_queries::geometry::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",4,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",4,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is to far away from the polytope.",4,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK\nalgorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK.\nalgorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"gjkresult"}],"output":{"name":"gjkresult"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"gjkresult"},{"name":"__s"}],"output":{"name":"result"}}],[0,"minkowski_sampling","ncollide_queries::geometry::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide_queries::geometry::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide_queries::geometry","Implementation details of the `contact` and `contacts` functions.",null,null],[3,"Contact","ncollide_queries::geometry::contacts_internal","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",0,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",0,null],[12,"normal","","Contact normal",0,null],[12,"depth","","Penetration depth",0,null],[5,"ball_against_ball","","Contact between balls.",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, Convex, etc.)",null,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, Convex, etc.) and a plane.",null,null],[5,"any_against_any","","Computes one contact point between two shapes.",null,null],[5,"contact_internal","","Computes one contact point between two shapes.",null,null],[5,"composite_shape_against_any","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"any_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[11,"decode","ncollide_queries::geometry","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"contact"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"contact"}],"output":{"name":"contact"}}],[11,"eq","","",0,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"contact"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new contact.",0,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",0,{"inputs":[{"name":"contact"}],"output":null}],[0,"distance_internal","","Implementation details of the `distance` function.",null,null],[5,"ball_against_ball","ncollide_queries::geometry::distance_internal","Distance between balls.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[5,"support_map_against_support_map_with_params","","Distance between support-mapped shapes.",null,null],[5,"plane_against_support_map","","Distance between a plane and a support-mapped shape.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"any_against_any","","Computes the minimum distance separating two shapes.",null,null],[5,"distance","","Computes the minimum distance separating two shapes.",null,null],[5,"composite_shape_against_any","","Smallest distance between a composite shape and any other shape.",null,null],[5,"any_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[0,"time_of_impact_internal","ncollide_queries::geometry","Implementation details of the `time_of_impact` function.",null,null],[5,"ball_against_ball","ncollide_queries::geometry::time_of_impact_internal","Time Of Impact of two balls under translational movement.",null,{"inputs":[{"name":"p"},{"name":"vect"},{"name":"ball"},{"name":"p"},{"name":"vect"},{"name":"ball"}],"output":{"name":"option"}}],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"plane_against_support_map","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"plane"},{"name":"m"},{"name":"vect"},{"name":"g"}],"output":{"name":"option"}}],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g"},{"name":"m"},{"name":"vect"},{"name":"plane"}],"output":{"name":"option"}}],[5,"any_against_any","","Computes the smallest time of impact of two shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"time_of_impact","","Computes the smallest time of impact of two shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"composite_shape_against_any","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"any_against_composite_shape","","Time Of Impact of any shape with a composite shape, under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[0,"point","ncollide_queries","Point inclusion and projection.",null,null],[3,"PointInterferencesCollector","ncollide_queries::point","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[11,"project_point","ncollide_entities::shape::plane","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",5,null],[11,"contains_point","","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::ball","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",6,null],[11,"contains_point","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cuboid","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",7,null],[11,"contains_point","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::bounding_volume::aabb","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",8,null],[11,"contains_point","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::bounding_volume::bounding_sphere","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",9,null],[11,"contains_point","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cylinder","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",10,null],[11,"contains_point","","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cone","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",11,null],[11,"contains_point","","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::capsule","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",12,null],[11,"contains_point","","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::convex","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",13,null],[11,"contains_point","","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::segment","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",14,null],[11,"contains_point","","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::triangle","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",15,null],[11,"contains_point","","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::compound","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",16,null],[11,"contains_point","","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::base_mesh","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",17,null],[11,"contains_point","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::trimesh","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",18,null],[11,"contains_point","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::polyline","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",19,null],[11,"contains_point","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_queries::point","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",20,null],[11,"contains_point","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PointInterferencesCollector`.",21,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"visit_internal","","",21,{"inputs":[{"name":"pointinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",21,{"inputs":[{"name":"pointinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"PointQuery","","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",22,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[10,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",22,null],[10,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",22,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[0,"ray","ncollide_queries","Ray-casting related definitions and implementations.",null,null],[3,"Ray","ncollide_queries::ray","A Ray.",null,null],[12,"orig","","Starting point of the ray.",23,null],[12,"dir","","Direction of the ray.",23,null],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",24,null],[12,"normal","","The normal at the intersection point.",24,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape\ndo not support texture coordinates.",24,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,{"inputs":[{"name":"p"},{"name":"vect"},{"name":"ray"}],"output":{"name":"option"}}],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[11,"toi_and_normal_with_ray","ncollide_entities::shape::plane","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::ball","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::cuboid","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::bounding_volume::aabb","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::bounding_volume::bounding_sphere","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::cylinder","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::cone","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::capsule","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::convex","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::segment","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::minkowski_sum","",25,{"inputs":[{"name":"minkowskisum"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::triangle","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::compound","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::base_mesh","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::trimesh","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::polyline","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_queries::ray","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `BestRayInterferenceSearch`.",26,{"inputs":[{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"compute_bv_cost","","",26,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",26,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"b"}],"output":{"name":"option"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",27,{"inputs":[{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"visit_internal","","",27,{"inputs":[{"name":"rayinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",27,{"inputs":[{"name":"rayinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[6,"Ray3","","A 3D ray.",null,null],[6,"Ray2","","A 2D ray.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed\nshape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}]],"paths":[[3,"Contact"],[8,"Simplex"],[3,"JohnsonSimplex"],[3,"RecursionTemplate"],[4,"GJKResult"],[3,"Plane"],[3,"Ball"],[3,"Cuboid"],[3,"AABB"],[3,"BoundingSphere"],[3,"Cylinder"],[3,"Cone"],[3,"Capsule"],[3,"Convex"],[3,"Segment"],[3,"Triangle"],[3,"Compound"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[8,"Repr"],[3,"PointInterferencesCollector"],[8,"PointQuery"],[3,"Ray"],[3,"RayIntersection"],[3,"MinkowskiSum"],[3,"RayIntersectionCostFn"],[3,"RayInterferencesCollector"],[8,"RayCast"]]};
searchIndex["ncollide_entities"] = {"doc":"Geometric entities manipulated by ncollide.","items":[[0,"shape","ncollide_entities","Collision shapes supported by ncollide.",null,null],[3,"Ball","ncollide_entities::shape","A Ball shape.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Cuboid","","Shape of a box.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Convex","","The implicit convex hull of a set of points.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped shapes.",null,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"Triangle","","A triangle shape.",null,null],[3,"Torus","","A torus.",null,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"fmt","","",0,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"new","","Builds a new plane from its center and its normal.",0,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",0,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",0,{"inputs":[{"name":"plane"}],"output":{"name":"v"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"cuboid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cuboid"}],"output":{"name":"cuboid"}}],[11,"fmt","","",1,{"inputs":[{"name":"cuboid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each\naxis. Each half-extent must be greater than 0.04.",1,{"inputs":[{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",1,{"inputs":[{"name":"cuboid"}],"output":{"name":"v"}}],[11,"fmt","","",2,{"inputs":[{"name":"minkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",2,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g2"}}],[11,"fmt","","",3,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",3,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g2"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"segment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"fmt","","",4,{"inputs":[{"name":"segment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"new","","Creates a new segment from two points.",4,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",4,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",4,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",4,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"triangle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"triangle"}],"output":{"name":"triangle"}}],[11,"fmt","","",5,{"inputs":[{"name":"triangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"new","","Creates a triangle from three points.",5,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"basemesh"}}],[11,"new","","Builds a new mesh.",6,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",6,null],[11,"indices","","The indices of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",6,{"inputs":[{"name":"basemesh"},{"name":"usize"}],"output":{"name":"e"}}],[11,"clone","","",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Builds a new mesh.",7,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",7,null],[11,"indices","","The indices of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",7,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"clone","","",8,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Builds a new mesh.",8,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",8,null],[11,"indices","","The indices of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",8,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"ball"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"ball"}],"output":{"name":"ball"}}],[11,"fmt","","",9,{"inputs":[{"name":"ball"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"new","","Creates a new ball from its radius and center.",9,{"inputs":[{"name":"n"}],"output":{"name":"ball"}}],[11,"radius","","The ball radius.",9,{"inputs":[{"name":"ball"}],"output":{"name":"n"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"capsule"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"capsule"}],"output":{"name":"capsule"}}],[11,"fmt","","",10,{"inputs":[{"name":"capsule"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"new","","Creates a new capsule.",10,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",10,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule&#39;s rounded part.",10,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"cone"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"cone"}],"output":{"name":"cone"}}],[11,"fmt","","",11,{"inputs":[{"name":"cone"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cone.",11,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",11,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",11,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"fmt","","",12,{"inputs":[{"name":"cylinder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cylinder.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"fmt","","",13,{"inputs":[{"name":"reflection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit,\nthe reflection computation is done in constant time.",13,{"inputs":[{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",13,{"inputs":[{"name":"reflection"}],"output":{"name":"g"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"torus"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"torus"}],"output":{"name":"torus"}}],[11,"fmt","","",14,{"inputs":[{"name":"torus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"new","","Creates a new torus with the given radiuses.",14,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",14,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",14,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"clone","","",15,{"inputs":[{"name":"compound"}],"output":{"name":"compound"}}],[11,"new","","Builds a new compound shape.",15,{"inputs":[{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",15,null],[11,"bvt","","The optimization structure used by this compound shape.",15,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",15,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",15,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"convex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"convex"}],"output":{"name":"convex"}}],[11,"fmt","","",16,{"inputs":[{"name":"convex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"new","","Creates a polytope from a set of point.",16,{"inputs":[{"name":"vec"}],"output":{"name":"convex"}}],[11,"points","","The list of points of this convex polytope.",16,null],[11,"map_part_at","","",15,{"inputs":[{"name":"compound"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",15,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",15,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",15,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",8,{"inputs":[{"name":"polyline"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",8,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",8,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",8,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[6,"Ball2","","A 2D ball.",null,null],[6,"Plane2","","A 2D plane.",null,null],[6,"Cuboid2","","A 2D cuboid.",null,null],[6,"Capsule2","","A 2D capsule.",null,null],[6,"Cone2","","A 2D cone.",null,null],[6,"Cylinder2","","A 2D cylinder.",null,null],[6,"Convex2","","A 2D convex polytope.",null,null],[6,"Segment2","","A 2D segment.",null,null],[6,"Triangle2","","A 2D triangle.",null,null],[6,"Polyline2","","A 2D polyline.",null,null],[6,"Compound2","","A 2D compound shape.",null,null],[6,"Ball3","","A 3D ball.",null,null],[6,"Plane3","","A 3D plane.",null,null],[6,"Cuboid3","","A 3D cuboid.",null,null],[6,"Capsule3","","A 3D capsule.",null,null],[6,"Cone3","","A 3D cone.",null,null],[6,"Cylinder3","","A 3D cylinder.",null,null],[6,"Convex3","","A 3D convex polytope.",null,null],[6,"Segment3","","A 3D segment.",null,null],[6,"Triangle3","","A 3D triangle.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Compound3","","A 3D compound shape.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",17,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",18,{"inputs":[{"name":"compositeshape"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave\nshape.",18,{"inputs":[{"name":"compositeshape"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",18,{"inputs":[{"name":"compositeshape"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",18,{"inputs":[{"name":"compositeshape"}],"output":{"name":"bvt"}}],[0,"support_map","ncollide_entities","Definition of support functions.",null,null],[5,"cso_support_point","ncollide_entities::support_map","Computes the support point of the CSO `g1 - g2` on a given direction.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"vect"}],"output":{"name":"annotatedpoint"}}],[5,"point_cloud_support_point","","Computes the support point of a cloud of points.",null,null],[11,"support_point","ncollide_entities::shape","",1,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",9,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",10,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",16,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",13,{"inputs":[{"name":"reflection"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",5,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",4,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",2,{"inputs":[{"name":"minkowskisum"},{"name":"identity"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",3,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"identity"},{"name":"vect"}],"output":{"name":"annotatedpoint"}}],[8,"SupportMap","ncollide_entities::support_map","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a\nfunction associating a vector to the shape point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\nshape-dependent. Use `support_point` to sample the complete shape.",19,{"inputs":[{"name":"supportmap"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[0,"bounding_volume","ncollide_entities","Bounding volumes.",null,null],[3,"AABB","ncollide_entities::bounding_volume","An Axis Aligned Bounding Box.",null,null],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[5,"aabb","","Computes the axis-aligned bounding box of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"aabb"}}],[5,"bounding_sphere","","Computes the bounding sphere of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[5,"implicit_shape_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[11,"new","","Creates a new `BoundingVolumeInterferencesCollector`.",20,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",20,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",20,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[11,"bounding_volume","ncollide_entities::shape","",1,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",11,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",10,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",5,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",4,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",0,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",16,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",15,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",6,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",8,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",1,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",11,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",10,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",0,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",16,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",15,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",5,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",4,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",6,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",8,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[6,"BoundingSphere2","ncollide_entities::bounding_volume","A 2D bounding sphere.",null,null],[6,"AABB2","","A 2D AABB.",null,null],[6,"BoundingSphere3","","A 3D bounding sphere:",null,null],[6,"AABB3","","A 3D AABB.",null,null],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The bounding volume of `self` transformed by `m`.",21,{"inputs":[{"name":"hasboundingvolume"},{"name":"m"}],"output":{"name":"bv"}}],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"intersects","","Checks if this bounding volume intersect with another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":null}],[10,"merged","","Merges this bounding volume with another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":null}],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[10,"tighten","","Tighten this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":null}],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[0,"partitioning","ncollide_entities","Spatial partitioning tools.",null,null],[3,"DBVT","ncollide_entities::partitioning","A Dynamic Bounding Volume Tree.",null,null],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",23,null],[12,"center","","The center of this node bounding volume.",23,null],[12,"object","","An user-defined object.",23,null],[3,"BVT","","A Boundig Volume Tree.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",24,null],[13,"Parts","","Result of the partitioning of several elements.",24,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",25,null],[13,"Leaf","","A leaf.",25,null],[5,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[5,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",26,{"inputs":[],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",26,{"inputs":[{"name":"dbvt"},{"name":"rc"}],"output":null}],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",26,{"inputs":[{"name":"dbvt"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",26,{"inputs":[{"name":"dbvt"},{"name":"rc"}],"output":null}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",26,{"inputs":[{"name":"dbvt"},{"name":"vis"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"dbvtleaf"}}],[11,"new","","Creates a new leaf.",23,{"inputs":[{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",23,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",23,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"bvt"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"bvt"}],"output":{"name":"bvt"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"bvtnode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bvtnode"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",27,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",27,{"inputs":[{"name":"bvt"},{"name":"vis"}],"output":null}],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",27,{"inputs":[{"name":"bvt"},{"name":"bvt"},{"name":"vis"}],"output":null}],[11,"best_first_search","","Performs a best-fist-search on the tree.",27,{"inputs":[{"name":"bvt"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",27,{"inputs":[{"name":"bvt"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",27,{"inputs":[{"name":"bvt"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",27,{"inputs":[{"name":"vec"}],"output":{"name":"bvt"}}],[11,"bounding_volume","","The bounding volume of this node.",25,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bv"}}],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",28,{"inputs":[{"name":"bvtvisitor"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",28,{"inputs":[{"name":"bvtvisitor"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",29,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",29,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":null}],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",29,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",29,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",30,{"inputs":[{"name":"bvtcostfn"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",30,{"inputs":[{"name":"bvtcostfn"},{"name":"b"}],"output":{"name":"option"}}],[0,"inspection","ncollide_entities","Traits and methods to inspect and retrieve the capabilities and representations of shapes at runtime.",null,null],[5,"maybe_as_composite_shape","ncollide_entities::inspection","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"composite_shape_repr_id","","Gets the id associated with the `CompositeShape` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[5,"maybe_as_support_map","","Converts a shape to a support map if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_support_map","","Converts a shape descriptor to a support map if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"support_map_repr_id","","Gets the id associated with the `SupportMap` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[6,"Repr2","","A 2d dynamic representation object.",null,null],[6,"Repr3","","A 3d dynamic representation object.",null,null],[6,"ReprDesc2","","A 2d dynamic representation descriptor.",null,null],[6,"ReprDesc3","","A 3d dynamic representation descriptor.",null,null]],"paths":[[3,"Plane"],[3,"Cuboid"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Segment"],[3,"Triangle"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[3,"Ball"],[3,"Capsule"],[3,"Cone"],[3,"Cylinder"],[3,"Reflection"],[3,"Torus"],[3,"Compound"],[3,"Convex"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"SupportMap"],[3,"BoundingVolumeInterferencesCollector"],[8,"HasBoundingVolume"],[8,"BoundingVolume"],[3,"DBVTLeaf"],[4,"BinaryPartition"],[4,"BVTNode"],[3,"DBVT"],[3,"BVT"],[8,"BVTVisitor"],[8,"BVTTVisitor"],[8,"BVTCostFn"]]};
searchIndex["ncollide_procedural"] = {"doc":"Procedural mesh generation.","items":[[3,"TriMesh","ncollide_procedural","Shapeetric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",0,null],[12,"normals","","Coordinates of the mesh normals.",0,null],[12,"uvs","","Textures coordinates of the mesh.",0,null],[12,"indices","","Index buffer of the mesh.",0,null],[3,"Polyline","","Shapeetric description of a polyline.",null,null],[12,"coords","","Coordinates of the polyline vertices.",1,null],[12,"normals","","Coordinates of the polyline normals.",1,null],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",2,null],[13,"Split","","The vertex, normal, and uvs have different indices.",2,null],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"vec3"}],"output":{"name":"trimesh"}}],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,{"inputs":[{"name":"vect"}],"output":{"name":"polyline"}}],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[0,"utils","","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide_procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"n"},{"name":"n"},{"name":"vec"}],"output":null}],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer.\nThe circle is contained on the plane spanned by the `x` and `y` axis.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"n"},{"name":"vec"}],"output":null}],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the\n`base_circle` point in common.\nPushes `nsubdiv - 2` elements to `out`.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"vec"}],"output":null}],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each\nidentical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide_procedural","Path generation.",null,null],[3,"PolylinePattern","ncollide_procedural::path","A pattern composed of polyline and two caps.",null,null],[3,"PolylinePath","","A path with its sample points given by a polyline.",null,null],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[3,"NoCap","","A cap that renders nothing.",null,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",3,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",3,null],[13,"EndPoint","","A point that ends the path currently generated.",3,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",3,null],[11,"new","","Creates a new `NoCap`.",4,{"inputs":[],"output":{"name":"nocap"}}],[11,"gen_start_cap","","",4,{"inputs":[{"name":"nocap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_end_cap","","",4,{"inputs":[{"name":"nocap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a cap that looks like an arrow.",5,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"gen_end_cap","","",5,{"inputs":[{"name":"arrowheadcap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_start_cap","","",5,{"inputs":[{"name":"arrowheadcap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new polyline pattern.",6,{"inputs":[{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"stroke","","",6,{"inputs":[{"name":"polylinepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new polyline-based path.",7,{"inputs":[{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"next","","",7,{"inputs":[{"name":"polylinepath"}],"output":{"name":"pathsample"}}],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",8,{"inputs":[{"name":"curvesampler"}],"output":{"name":"pathsample"}}],[8,"StrokePattern","","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",9,{"inputs":[{"name":"strokepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",10,{"inputs":[{"name":"polylinecompatiblecap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",10,{"inputs":[{"name":"polylinecompatiblecap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"fmt","ncollide_procedural","",2,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"fmt","","",0,{"inputs":[{"name":"trimesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new `TriMesh`.",0,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"t"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"t"}],"output":null}],[11,"num_triangles","","The number of triangles on this mesh.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"r"}],"output":null}],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations\ninfered from the index buffer.",0,{"inputs":[{"name":"trimesh"}],"output":null}],[11,"scale_by","","Scales each vertex of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"vect"}],"output":null}],[11,"scale_by_scalar","","Scales each vertex of this mesh.",0,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",0,{"inputs":[{"name":"trimesh"}],"output":null}],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",0,{"inputs":[{"name":"trimesh"},{"name":"bool"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Creates a new polyline.",1,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"translate_by","","Translates each vertex of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"t"}],"output":null}],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"r"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"t"}],"output":null}],[11,"scale_by_scalar","","Scales each vertex of this polyline.",1,null],[11,"scale_by","","Scales each vertex of this mesh.",1,{"inputs":[{"name":"polyline"},{"name":"vect"}],"output":null}],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh2","","A 2D triangle mesh.",null,null],[6,"Polyline2","","A 2D polyline.",null,null]],"paths":[[3,"TriMesh"],[3,"Polyline"],[4,"IndexBuffer"],[4,"PathSample"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePattern"],[3,"PolylinePath"],[8,"CurveSampler"],[8,"StrokePattern"],[8,"PolylineCompatibleCap"]]};
searchIndex["ncollide_utils"] = {"doc":"Miscelaneous elementary geometric utilities.","items":[[3,"BacktrackingLineSearch","ncollide_utils","The backtracking line search method.",null,null],[3,"HashablePartialEq","","A structure that implements `Eq` and is hashable even if the wrapped data implements only\n`PartialEq`.",null,null],[5,"center","","Computes the center of a set of point.",null,null],[5,"project_homogeneous","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"project_homogeneous_to","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[5,"is_affinely_dependent_triangle3","","Tests if three 3D points are exactly aligned without the need of the `Cross` trait.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_affinely_dependent_triangle","","Tests if three points are exactly aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"triangle_perimeter","","Computes the perimeter of a triangle.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"binom","","Computes the binomial coefficient C^k_n (&quot;k among n&quot;).",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"maximize_with_newton","","Maximizes a real function using the Newton method.",null,null],[5,"newton","","Finds the root of a function using the Newton method.",null,null],[5,"minimize_with_bfgs","","Minimizes a function using the bfgs method.",null,null],[5,"bfgs","","Minimizes a function using the quasi-newton BFGS method.",null,{"inputs":[{"name":"usize"},{"name":"ss"},{"name":"v"},{"name":"outerproducttype"},{"name":"f"},{"name":"d"}],"output":{"name":"v"}}],[5,"cov","","Computes the convariance matrix of a set of points.",null,null],[5,"cov_and_center","","Computes the covariance matrix and center of a set of points.",null,null],[5,"center_reduce","","Centers and reduces a set of data.",null,null],[5,"median","","Computes the median of a set of values.",null,null],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"cross3","","A 3d cross product that do not require the `Cross&lt;Self, Self&gt;` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[0,"data","","Data structure utilities.",null,null],[0,"pair","ncollide_utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[3,"Pair","ncollide_utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",0,null],[12,"second","","second object of the pair",0,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"pair"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"pair"}],"output":{"name":"pair"}}],[11,"new","","Builds a new `Pair`.",0,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"eq","","",0,{"inputs":[{"name":"pair"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"pairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new PairTWHash",1,{"inputs":[],"output":{"name":"pairtwhash"}}],[11,"hash","","",1,{"inputs":[{"name":"pairtwhash"},{"name":"pair"}],"output":{"name":"usize"}}],[0,"hash","ncollide_utils::data","Trait for hash functions.",null,null],[3,"UintPairTWHash","ncollide_utils::data::hash","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"HashFun","","Hash function.",null,null],[10,"hash","","Hash function.",2,{"inputs":[{"name":"hashfun"},{"name":"k"}],"output":{"name":"usize"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"uintpairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"new","","Creates a new UintPairTWHash.",3,{"inputs":[],"output":{"name":"uintpairtwhash"}}],[11,"hash","","",3,null],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"uinttwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"new","","Creates a new UintTWHash.",4,{"inputs":[],"output":{"name":"uinttwhash"}}],[11,"hash","","",4,{"inputs":[{"name":"uinttwhash"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide_utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide_utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",5,null],[12,"value","","The value of the entry.",5,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"entry"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"entry"}],"output":{"name":"entry"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"hashmap"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates a new hash map.",6,{"inputs":[{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",6,{"inputs":[{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",6,null],[11,"elements_mut","","The elements added to this hash map.",6,null],[11,"len","","The number of elements contained by this hashmap.",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",6,{"inputs":[{"name":"hashmap"}],"output":null}],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",6,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet. If the functions returns `None`, nothing is\ninserted.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[0,"owned_allocation_cache","ncollide_utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide_utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[11,"new","","Initializes the cache.",7,{"inputs":[],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",7,{"inputs":[{"name":"ownedallocationcache"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",7,{"inputs":[{"name":"ownedallocationcache"},{"name":"box"}],"output":null}],[11,"clear","","Clears the cache, destroying any stored pointer.",7,{"inputs":[{"name":"ownedallocationcache"}],"output":null}],[0,"vec_slice","ncollide_utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide_utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[11,"new","","Creates a new immutable slice.",8,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",8,null],[11,"len","","The length of this slice.",8,{"inputs":[{"name":"vecslice"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",8,{"inputs":[{"name":"vecslice"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",8,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",8,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",9,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",9,null],[11,"len","","The length of this slice.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice.\nBoth slices must have the same length.",9,{"inputs":[{"name":"vecslicemut"},{"name":"vecslice"}],"output":null}],[0,"ref_with_cost","ncollide_utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide_utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",10,null],[12,"cost","","The cost of the object.",10,null],[11,"new","","Creates a new reference packed with a cost value.",10,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"eq","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[0,"uid_remap","ncollide_utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide_utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined\nid of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"fastkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"fmt","","",11,{"inputs":[{"name":"fastkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_invalid","","Creates a new invalid key that won&#39;t be used by the `UidRemap` structure, ever.",11,{"inputs":[],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",11,{"inputs":[{"name":"fastkey"}],"output":{"name":"usize"}}],[11,"clone","","",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"fmt","","",12,{"inputs":[{"name":"uidremap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"uidremap"}}],[11,"new","","Creates an empty `UidRemap`.",12,{"inputs":[{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",12,{"inputs":[{"name":"uidremap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value\npresent in the map, that value and its fast key are returned. Otherwise, `None` is\nreturned.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values.\nThe iterator&#39;s element type is `&amp;&#39;r O`.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"itermut"}}],[11,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"uidremap"}}],[11,"extend","","",12,{"inputs":[{"name":"uidremap"},{"name":"iter"}],"output":null}],[11,"index","","",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"o"}}],[0,"vec_map","ncollide_utils::data","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","ncollide_utils::data::vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",13,null],[13,"Occupied","","An occupied Entry",13,null],[11,"default","","",14,{"inputs":[],"output":{"name":"vecmap"}}],[11,"clone","","",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",14,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":null}],[11,"hash","","",14,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",14,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",14,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",14,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",13,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",13,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",13,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",15,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",16,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",14,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",14,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",20,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"new","ncollide_utils","Creates a new backtracking line search methods.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"usize"}],"output":{"name":"backtrackinglinesearch"}}],[11,"step_size","","",22,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[11,"fmt","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"hashablepartialeq"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really\nwant to transform the wrapped object&#39;s partial equality to an equivalence relation.",23,{"inputs":[{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",23,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"t"}}],[11,"hash","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"h"}],"output":null}],[8,"LineSearch","","Trait for line search methods.",null,null],[10,"step_size","","Gets a near-optimal step size for the next descent.",24,{"inputs":[{"name":"linesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",25,null]],"paths":[[3,"Pair"],[3,"PairTWHash"],[8,"HashFun"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"Entry"],[3,"HashMap"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"RefWithCost"],[3,"FastKey"],[3,"UidRemap"],[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"BacktrackingLineSearch"],[3,"HashablePartialEq"],[8,"LineSearch"],[8,"AsBytes"]]};
searchIndex["ncollide_math"] = {"doc":"Trait implemented by the primitive algebraic types used by ncollide.","items":[[8,"FloatError","ncollide_math","Trait for constant helping handling floating point computations.",null,null],[10,"epsilon","","Epsilon value used to perform fuzzy comparisons with zero.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Scalar","","Trait implemented by scalar types.",null,null],[8,"Point","","Trait implemented by point types.",null,null],[16,"Vect","","",1,null],[8,"Vect","","Trait implemented by vector types.",null,null],[16,"Scalar","","",2,null],[8,"Isometry","","Trait implemented by transformation matrices types.",null,null],[8,"HasInertiaMatrix","","Trait implement by vectors that are transformable by the inertia matrix `I`.",null,null]],"paths":[[8,"FloatError"],[8,"Point"],[8,"Vect"]]};
searchIndex["nalgebra"] = {"doc":"# nalgebra","items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMat","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DMat1","","",null,null],[3,"DMat2","","",null,null],[3,"DMat3","","",null,null],[3,"DMat4","","",null,null],[3,"DMat5","","",null,null],[3,"DMat6","","",null,null],[3,"DVec","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Iso2","","Two dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Iso3","","Three dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Iso4","","Four dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",3,null],[12,"translation","","The translation applicable by this isometry.",3,null],[3,"Mat1","","Square matrix of dimension 1.",null,null],[12,"m11","","",4,null],[3,"Mat2","","Square matrix of dimension 2.",null,null],[12,"m11","","",5,null],[12,"m21","","",5,null],[12,"m12","","",5,null],[12,"m22","","",5,null],[3,"Mat3","","Square matrix of dimension 3.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m31","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[12,"m32","","",6,null],[12,"m13","","",6,null],[12,"m23","","",6,null],[12,"m33","","",6,null],[3,"Mat4","","Square matrix of dimension 4.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m41","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m42","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[12,"m43","","",7,null],[12,"m14","","",7,null],[12,"m24","","",7,null],[12,"m34","","",7,null],[12,"m44","","",7,null],[3,"Mat5","","Square matrix of dimension 5.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m51","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m52","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m53","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[12,"m54","","",8,null],[12,"m15","","",8,null],[12,"m25","","",8,null],[12,"m35","","",8,null],[12,"m45","","",8,null],[12,"m55","","",8,null],[3,"Mat6","","Square matrix of dimension 6.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m61","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m62","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m63","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m64","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[12,"m65","","",9,null],[12,"m16","","",9,null],[12,"m26","","",9,null],[12,"m36","","",9,null],[12,"m46","","",9,null],[12,"m56","","",9,null],[12,"m66","","",9,null],[3,"Rot2","","Two dimensional rotation matrix.",null,null],[3,"Rot3","","Three dimensional rotation matrix.",null,null],[3,"Rot4","","Four dimensional rotation matrix.",null,null],[3,"Vec0","","Vector of dimension 0.",null,null],[12,"0","","",10,null],[3,"Vec1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",11,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[3,"Vec3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[3,"Vec4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[3,"Vec5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[3,"Vec6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",16,null],[12,"y","","Second component of the vector.",16,null],[12,"z","","Third component of the vector.",16,null],[12,"w","","Fourth component of the vector.",16,null],[12,"a","","Fifth of the vector.",16,null],[12,"b","","Sixth component of the vector.",16,null],[3,"Pnt0","","Point of dimension 0.",null,null],[12,"0","","",17,null],[3,"Pnt1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",18,null],[3,"Pnt2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[3,"Pnt3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[3,"Pnt4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[3,"Pnt5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",22,null],[12,"y","","Second component of the point.",22,null],[12,"z","","Third component of the point.",22,null],[12,"w","","Fourth component of the point.",22,null],[12,"a","","Fifth of the point.",22,null],[3,"Pnt6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",23,null],[12,"y","","Second component of the point.",23,null],[12,"z","","Third component of the point.",23,null],[12,"w","","Fourth component of the point.",23,null],[12,"a","","Fifth of the point.",23,null],[12,"b","","Sixth component of the point.",23,null],[3,"Persp3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Ortho3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quat","","A quaternion.",null,null],[12,"w","","The scalar component of the quaternion.",24,null],[12,"i","","The first vector component of the quaternion.",24,null],[12,"j","","The second vector component of the quaternion.",24,null],[12,"k","","The third vector component of the quaternion.",24,null],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"POrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",25,null],[13,"PartialEqual","","Equality relationship.",25,null],[13,"PartialGreater","","Result of a strict comparison.",25,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",25,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg\nReturns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"pordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a &lt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a &lt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a &gt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a &gt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"orig","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dist","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"sqdist","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inv_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rot_mat","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"sqnorm","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"det","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inv","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"cov","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diag","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dim","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"clone","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",26,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",26,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in row-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_col_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in column-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_fn","","Builds a matrix using an initialization function.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"into_vec","","Transforms this matrix into an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",26,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",26,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",26,{"inputs":[{"name":"dmat"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",26,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",26,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"new_identity","","Builds an identity matrix.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",26,null],[11,"unsafe_at","","Just like `at` without bounds checking.",26,null],[11,"swap","","",26,null],[11,"shape","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"mul","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",26,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",26,{"inputs":[{"name":"dmat"}],"output":null}],[11,"mean","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"ncols","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_col","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"dvec"}],"output":null}],[11,"col","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"col_slice","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"nrows","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_row","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"dvec"}],"output":null}],[11,"row","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",26,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",26,{"inputs":[{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",26,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",26,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",26,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",26,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",26,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",26,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",27,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"reset","","",27,{"inputs":[{"name":"dmat1"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",27,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"nrows","","The number of row on the matrix.",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"new_identity","","Builds an identity matrix.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",27,null],[11,"unsafe_at","","Just like `at` without bounds checking.",27,null],[11,"swap","","",27,null],[11,"shape","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"mul","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec1"},{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"inv","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"option"}}],[11,"inv_mut","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"transpose","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"transpose_mut","","",27,{"inputs":[{"name":"dmat1"}],"output":null}],[11,"mean","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"cov","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"ncols","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_col","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"dvec1"}],"output":null}],[11,"col","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"col_slice","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"nrows","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_row","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"dvec1"}],"output":null}],[11,"row","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",27,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",27,{"inputs":[{"name":"dvec1"}],"output":{"name":"dmat1"}}],[11,"diag","","",27,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"approx_epsilon","","",27,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"dmat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"div","","",27,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",27,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"add","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_fn","","Builds a matrix using an initialization function.",27,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat1"}}],[11,"new_uninitialized","","",27,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"eq","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",29,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"reset","","",29,{"inputs":[{"name":"dmat2"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",29,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"nrows","","The number of row on the matrix.",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"new_identity","","Builds an identity matrix.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",29,null],[11,"unsafe_at","","Just like `at` without bounds checking.",29,null],[11,"swap","","",29,null],[11,"shape","","",29,null],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"mul","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec2"},{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"inv","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"option"}}],[11,"inv_mut","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"transpose","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"transpose_mut","","",29,{"inputs":[{"name":"dmat2"}],"output":null}],[11,"mean","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"cov","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"ncols","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_col","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"dvec2"}],"output":null}],[11,"col","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"col_slice","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"nrows","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_row","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"dvec2"}],"output":null}],[11,"row","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",29,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",29,{"inputs":[{"name":"dvec2"}],"output":{"name":"dmat2"}}],[11,"diag","","",29,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"approx_epsilon","","",29,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"dmat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"div","","",29,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",29,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"add","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_fn","","Builds a matrix using an initialization function.",29,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat2"}}],[11,"new_uninitialized","","",29,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"eq","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",31,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"reset","","",31,{"inputs":[{"name":"dmat3"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",31,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"nrows","","The number of row on the matrix.",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"new_identity","","Builds an identity matrix.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",31,null],[11,"unsafe_at","","Just like `at` without bounds checking.",31,null],[11,"swap","","",31,null],[11,"shape","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec3"},{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"inv","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"option"}}],[11,"inv_mut","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"transpose","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"transpose_mut","","",31,{"inputs":[{"name":"dmat3"}],"output":null}],[11,"mean","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"cov","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"ncols","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_col","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"dvec3"}],"output":null}],[11,"col","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"col_slice","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"nrows","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_row","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"dvec3"}],"output":null}],[11,"row","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",31,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",31,{"inputs":[{"name":"dvec3"}],"output":{"name":"dmat3"}}],[11,"diag","","",31,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"approx_epsilon","","",31,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"dmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"div","","",31,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",31,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"add","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_fn","","Builds a matrix using an initialization function.",31,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat3"}}],[11,"new_uninitialized","","",31,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"eq","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",33,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"reset","","",33,{"inputs":[{"name":"dmat4"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",33,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",33,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"nrows","","The number of row on the matrix.",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",33,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",33,null],[11,"new_identity","","Builds an identity matrix.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",33,null],[11,"unsafe_at","","Just like `at` without bounds checking.",33,null],[11,"swap","","",33,null],[11,"shape","","",33,null],[11,"index","","",33,null],[11,"index_mut","","",33,null],[11,"mul","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec4"},{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"inv","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"transpose","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"transpose_mut","","",33,{"inputs":[{"name":"dmat4"}],"output":null}],[11,"mean","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"cov","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"ncols","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_col","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"dvec4"}],"output":null}],[11,"col","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"col_slice","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"nrows","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_row","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"dvec4"}],"output":null}],[11,"row","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",33,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",33,{"inputs":[{"name":"dvec4"}],"output":{"name":"dmat4"}}],[11,"diag","","",33,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"dmat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"div","","",33,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",33,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"add","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",33,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",33,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",33,null],[11,"from_fn","","Builds a matrix using an initialization function.",33,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat4"}}],[11,"new_uninitialized","","",33,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"eq","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",35,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"reset","","",35,{"inputs":[{"name":"dmat5"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",35,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",35,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"nrows","","The number of row on the matrix.",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",35,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",35,null],[11,"new_identity","","Builds an identity matrix.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",35,null],[11,"unsafe_at","","Just like `at` without bounds checking.",35,null],[11,"swap","","",35,null],[11,"shape","","",35,null],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"mul","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec5"},{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"inv","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"transpose","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"transpose_mut","","",35,{"inputs":[{"name":"dmat5"}],"output":null}],[11,"mean","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"cov","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"ncols","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_col","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"dvec5"}],"output":null}],[11,"col","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"col_slice","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"nrows","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_row","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"dvec5"}],"output":null}],[11,"row","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",35,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",35,{"inputs":[{"name":"dvec5"}],"output":{"name":"dmat5"}}],[11,"diag","","",35,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"dmat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"div","","",35,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",35,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"add","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",35,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",35,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",35,null],[11,"from_fn","","Builds a matrix using an initialization function.",35,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat5"}}],[11,"new_uninitialized","","",35,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"eq","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",37,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"reset","","",37,{"inputs":[{"name":"dmat6"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",37,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",37,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"nrows","","The number of row on the matrix.",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",37,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",37,null],[11,"new_identity","","Builds an identity matrix.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",37,null],[11,"unsafe_at","","Just like `at` without bounds checking.",37,null],[11,"swap","","",37,null],[11,"shape","","",37,null],[11,"index","","",37,null],[11,"index_mut","","",37,null],[11,"mul","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",37,{"inputs":[{"name":"dmat6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"mul","","",38,{"inputs":[{"name":"dvec6"},{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"inv","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"transpose","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"transpose_mut","","",37,{"inputs":[{"name":"dmat6"}],"output":null}],[11,"mean","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"cov","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"ncols","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_col","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"dvec6"}],"output":null}],[11,"col","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"col_slice","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"nrows","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_row","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"dvec6"}],"output":null}],[11,"row","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",37,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",37,{"inputs":[{"name":"dvec6"}],"output":{"name":"dmat6"}}],[11,"diag","","",37,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"approx_epsilon","","",37,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"dmat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",37,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"div","","",37,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",37,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"add","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",37,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"sub","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",37,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",37,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",37,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",37,null],[11,"from_fn","","Builds a matrix using an initialization function.",37,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat6"}}],[11,"new_uninitialized","","",37,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"clone","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",0,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the result of a function.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",0,null],[11,"as_mut","","Mutably slices this vector.",0,null],[11,"shape","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"dvec"},{"name":"n"},{"name":"dvec"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"mean","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","The number of elements of this vector.",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",28,null],[11,"as_mut","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",28,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,{"inputs":[{"name":"dvec1"},{"name":"n"},{"name":"dvec1"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"mean","","",28,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",28,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",28,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",28,{"inputs":[{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","The number of elements of this vector.",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",30,null],[11,"as_mut","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",30,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,{"inputs":[{"name":"dvec2"},{"name":"n"},{"name":"dvec2"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"mean","","",30,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",30,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",30,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",30,{"inputs":[{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","The number of elements of this vector.",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"eq","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",32,null],[11,"as_mut","","Mutably slices this vector.",32,null],[11,"shape","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",32,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",32,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",32,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"new_ones","","Builds a vector filled with ones.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",32,{"inputs":[{"name":"dvec3"},{"name":"n"},{"name":"dvec3"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",32,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"mean","","",32,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",32,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",32,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",32,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",32,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",32,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",32,null],[11,"from_fn","","Builds a vector filled with the result of a function.",32,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",32,{"inputs":[{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","The number of elements of this vector.",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"eq","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",34,null],[11,"as_mut","","Mutably slices this vector.",34,null],[11,"shape","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",34,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",34,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",34,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"new_ones","","Builds a vector filled with ones.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",34,{"inputs":[{"name":"dvec4"},{"name":"n"},{"name":"dvec4"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",34,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"mean","","",34,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",34,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",34,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",34,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",34,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",34,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",34,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",34,null],[11,"from_fn","","Builds a vector filled with the result of a function.",34,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",34,{"inputs":[{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","The number of elements of this vector.",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"eq","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",36,null],[11,"as_mut","","Mutably slices this vector.",36,null],[11,"shape","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",36,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",36,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",36,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"new_ones","","Builds a vector filled with ones.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",36,{"inputs":[{"name":"dvec5"},{"name":"n"},{"name":"dvec5"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",36,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"mean","","",36,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",36,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",36,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",36,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",36,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",36,null],[11,"from_fn","","Builds a vector filled with the result of a function.",36,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",36,{"inputs":[{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","The number of elements of this vector.",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",38,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"eq","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",38,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",38,null],[11,"as_mut","","Mutably slices this vector.",38,null],[11,"shape","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",38,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",38,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",38,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",38,null],[11,"index_mut","","",38,null],[11,"new_ones","","Builds a vector filled with ones.",38,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",38,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",38,{"inputs":[{"name":"dvec6"},{"name":"n"},{"name":"dvec6"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",38,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"mean","","",38,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",38,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",38,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",38,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",38,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",38,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",38,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",38,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",38,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",38,null],[11,"from_fn","","Builds a vector filled with the result of a function.",38,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",38,{"inputs":[{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",10,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",10,{"inputs":[],"output":{"name":"vec0"}}],[11,"repeat","","",10,{"inputs":[{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",11,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[],"output":{"name":"vec1"}}],[11,"from","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"shape","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",11,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",11,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",11,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",11,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",11,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",11,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"sqnorm","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",11,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[],"output":{"name":"vec1"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"vec1"}}],[11,"is_zero","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"vec1"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"vec1"}}],[11,"axpy","","",11,{"inputs":[{"name":"vec1"},{"name":"n"},{"name":"vec1"}],"output":null}],[11,"iter","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",11,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",11,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",11,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",11,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",18,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",11,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"vec1"}}],[11,"mean","","",11,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"from","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"shape","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",12,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",12,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",12,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",12,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",12,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",12,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"sqnorm","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",12,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"is_zero","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"vec2"}}],[11,"axpy","","",12,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"vec2"}],"output":null}],[11,"iter","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",12,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",12,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",12,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",12,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",19,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",12,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"vec2"}}],[11,"mean","","",12,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"from","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"shape","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",13,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",13,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",13,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",13,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",13,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",13,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"sqnorm","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",13,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"is_zero","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"min_value","","",13,{"inputs":[],"output":{"name":"vec3"}}],[11,"axpy","","",13,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"vec3"}],"output":null}],[11,"iter","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",13,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",13,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",13,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",13,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",20,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",13,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"vec3"}}],[11,"mean","","",13,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"fmt","","",14,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"from","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"shape","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",14,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",14,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vec4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",14,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",14,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",14,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",14,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"sqnorm","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",14,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"zero","","",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"is_zero","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"min_value","","",14,{"inputs":[],"output":{"name":"vec4"}}],[11,"axpy","","",14,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"vec4"}],"output":null}],[11,"iter","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",14,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",14,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",14,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",14,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",21,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",14,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"vec4"}}],[11,"mean","","",14,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"from","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"shape","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",15,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",15,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vec5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",15,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",15,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",15,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",15,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"sqnorm","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",15,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"zero","","",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"is_zero","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"min_value","","",15,{"inputs":[],"output":{"name":"vec5"}}],[11,"axpy","","",15,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"vec5"}],"output":null}],[11,"iter","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",15,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",15,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",15,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",15,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",22,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",22,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",15,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"vec5"}}],[11,"mean","","",15,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"fmt","","",16,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"from","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"shape","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",16,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",16,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",16,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",16,{"inputs":[{"name":"vec6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",16,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",16,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",16,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",16,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"append_translation","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"prepend_translation","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"sqnorm","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",16,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"zero","","",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"is_zero","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"min_value","","",16,{"inputs":[],"output":{"name":"vec6"}}],[11,"axpy","","",16,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"vec6"}],"output":null}],[11,"iter","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",16,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",16,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",16,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",16,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",23,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",23,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",16,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",16,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"vec6"}}],[11,"mean","","",16,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"fmt","","",17,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",17,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",17,{"inputs":[],"output":{"name":"pnt0"}}],[11,"repeat","","",17,{"inputs":[{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",18,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",18,{"inputs":[],"output":{"name":"pnt1"}}],[11,"is_orig","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",18,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",18,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"shape","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",18,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",18,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",18,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",18,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",18,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",18,{"inputs":[],"output":{"name":"pnt1"}}],[11,"min_value","","",18,{"inputs":[],"output":{"name":"pnt1"}}],[11,"axpy","","",18,{"inputs":[{"name":"pnt1"},{"name":"n"},{"name":"pnt1"}],"output":null}],[11,"iter","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",18,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",19,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",19,{"inputs":[],"output":{"name":"pnt2"}}],[11,"is_orig","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",19,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",19,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"shape","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",19,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",19,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",19,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",19,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",19,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",19,{"inputs":[],"output":{"name":"pnt2"}}],[11,"min_value","","",19,{"inputs":[],"output":{"name":"pnt2"}}],[11,"axpy","","",19,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"pnt2"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",19,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",20,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",20,{"inputs":[],"output":{"name":"pnt3"}}],[11,"is_orig","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",20,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",20,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"shape","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",20,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",20,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",20,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",20,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",20,{"inputs":[],"output":{"name":"pnt3"}}],[11,"min_value","","",20,{"inputs":[],"output":{"name":"pnt3"}}],[11,"axpy","","",20,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"pnt3"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",20,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",21,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",21,{"inputs":[],"output":{"name":"pnt4"}}],[11,"is_orig","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",21,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",21,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"shape","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",21,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",21,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",21,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",21,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",21,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",21,{"inputs":[],"output":{"name":"pnt4"}}],[11,"min_value","","",21,{"inputs":[],"output":{"name":"pnt4"}}],[11,"axpy","","",21,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"pnt4"}],"output":null}],[11,"iter","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",21,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",21,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",22,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",22,{"inputs":[],"output":{"name":"pnt5"}}],[11,"is_orig","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",22,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",22,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",22,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",22,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"shape","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",22,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",22,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",22,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":null}],[11,"sub","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",22,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",22,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",22,{"inputs":[{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",22,{"inputs":[],"output":{"name":"pnt5"}}],[11,"min_value","","",22,{"inputs":[],"output":{"name":"pnt5"}}],[11,"axpy","","",22,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"pnt5"}],"output":null}],[11,"iter","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",22,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",22,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",23,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",23,{"inputs":[],"output":{"name":"pnt6"}}],[11,"is_orig","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",23,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",23,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",23,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",23,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_ref","","",23,null],[11,"as_mut","","",23,null],[11,"index","","",23,null],[11,"index_mut","","",23,null],[11,"shape","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",23,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",23,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",23,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",23,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",23,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",23,{"inputs":[{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",23,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",23,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":null}],[11,"sub","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",23,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",23,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",23,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",23,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",23,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",23,{"inputs":[{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",23,{"inputs":[],"output":{"name":"pnt6"}}],[11,"min_value","","",23,{"inputs":[],"output":{"name":"pnt6"}}],[11,"axpy","","",23,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"pnt6"}],"output":null}],[11,"iter","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",23,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","","",24,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",24,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",24,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",24,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",24,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",24,{"inputs":[{"name":"quat"}],"output":null}],[11,"inv","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"rand","","",24,{"inputs":[{"name":"r"}],"output":{"name":"quat"}}],[11,"fmt","","",39,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",39,{"inputs":[{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",39,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",39,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",39,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",39,{"inputs":[],"output":{"name":"unitquat"}}],[11,"inv","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",39,{"inputs":[{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",39,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",39,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",13,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"to_rot_mat","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",39,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",39,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"unitquat"}}],[11,"transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",24,{"inputs":[],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",24,{"inputs":[],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",24,{"inputs":[],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",24,{"inputs":[],"output":{"name":"quat"}}],[11,"from","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_ref","","",24,null],[11,"as_mut","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"shape","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",24,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",24,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",24,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",24,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",24,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",24,{"inputs":[{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",24,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",24,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",24,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",24,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",24,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",24,{"inputs":[],"output":{"name":"quat"}}],[11,"zero","","",24,{"inputs":[],"output":{"name":"quat"}}],[11,"is_zero","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",24,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",24,{"inputs":[],"output":{"name":"quat"}}],[11,"min_value","","",24,{"inputs":[],"output":{"name":"quat"}}],[11,"axpy","","",24,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"quat"}],"output":null}],[11,"iter","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",24,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",39,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","","",40,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",40,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",4,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",4,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",4,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"mat1"}}],[11,"is_zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"mat1"}}],[11,"iter","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",4,null],[11,"set_fast","","",4,null],[11,"dim","","",4,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",4,null],[11,"swap","","",4,null],[11,"unsafe_at","","",4,null],[11,"unsafe_set","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",11,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",4,{"inputs":[{"name":"mat1"}],"output":null}],[11,"approx_epsilon","","",4,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",4,{"inputs":[{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",4,{"inputs":[{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","","",11,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"mat1"}}],[11,"mean","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"fmt","","",5,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",5,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"repeat","","",5,{"inputs":[{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"mat2"}}],[11,"is_zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"mat2"}}],[11,"iter","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",5,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"transpose","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"mat2"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",5,{"inputs":[{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",5,{"inputs":[{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","","",12,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"mat2"}}],[11,"mean","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"fmt","","",6,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",6,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",6,{"inputs":[{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"mat3"}}],[11,"is_zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"mat3"}}],[11,"iter","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",6,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"mat3"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",6,{"inputs":[{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",6,{"inputs":[{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","","",13,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"mat3"}}],[11,"mean","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"fmt","","",7,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",7,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",7,{"inputs":[{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"mat4"}}],[11,"is_zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"mat4"}}],[11,"iter","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",7,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",14,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"mat4"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",7,{"inputs":[{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",7,{"inputs":[{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","","",14,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"mat4"}}],[11,"mean","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"fmt","","",8,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",8,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",8,{"inputs":[{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"mat5"}}],[11,"is_zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",8,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",15,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","","",22,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"mat5"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",8,{"inputs":[{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",8,{"inputs":[{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","","",15,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"mat5"}}],[11,"mean","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"fmt","","",9,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",9,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",9,{"inputs":[{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"mat6"}}],[11,"is_zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",9,{"inputs":[],"output":{"name":"mat6"}}],[11,"iter","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",9,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",16,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","","",23,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"mat6"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",9,{"inputs":[{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"outer","","",16,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"mat6"}}],[11,"mean","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",41,{"inputs":[{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"angle_to","","",41,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",41,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"rot2"}}],[11,"rand","","",41,{"inputs":[{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",42,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",42,{"inputs":[{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",42,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Create a new matrix and orient it such that its local `x` axis points to a given point.\nNote that the usually known `look_at` function does the same thing but with the `z` axis.\nSee `look_at_z` for that.",42,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"look_at_z","","Create a new matrix and orient it such that its local `z` axis points to a given point.",42,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"rotation","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"angle_to","","",42,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",42,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"rot3"}}],[11,"rand","","",42,{"inputs":[{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"append_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"prepend_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"submat","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",41,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",12,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","","",41,{"inputs":[],"output":{"name":"rot2"}}],[11,"new_identity","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"nrows","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"index","","",41,null],[11,"abs","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",41,{"inputs":[{"name":"rot2"}],"output":null}],[11,"approx_epsilon","","",41,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",41,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",41,{"inputs":[{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",42,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",13,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","","",42,{"inputs":[],"output":{"name":"rot3"}}],[11,"new_identity","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"nrows","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"index","","",42,null],[11,"abs","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",42,{"inputs":[{"name":"rot3"}],"output":null}],[11,"approx_epsilon","","",42,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",42,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",42,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",43,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",14,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","","",43,{"inputs":[],"output":{"name":"rot4"}}],[11,"new_identity","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"nrows","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"index","","",43,null],[11,"abs","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",43,{"inputs":[{"name":"rot4"}],"output":null}],[11,"approx_epsilon","","",43,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",43,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",43,{"inputs":[{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","","",1,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"dim","","",1,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"dim","","",2,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",3,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","","",44,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_fov","","Sets the field of view of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",44,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",44,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",45,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",45,{"inputs":[{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",45,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",45,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",46,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",46,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",46,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",46,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",47,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",47,{"inputs":[{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",47,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",47,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",25,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",25,{"inputs":[{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",25,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",48,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",49,{"inputs":[{"name":"absoluterotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",50,{"inputs":[{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",50,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",50,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",50,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",51,{"inputs":[{"name":"axpy"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",52,{"inputs":[{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",52,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes&#39; constant.",53,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",53,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",53,{"inputs":[],"output":{"name":"self"}}],[10,"e","","Euler&#39;s number.",53,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",53,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",53,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",53,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",53,{"inputs":[],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",54,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",54,{"inputs":[],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",55,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Col","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",56,{"inputs":[{"name":"col"}],"output":{"name":"usize"}}],[10,"col","","Reads the `i`-th column of `self`.",56,{"inputs":[{"name":"col"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_col","","Writes the `i`-th column of `self`.",56,{"inputs":[{"name":"col"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColSlice","","Trait to access part of a column of a matrix",null,null],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",57,{"inputs":[{"name":"colslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",58,{"inputs":[{"name":"rowslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Cov","","Trait for computing the covariance of a set of data.",null,null],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"}],"output":{"name":"m"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",60,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",60,{"inputs":[{"name":"cross"},{"name":"self"}],"output":{"name":"crossproducttype"}}],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",61,{"inputs":[{"name":"crossmatrix"}],"output":{"name":"m"}}],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"det","","Returns the determinant of `m`.",62,{"inputs":[{"name":"det"}],"output":{"name":"n"}}],[8,"Diag","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diag","","Creates a new matrix with the given diagonal.",63,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[10,"diag","","The diagonal of this matrix.",63,{"inputs":[{"name":"diag"}],"output":{"name":"v"}}],[8,"Dim","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dim","","The dimension of the object.",64,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",65,{"inputs":[{"name":"dot"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",66,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",67,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",69,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",70,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",70,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",70,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inv","","Returns the inverse of `m`.",71,{"inputs":[{"name":"inv"}],"output":{"name":"option"}}],[10,"inv_mut","","In-place version of `inverse`.",71,{"inputs":[{"name":"inv"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",72,{"inputs":[{"name":"iterable"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",73,{"inputs":[{"name":"iterablemut"}],"output":{"name":"itermut"}}],[8,"Mat","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the mean of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",74,{"inputs":[{"name":"mean"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"sqnorm","","Computes the squared norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"normalize","","Gets the normalized version of a copy of `v`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[8,"NumPnt","","Trait grouping most common operations on points.",null,null],[8,"NumVec","","Trait grouping most common operations on vectors.",null,null],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"orig","","The trivial origin.",76,{"inputs":[],"output":{"name":"self"}}],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",76,{"inputs":[{"name":"orig"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",77,null],[10,"outer","","Computes the outer product: `a * b`",77,{"inputs":[{"name":"outer"},{"name":"self"}],"output":{"name":"outerproducttype"}}],[8,"POrd","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"pordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_vec","","Converts this point to its associated vector.",79,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",79,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",79,{"inputs":[{"name":"pntasvec"},{"name":"v"}],"output":null}],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",80,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",81,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_rotate","","Applies an inverse rotation to `v`.",81,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",82,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",82,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",83,null],[10,"to_rot_mat","","Gets the rotation matrix represented by `self`.",83,{"inputs":[{"name":"rotationmatrix"}],"output":{"name":"output"}}],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",85,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",85,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",85,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"angletype"}}],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",85,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"deltarotationtype"}}],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",86,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",86,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",86,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",87,{"inputs":[{"name":"shape"}],"output":{"name":"i"}}],[8,"SquareMat","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",88,{"inputs":[{"name":"tohomogeneous"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",89,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_transform","","Applies an inverse transformation to `v`.",89,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",90,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"inv_transformation","","Gets the inverse transformation of `self`.",90,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",91,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_translate","","Apply an inverse translation to an object.",91,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",92,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"inv_translation","","Gets the inverse translation associated with this object.",92,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",93,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",93,{"inputs":[{"name":"transpose"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",94,{"inputs":[{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec0"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt0"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DMat1"],[3,"DVec1"],[3,"DMat2"],[3,"DVec2"],[3,"DMat3"],[3,"DVec3"],[3,"DMat4"],[3,"DVec4"],[3,"DMat5"],[3,"DVec5"],[3,"DMat6"],[3,"DVec6"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",15,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",13,null],[12,"sin_port","","",13,null],[12,"sin_addr","","",13,null],[12,"sin_zero","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",16,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",17,null],[12,"ai_family","","",17,null],[12,"ai_socktype","","",17,null],[12,"ai_protocol","","",17,null],[12,"ai_addrlen","","",17,null],[12,"ai_addr","","",17,null],[12,"ai_canonname","","",17,null],[12,"ai_next","","",17,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",18,null],[12,"sll_protocol","","",18,null],[12,"sll_ifindex","","",18,null],[12,"sll_hatype","","",18,null],[12,"sll_pkttype","","",18,null],[12,"sll_halen","","",18,null],[12,"sll_addr","","",18,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",19,null],[12,"tm_min","","",19,null],[12,"tm_hour","","",19,null],[12,"tm_mday","","",19,null],[12,"tm_mon","","",19,null],[12,"tm_year","","",19,null],[12,"tm_wday","","",19,null],[12,"tm_yday","","",19,null],[12,"tm_isdst","","",19,null],[12,"tm_gmtoff","","",19,null],[12,"tm_zone","","",19,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",20,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",21,null],[12,"dli_fbase","","",21,null],[12,"dli_sname","","",21,null],[12,"dli_saddr","","",21,null],[3,"epoll_event","","",null,null],[12,"events","","",22,null],[12,"u64","","",22,null],[3,"utsname","","",null,null],[12,"sysname","","",23,null],[12,"nodename","","",23,null],[12,"release","","",23,null],[12,"version","","",23,null],[12,"machine","","",23,null],[12,"domainname","","",23,null],[3,"dirent","","",null,null],[12,"d_ino","","",24,null],[12,"d_off","","",24,null],[12,"d_reclen","","",24,null],[12,"d_type","","",24,null],[12,"d_name","","",24,null],[3,"dirent64","","",null,null],[12,"d_ino","","",25,null],[12,"d_off","","",25,null],[12,"d_reclen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",26,null],[12,"rlim_max","","",26,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",27,null],[12,"gl_pathv","","",27,null],[12,"gl_offs","","",27,null],[12,"gl_flags","","",27,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",28,null],[12,"ifa_name","","",28,null],[12,"ifa_flags","","",28,null],[12,"ifa_addr","","",28,null],[12,"ifa_netmask","","",28,null],[12,"ifa_ifu","","",28,null],[12,"ifa_data","","",28,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",29,null],[12,"pw_passwd","","",29,null],[12,"pw_uid","","",29,null],[12,"pw_gid","","",29,null],[12,"pw_gecos","","",29,null],[12,"pw_dir","","",29,null],[12,"pw_shell","","",29,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",30,null],[12,"f_frsize","","",30,null],[12,"f_blocks","","",30,null],[12,"f_bfree","","",30,null],[12,"f_bavail","","",30,null],[12,"f_files","","",30,null],[12,"f_ffree","","",30,null],[12,"f_favail","","",30,null],[12,"f_fsid","","",30,null],[12,"f_flag","","",30,null],[12,"f_namemax","","",30,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",31,null],[12,"nl_pid","","",31,null],[12,"nl_groups","","",31,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",32,null],[12,"dqb_bsoftlimit","","",32,null],[12,"dqb_curspace","","",32,null],[12,"dqb_ihardlimit","","",32,null],[12,"dqb_isoftlimit","","",32,null],[12,"dqb_curinodes","","",32,null],[12,"dqb_btime","","",32,null],[12,"dqb_itime","","",32,null],[12,"dqb_valid","","",32,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",33,null],[12,"ssi_errno","","",33,null],[12,"ssi_code","","",33,null],[12,"ssi_pid","","",33,null],[12,"ssi_uid","","",33,null],[12,"ssi_fd","","",33,null],[12,"ssi_tid","","",33,null],[12,"ssi_band","","",33,null],[12,"ssi_overrun","","",33,null],[12,"ssi_trapno","","",33,null],[12,"ssi_status","","",33,null],[12,"ssi_int","","",33,null],[12,"ssi_ptr","","",33,null],[12,"ssi_utime","","",33,null],[12,"ssi_stime","","",33,null],[12,"ssi_addr","","",33,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",34,null],[12,"mq_maxmsg","","",34,null],[12,"mq_msgsize","","",34,null],[12,"mq_curmsgs","","",34,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_flags","","",36,null],[12,"ss_size","","",36,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",37,null],[12,"si_errno","","",37,null],[12,"si_code","","",37,null],[12,"_pad","","",37,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ucred","","",null,null],[12,"pid","","",39,null],[12,"uid","","",39,null],[12,"gid","","",39,null],[3,"statfs","","",null,null],[12,"f_type","","",40,null],[12,"f_bsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_fsid","","",40,null],[12,"f_namelen","","",40,null],[12,"f_frsize","","",40,null],[3,"msghdr","","",null,null],[12,"msg_name","","",41,null],[12,"msg_namelen","","",41,null],[12,"msg_iov","","",41,null],[12,"msg_iovlen","","",41,null],[12,"msg_control","","",41,null],[12,"msg_controllen","","",41,null],[12,"msg_flags","","",41,null],[3,"termios","","",null,null],[12,"c_iflag","","",42,null],[12,"c_oflag","","",42,null],[12,"c_cflag","","",42,null],[12,"c_lflag","","",42,null],[12,"c_line","","",42,null],[12,"c_cc","","",42,null],[12,"c_ispeed","","",42,null],[12,"c_ospeed","","",42,null],[3,"flock","","",null,null],[12,"l_type","","",43,null],[12,"l_whence","","",43,null],[12,"l_start","","",43,null],[12,"l_len","","",43,null],[12,"l_pid","","",43,null],[3,"ipc_perm","","",null,null],[12,"__key","","",44,null],[12,"uid","","",44,null],[12,"gid","","",44,null],[12,"cuid","","",44,null],[12,"cgid","","",44,null],[12,"mode","","",44,null],[12,"__seq","","",44,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",45,null],[12,"shm_segsz","","",45,null],[12,"shm_atime","","",45,null],[12,"shm_dtime","","",45,null],[12,"shm_ctime","","",45,null],[12,"shm_cpid","","",45,null],[12,"shm_lpid","","",45,null],[12,"shm_nattch","","",45,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",46,null],[12,"st_ino","","",46,null],[12,"st_nlink","","",46,null],[12,"st_mode","","",46,null],[12,"st_uid","","",46,null],[12,"st_gid","","",46,null],[12,"st_rdev","","",46,null],[12,"st_size","","",46,null],[12,"st_blksize","","",46,null],[12,"st_blocks","","",46,null],[12,"st_atime","","",46,null],[12,"st_atime_nsec","","",46,null],[12,"st_mtime","","",46,null],[12,"st_mtime_nsec","","",46,null],[12,"st_ctime","","",46,null],[12,"st_ctime_nsec","","",46,null],[3,"stat64","","",null,null],[12,"st_dev","","",47,null],[12,"st_ino","","",47,null],[12,"st_nlink","","",47,null],[12,"st_mode","","",47,null],[12,"st_uid","","",47,null],[12,"st_gid","","",47,null],[12,"st_rdev","","",47,null],[12,"st_size","","",47,null],[12,"st_blksize","","",47,null],[12,"st_blocks","","",47,null],[12,"st_atime","","",47,null],[12,"st_atime_nsec","","",47,null],[12,"st_mtime","","",47,null],[12,"st_mtime_nsec","","",47,null],[12,"st_ctime","","",47,null],[12,"st_ctime_nsec","","",47,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",48,null],[12,"uc_link","","",48,null],[12,"uc_stack","","",48,null],[12,"uc_mcontext","","",48,null],[12,"uc_sigmask","","",48,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",49,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",49,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",49,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",49,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",49,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",49,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",49,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",49,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",49,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",49,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",50,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",50,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"shl","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",50,null],[11,"shr","","",50,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"add","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",50,null],[11,"sub","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",50,null],[11,"div","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",50,null],[11,"rem","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",50,null],[11,"not","","",50,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",50,null],[11,"bitor","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",50,null],[11,"bitand","","",50,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",50,null],[11,"fmt","","",51,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",52,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",52,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",53,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",54,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",54,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",55,null],[11,"get","","Dereferences the content.",55,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",55,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",56,null],[11,"clone","","",56,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",57,null],[11,"eq","","",57,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",57,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",58,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",58,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",59,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",60,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",62,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",62,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",63,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",64,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",65,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",66,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",67,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",71,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",67,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",67,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",67,null],[11,"swap","","Stores a value into the bool, returning the old value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",67,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",67,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",68,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",68,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",68,null],[11,"swap","","Stores a value into the isize, returning the old value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",68,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",68,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",69,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",69,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",69,null],[11,"swap","","Stores a value into the usize, returning the old value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",69,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",69,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",70,null],[11,"load","","Loads a value from the pointer.",70,null],[11,"store","","Stores a value into the pointer.",70,null],[11,"swap","","Stores a value into the pointer, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",70,null],[11,"fmt","","",69,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",72,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",72,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",72,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",72,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",72,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",72,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",74,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",74,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",74,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",74,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",74,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",76,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",76,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",78,null],[11,"deref","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",77,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",79,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",79,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",79,null],[11,"clone","core::char","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",81,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",80,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"clone","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",83,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",84,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",86,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"clone","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",88,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"nth","","",93,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",93,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",94,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",95,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",96,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",97,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",98,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",98,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",99,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",60,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",59,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",62,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",103,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","core::ops","",59,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","core::iter","",104,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",104,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",105,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",106,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",106,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",106,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",49,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",107,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",107,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",49,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",111,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",112,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",113,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",113,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",113,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",113,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",113,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",113,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",113,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",113,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",113,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",113,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",113,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",113,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",113,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",113,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",113,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",113,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",113,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",113,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",113,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",114,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",115,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",113,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",117,null],[11,"next","","",117,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"count","","",117,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",117,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",117,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",118,null],[11,"next","","",118,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"count","","",118,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",118,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",118,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",119,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",119,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",120,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","","",122,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","","",124,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","","",125,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"clone","","",126,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",126,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"count","","",126,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",126,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",126,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",127,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"count","","",127,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",127,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",127,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"count","","",128,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",128,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",128,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",129,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",130,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",131,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",130,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",130,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",130,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",132,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",133,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",134,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",135,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",136,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",137,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",135,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",138,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",139,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",139,null],[11,"matching","","",139,null],[11,"use_early_reject","","",140,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",140,null],[11,"matching","","",140,null],[11,"eq","core::str","",141,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",141,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",142,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",142,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",142,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",143,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",143,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",144,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",144,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",144,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"count","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",145,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",145,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",146,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",147,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",147,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",148,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",147,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",149,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",150,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",149,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",152,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",153,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",154,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",155,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",156,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",155,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",158,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",159,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",158,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",160,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next_back","","",160,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",162,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",162,null],[11,"call_mut","","",162,null],[11,"call_once","","",162,null],[11,"next","","",161,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next_back","","",161,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",164,null],[11,"finish","","",164,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",164,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",165,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",165,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",166,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",167,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",168,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",169,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",170,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",171,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",172,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",173,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",174,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",174,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",175,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",175,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",175,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",176,null],[11,"entry","","Adds a new entry to the set output.",177,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",177,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",178,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",178,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",179,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",179,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",180,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",181,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",182,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",183,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",183,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",184,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",184,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",184,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",184,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",184,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",184,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",184,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",184,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",184,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",184,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",184,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",184,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",184,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",184,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",184,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",57,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",72,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",185,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",185,null],[11,"clone","libc","",46,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",47,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",186,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",187,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",48,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",188,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",35,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",39,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",40,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",41,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",42,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",43,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",44,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",45,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",24,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",26,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",189,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",190,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",191,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",192,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",29,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",30,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",31,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",32,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",33,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",193,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",34,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",194,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",195,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",19,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",20,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",21,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",22,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex['nphysics'] = {"items":[[0,"","nphysics","nphysics\n========\n**nphysics** is a 2 and 3-dimensional physics engine for games and animations. It uses\n[ncollide](http://ncollide.org) for collision detection, and\n[nalgebra](http://nalgebra.org) for vector/matrix math.",null,null],[0,"aliases","","Aliases for complicated parameterized types.",null,null],[6,"DefaultBroadPhase","nphysics::aliases","The type of the broad phase used by the world by default.",null,null],[0,"integration","nphysics","Position and orientation update of rigid bodies.",null,null],[3,"BodyExpEulerIntegrator","nphysics::integration","An explicit Euler integrator.",null,null],[3,"BodySmpEulerIntegrator","","A semi-implicit Euler integrator.",null,null],[3,"BodyForceGenerator","","A constant linear and angular force generator.",null,null],[3,"BodyDamping","","A linear and angular velocity damper.",null,null],[3,"TranslationalCCDMotionClamping","","Handles Continuous Collision Detection.",null,null],[0,"integrator","","Trait implemented by every integrators.",null,null],[8,"Integrator","nphysics::integration::integrator","Trait implemented by every integrator.",null,null],[10,"update","","Updates the position and orientation of the object `o` after a time step of `dt`.",0,{"inputs":[{"name":"integrator"},{"name":"scalar"},{"name":"o"}],"output":null}],[11,"new","nphysics::integration","Creates a new `BodyExpEulerIntegrator`.",1,{"inputs":[{"name":"bodyexpeulerintegrator"}],"output":{"name":"bodyexpeulerintegrator"}}],[11,"update","","",1,{"inputs":[{"name":"bodyexpeulerintegrator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodySmpEulerIntegrator`.",2,{"inputs":[{"name":"bodysmpeulerintegrator"}],"output":{"name":"bodysmpeulerintegrator"}}],[11,"update","","",2,{"inputs":[{"name":"bodysmpeulerintegrator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyForceGenerator`.",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"vect"},{"name":"orientation"}],"output":{"name":"bodyforcegenerator"}}],[11,"lin_acc","","The linear acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"}],"output":{"name":"vect"}}],[11,"set_lin_acc","","Sets the linear acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"vect"}],"output":null}],[11,"ang_acc","","The angular acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"}],"output":{"name":"orientation"}}],[11,"set_ang_acc","","Sets the angular acceleration applied by this force generator.",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"orientation"}],"output":null}],[11,"update","","",3,{"inputs":[{"name":"bodyforcegenerator"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyDamping`.",4,{"inputs":[{"name":"bodydamping"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"bodydamping"}}],[11,"update","","",4,{"inputs":[{"name":"bodydamping"},{"name":"scalar"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `TranslationalCCDMotionClamping` to enable continuous collision detection to\nfast-moving rigid bodies.",5,{"inputs":[{"name":"translationalccdmotionclamping"}],"output":{"name":"translationalccdmotionclamping"}}],[11,"add_ccd_to","","Enables continuous collision for the given rigid body.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodyhandle"},{"name":"scalar"}],"output":null}],[11,"remove_ccd_from","","Remove continuous collision from the given rigid body.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodyhandle"}],"output":null}],[11,"update","","Update the time of impacts and apply motion clamping when necessary.",5,{"inputs":[{"name":"translationalccdmotionclamping"},{"name":"rigidbodycollisionworld"}],"output":null}],[0,"euler","","Euler integration functions.",null,null],[5,"explicit_integrate","nphysics::integration::euler","Explicit Euler integrator.",null,null],[5,"explicit_integrate_wo_rotation","","Explicit Euler integrator. This will not update the rotational components.",null,null],[5,"semi_implicit_integrate","","Semi-implicit Euler integrator.",null,null],[5,"semi_implicit_integrate_wo_rotation","","Semi-implicit Euler integrator. This will not update the rotational components.",null,null],[5,"displacement","","Computes the transformation matrix required to move an object with a `lin_vel` linear velocity,\na `ang_vil` angular velocity, and a center of mass `center_of_mass`, during the time step `dt`.",null,{"inputs":[{"name":"scalar"},{"name":"matrix"},{"name":"point"},{"name":"vect"},{"name":"orientation"}],"output":{"name":"matrix"}}],[0,"detection","nphysics","Collision detection and joints.",null,null],[3,"ActivationManager","nphysics::detection","Structure that monitors island-based activation/deactivation of objects.",null,null],[0,"constraint","","Data structure to describe a constraint between two rigid bodies.",null,null],[4,"Constraint","nphysics::detection::constraint","A constraint between two rigid bodies.",null,null],[13,"RBRB","","A contact.",6,null],[13,"BallInSocket","","A ball-in-socket joint.",6,null],[13,"Fixed","","A fixed joint.",6,null],[11,"clone","","",6,{"inputs":[{"name":"constraint"}],"output":{"name":"constraint"}}],[0,"detector","nphysics::detection","Collision detector.",null,null],[8,"Detector","nphysics::detection::detector","Trait implemented by collision detectors.",null,null],[10,"update","","Updates the collision detector, given an (already updated) broad-phase, and an activation\nmanager.",7,{"inputs":[{"name":"detector"},{"name":"bf"},{"name":"activationmanager"}],"output":null}],[10,"interferences","","Collects every interferences detected by this collision detector.",7,{"inputs":[{"name":"detector"},{"name":"vec"},{"name":"bf"}],"output":null}],[0,"joint","nphysics::detection","Joint handling.",null,null],[3,"Anchor","nphysics::detection::joint","One of the two end points of a joint.",null,null],[12,"body","","The body attached to this anchor.",8,null],[12,"position","","The attach position, in local coordinates of the attached body.",8,null],[3,"BallInSocket","","A ball-in-socket joint.",null,null],[3,"Fixed","","A joint that prevents any relative movement (linear and angular) between two objects.",null,null],[3,"JointManager","","Structure that handles creation and removal of joints.",null,null],[11,"new","","Creates a new `JointManager`.",9,{"inputs":[{"name":"jointmanager"}],"output":{"name":"jointmanager"}}],[11,"joints","","Joints handled by this manager.",9,{"inputs":[{"name":"jointmanager"}],"output":{"name":"hashmap"}}],[11,"joints_with_body","","List of joints attached to a specific body.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"}],"output":{"name":"option"}}],[11,"add_ball_in_socket","","Add a `BallInSocket` joint to this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_ball_in_socket","","Removes a `BallInSocket` joint from this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"add_fixed","","Add a `Fixed` joint to this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_joint","","Removes a joint from this manager.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove","","Removes every joint attached to a given rigid body.",9,{"inputs":[{"name":"jointmanager"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"update","","Activates the objects that interact with an activated object through a joint.",9,{"inputs":[{"name":"jointmanager"},{"name":"activationmanager"}],"output":null}],[11,"interferences","","Collects all the constraints caused by joints.",9,{"inputs":[{"name":"jointmanager"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new `Anchor` at a given `position` on a `body` local space.",8,{"inputs":[{"name":"anchor"},{"name":"option"},{"name":"p"}],"output":{"name":"anchor"}}],[11,"center_of_mass","","The center of mass of the body attached to this anchor.",8,{"inputs":[{"name":"anchor"}],"output":{"name":"point"}}],[11,"new","","Creates a ball-in-socket joint.",10,{"inputs":[{"name":"ballinsocket"},{"name":"anchor"},{"name":"anchor"}],"output":{"name":"ballinsocket"}}],[11,"up_to_date","","Tells if this joint has been modified by the user.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",10,{"inputs":[{"name":"ballinsocket"},{"name":"point"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",10,{"inputs":[{"name":"ballinsocket"},{"name":"point"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"point"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",10,{"inputs":[{"name":"ballinsocket"}],"output":{"name":"point"}}],[11,"new","","Creates a new `Fixed` joint.",11,{"inputs":[{"name":"fixed"},{"name":"anchor"},{"name":"anchor"}],"output":{"name":"fixed"}}],[11,"up_to_date","","Tells if the joint has been modified by the user.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",11,{"inputs":[{"name":"fixed"},{"name":"matrix"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",11,{"inputs":[{"name":"fixed"},{"name":"matrix"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"matrix"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",11,{"inputs":[{"name":"fixed"}],"output":{"name":"matrix"}}],[0,"joint","","",null,null],[8,"Joint","nphysics::detection::joint::joint","Trait implemented by every joint.",null,null],[10,"anchor1","","The first anchor affected by this joint.",12,{"inputs":[{"name":"joint"}],"output":{"name":"anchor"}}],[10,"anchor2","","The second anchor affected by this joint.",12,{"inputs":[{"name":"joint"}],"output":{"name":"anchor"}}],[10,"anchor1_pos","","The first attach point in global coordinates.",12,{"inputs":[{"name":"joint"}],"output":{"name":"a"}}],[10,"anchor2_pos","","The second attach point in global coordinates.",12,{"inputs":[{"name":"joint"}],"output":{"name":"a"}}],[11,"new","nphysics::detection","Creates a new `ActivationManager`.",13,{"inputs":[{"name":"activationmanager"},{"name":"scalar"}],"output":{"name":"activationmanager"}}],[11,"will_activate","","Notify the `ActivationManager` that is has to activate an object at the next update.",13,{"inputs":[{"name":"activationmanager"},{"name":"rc"}],"output":null}],[11,"update","","Update the activation manager, activating and deactivating objects when needed.",13,{"inputs":[{"name":"activationmanager"},{"name":"rigidbodycollisionworld"},{"name":"jointmanager"},{"name":"hashmap"}],"output":null}],[0,"resolution","nphysics","Constraint resolution.",null,null],[3,"AccumulatedImpulseSolver","nphysics::resolution","Constraint solver using the projected gauss seidel algorithm and warm-starting.",null,null],[3,"Velocities","","Structure holding the result of the projected gauss seidel solver.",null,null],[12,"lv","","Linear velocity.",14,null],[12,"av","","Angular velocity.",14,null],[3,"ImpulseCache","","",null,null],[3,"ContactIdentifier","","The identifier of a contact stored in the impulse cache.",null,null],[3,"VelocityConstraint","","A constraint of velocity at a point of contact.",null,null],[12,"normal","","The contact normal.",15,null],[12,"weighted_normal1","","The contact normal multiplied by the first body's inverse mass.",15,null],[12,"weighted_normal2","","The contact normal multiplied by the second body's inverse mass.",15,null],[12,"rot_axis1","","The first body rotation axis.",15,null],[12,"weighted_rot_axis1","","The first body rotation axis multiplied by its inverse inertia.",15,null],[12,"rot_axis2","","The second body rotation axis.",15,null],[12,"weighted_rot_axis2","","The second body rotation axis multiplied by its inverse inertia.",15,null],[12,"inv_projected_mass","","The inverse of the sum of linear and angular inertia of both bodies.",15,null],[12,"impulse","","The total impulse applied.",15,null],[12,"lobound","","The lower bound of the impulse.",15,null],[12,"hibound","","The upper bound of the impulse.",15,null],[12,"objective","","The target delta velocity.",15,null],[12,"id1","","The id of the first body.",15,null],[12,"id2","","The id of the second body.",15,null],[12,"friction_limit_id","","The id of the friction constraint.",15,null],[12,"friction_coeff","","The friction coefficient on this contact.",15,null],[4,"CorrectionMode","","The correction coefficient used by the constraint solver.",null,null],[13,"Velocity","","Penetration are solved by the penalty method.",16,null],[13,"VelocityAndPosition","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[13,"VelocityAndPositionThresold","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[5,"projected_gauss_seidel_solve","","Solve a set of velocity constraints using the projected gauss seidel solver.",null,null],[0,"solver","","",null,null],[8,"Solver","nphysics::resolution::solver","Trait implemented by constraint solvers.",null,null],[10,"solve","","Solve the set of constraints of type `I`.",17,null],[11,"new","nphysics::resolution","Creates a new `AccumulatedImpulseSolver`.",18,{"inputs":[{"name":"accumulatedimpulsesolver"},{"name":"scalar"},{"name":"correctionmode"},{"name":"scalar"},{"name":"scalar"},{"name":"usize"},{"name":"usize"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"num_first_order_iter","","Gets the number of iteration done by the penetration depth correction solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"}],"output":{"name":"usize"}}],[11,"set_num_first_order_iter","","Sets the number of iteration done by the penetration depth correction solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"},{"name":"usize"}],"output":null}],[11,"num_second_order_iter","","Gets the number of iteration done by the velocity constraint solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"}],"output":{"name":"usize"}}],[11,"set_num_second_order_iter","","Sets the number of iteration done by the velocity constraint solver.",18,{"inputs":[{"name":"accumulatedimpulsesolver"},{"name":"usize"}],"output":null}],[11,"solve","","",18,null],[11,"clone","","",14,{"inputs":[{"name":"velocities"}],"output":{"name":"velocities"}}],[11,"fmt","","",14,{"inputs":[{"name":"velocities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"velocities"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"velocities"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Velocities`.",14,{"inputs":[{"name":"velocities"}],"output":{"name":"velocities"}}],[11,"reset","","Reset this structure to zero.",14,{"inputs":[{"name":"velocities"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"velocityconstraint"}],"output":{"name":"velocityconstraint"}}],[11,"fmt","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"velocityconstraint"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"new","","Creates a new velocity constraint with all terms initialized to zero.",15,{"inputs":[{"name":"velocityconstraint"}],"output":{"name":"velocityconstraint"}}],[11,"vel_corr_factor","","The velocity correction coefficient.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"pos_corr_factor","","The position correction coefficient.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"min_depth_for_pos_corr","","The minimum penetration depth required to switch on the hard repositioning based method.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[11,"max_depth_for_vel_corr","","The max penetration depth the velocity correction will attempt to correct.",16,{"inputs":[{"name":"correctionmode"}],"output":{"name":"scalar"}}],[0,"world","nphysics","The physics world.",null,null],[3,"World","nphysics::world","The physics world.",null,null],[11,"new","","Creates a new physics world.",19,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"step","","Updates the physics world.",19,{"inputs":[{"name":"world"},{"name":"scalar"}],"output":null}],[11,"add_body","","Adds a rigid body to the physics world.",19,{"inputs":[{"name":"world"},{"name":"rigidbody"}],"output":{"name":"rigidbodyhandle"}}],[11,"remove_body","","Remove a rigid body from the physics world.",19,{"inputs":[{"name":"world"},{"name":"rigidbodyhandle"}],"output":null}],[11,"forces_generator","","Gets a mutable reference to the force generator.",19,{"inputs":[{"name":"world"}],"output":{"name":"bodyforcegenerator"}}],[11,"integrator","","Gets a mutable reference to the position and orientation integrator.",19,{"inputs":[{"name":"world"}],"output":{"name":"bodysmpeulerintegrator"}}],[11,"collision_world","","Gets a mutable reference to the collision detector.",19,{"inputs":[{"name":"world"}],"output":{"name":"rigidbodycollisionworld"}}],[11,"ccd_manager","","Gets a mutable reference to the CCD manager.",19,{"inputs":[{"name":"world"}],"output":{"name":"translationalccdmotionclamping"}}],[11,"joint_manager","","Gets a mutable reference to the joint manager.",19,{"inputs":[{"name":"world"}],"output":{"name":"jointmanager"}}],[11,"constraints_solver","","Gets a mutable reference to the constraint solver.",19,{"inputs":[{"name":"world"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"set_gravity","","Sets the linear acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"},{"name":"vect"}],"output":null}],[11,"set_angular_acceleration","","Sets the angular acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"},{"name":"orientation"}],"output":null}],[11,"gravity","","Gets the linear acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"}],"output":{"name":"vect"}}],[11,"angular_acceleration","","Gets the angular acceleration afecting every dynamic rigid body.",19,{"inputs":[{"name":"world"}],"output":{"name":"orientation"}}],[11,"interferences_with_ray","","Gets every body intersected by a given ray.",19,{"inputs":[{"name":"world"},{"name":"ray"},{"name":"f"}],"output":null}],[11,"interferences_with_point","","Gets every body that contain a specific point.",19,{"inputs":[{"name":"world"},{"name":"point"},{"name":"f"}],"output":null}],[11,"interferences_with_aabb","","Gets every body that intersects a specific AABB.",19,{"inputs":[{"name":"world"},{"name":"aabb"},{"name":"f"}],"output":null}],[11,"add_ccd_to","","Adds continuous collision detection to the given rigid body.",19,{"inputs":[{"name":"world"},{"name":"rigidbodyhandle"},{"name":"scalar"}],"output":null}],[11,"add_ball_in_socket","","Adds a ball-in-socket joint to the world.",19,{"inputs":[{"name":"world"},{"name":"ballinsocket"}],"output":{"name":"rc"}}],[11,"remove_ball_in_socket","","Removes a ball-in-socket joint from the world.",19,{"inputs":[{"name":"world"},{"name":"rc"}],"output":null}],[11,"add_fixed","","Adds a fixed joint to the world.",19,{"inputs":[{"name":"world"},{"name":"fixed"}],"output":{"name":"rc"}}],[11,"remove_fixed","","Removes a fixed joint from the world.",19,{"inputs":[{"name":"world"},{"name":"rc"}],"output":null}],[11,"interferences","","Collects every interferences detected since the last update.",19,{"inputs":[{"name":"world"},{"name":"vec"}],"output":null}],[11,"bodies","","An iterator visiting all rigid bodies on this world.",19,{"inputs":[{"name":"world"}],"output":{"name":"rigidbodies"}}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",19,{"inputs":[{"name":"world"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",19,{"inputs":[{"name":"world"},{"name":"str"}],"output":null}],[6,"WorldBroadPhase","","The default broad phase.",null,null],[6,"RigidBodyCollisionWorld","","Type of the collision world containing rigid bodies.",null,null],[0,"object","nphysics","Rigid bodies.",null,null],[3,"RigidBody","nphysics::object","The rigid body structure.",null,null],[4,"ActivationState","","The activation state of a rigid body.",null,null],[13,"Active","","The rigid body is active with a not-zero energy.",20,null],[13,"Inactive","","The rigid body is inactive.",20,null],[13,"Deleted","","The rigid body has been removed from the physics engine.",20,null],[4,"RigidBodyState","","The movement state of a rigid body.",null,null],[13,"Static","","The rigid body cannot move.",21,null],[13,"Dynamic","","The rigid body can move.",21,null],[11,"decode","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"rigidbodystate"}],"output":{"name":"rigidbodystate"}}],[11,"eq","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"rigidbodystate"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"rigidbodystate"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"rigidbodystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"activationstate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"activationstate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"activationstate"}],"output":{"name":"activationstate"}}],[11,"eq","","",20,{"inputs":[{"name":"activationstate"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"activationstate"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"activationstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"energy","","The energy accumulated other several frames.",20,{"inputs":[{"name":"activationstate"}],"output":{"name":"scalar"}}],[11,"clone","","",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"rigidbody"}}],[11,"position","","Gets a reference to this body's transform.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"matrix"}}],[11,"shape_ref","","Gets a reference to this body's shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"repr"}}],[11,"shape","","Gets a copy of this body's shared shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"arc"}}],[11,"margin","","The margin surrounding this object's shape.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"center_of_mass","","Gets a reference to this body's center of mass.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"point"}}],[11,"restitution","","Gets this body's restitution coefficent.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"friction","","Gets this body's friction coefficient.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"is_active","","Indicates whether or not this rigid body is active.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"bool"}}],[11,"deactivation_threshold","","The velocity threshold bellow whith the rigid body might be deactivated.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"option"}}],[11,"set_deactivation_threshold","","Set the velocity threshold bellow whith the rigid body might be deactivated.",22,{"inputs":[{"name":"rigidbody"},{"name":"option"}],"output":null}],[11,"new_dynamic","","Creates a new rigid body that can move.",22,{"inputs":[{"name":"rigidbody"},{"name":"g"},{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"new_static","","Creates a new rigid body that cannot move.",22,{"inputs":[{"name":"rigidbody"},{"name":"g"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"new","","Creates a new rigid body with a given shape.",22,{"inputs":[{"name":"rigidbody"},{"name":"arc"},{"name":"option"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rigidbody"}}],[11,"collision_groups","","The collision groups this rigid body is part of.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"collisiongroups"}}],[11,"can_move","","Indicates whether this rigid body is static or dynamic.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"bool"}}],[11,"lin_acc_scale","","Gets the linear acceleraction scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_acc_scale","","Sets the linear acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"ang_acc_scale","","Gets the angular acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_acc_scale","","Sets the angular acceleration scale of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"lin_vel","","Get the linear velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_vel","","Sets the linear velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"lin_acc","","Gets the linear acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"vect"}}],[11,"set_lin_acc","","Sets the linear acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"ang_vel","","Gets the angular velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_vel","","Sets the angular velocity of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"ang_acc","","Gets the angular acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"orientation"}}],[11,"set_ang_acc","","Sets the angular acceleration of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"inv_mass","","Gets the inverse mass of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"scalar"}}],[11,"set_inv_mass","","Sets the inverse mass of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"scalar"}],"output":null}],[11,"inv_inertia","","Gets the inverse inertia tensor of this rigid body.",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"angularinertia"}}],[11,"set_inv_inertia","","Sets the inverse inertia tensor of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"angularinertia"}],"output":null}],[11,"append_transformation","","Appends a transformation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"prepend_transformation","","Prepends a transformation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"set_transformation","","Sets the transformation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"matrix"}],"output":null}],[11,"append_translation","","Appends a translation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"prepend_translation","","Prepends a translation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"set_translation","","Stes the translation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"vect"}],"output":null}],[11,"append_rotation","","Appends a rotation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"prepend_rotation","","Prepends a rotation to this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"set_rotation","","Sets the rotation of this rigid body.",22,{"inputs":[{"name":"rigidbody"},{"name":"orientation"}],"output":null}],[11,"bounding_volume","","",22,{"inputs":[{"name":"rigidbody"}],"output":{"name":"aabb"}}],[6,"RigidBodyHandle","","A shared, mutable, rigid body.",null,null],[0,"utils","nphysics","Miscellaneous utilities.",null,null],[0,"union_find","nphysics::utils","The union find algorithm.",null,null],[3,"UnionFindSet","nphysics::utils::union_find","An element used by the union-find algorithm.",null,null],[5,"find","","Performs the `find` part of the union-find algorithm.",null,null],[5,"union","","Performs the `union` part of the union-find algorithm.",null,null],[11,"clone","","",23,{"inputs":[{"name":"unionfindset"}],"output":{"name":"unionfindset"}}],[11,"new","","Creates a new `UnionFindSet`.",23,{"inputs":[{"name":"unionfindset"},{"name":"usize"}],"output":{"name":"unionfindset"}}],[11,"reinit","","Reinitialize this set.",23,{"inputs":[{"name":"unionfindset"},{"name":"usize"}],"output":null}],[0,"volumetric","nphysics","Volume and inertia tensor computation.",null,null],[5,"ball_volume","nphysics::volumetric","The volume of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_surface","","The surface of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_center_of_mass","","The center of mass of a ball.",null,{"inputs":[],"output":{"name":"p"}}],[5,"ball_unit_angular_inertia","","The unit angular inertia of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"i"}}],[5,"cylinder_volume","","The volume of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_surface","","The surface of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_center_of_mass","","The center of mass of a cylinder.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cylinder_unit_angular_inertia","","The unit angular inertia of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cone_volume","","The volume of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_surface","","The surface of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_center_of_mass","","The center of mass of a cone.",null,{"inputs":[{"name":"n"}],"output":{"name":"p"}}],[5,"cone_unit_angular_inertia","","The unit angular inertia of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cuboid_volume","","The volume of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"n"}}],[5,"cuboid_surface","","The surface of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"n"}}],[5,"cuboid_center_of_mass","","The center of mass of a cuboid.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cuboid_unit_angular_inertia","","The unit angular inertia of a cuboid.",null,{"inputs":[{"name":"usize"},{"name":"v"}],"output":{"name":"i"}}],[5,"convex_mesh_surface","","The surface of a convex mesh.",null,null],[5,"convex_mesh_volume_and_center_of_mass","","The volume and center of mass of a convex mesh.",null,null],[5,"convex_mesh_mass_properties","","The mass properties of a convex mesh.",null,null],[5,"convex_hull_surface","","The surface of a convex hull.",null,null],[5,"convex_hull_volume","","The volume of the convex hull of a set of points.",null,null],[5,"convex_hull_center_of_mass","","The center of mass of the convex hull of a set of points.",null,null],[5,"convex_hull_unit_angular_inertia","","The angular inertia of the convex hull of a set of points.",null,null],[11,"surface","nphysics::volumetric::volumetric_ball","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"n"}}],[11,"volume","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",24,{"inputs":[{"name":"ball2"}],"output":{"name":"mat1"}}],[11,"surface","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"n"}}],[11,"volume","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",25,{"inputs":[{"name":"ball3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cylinder","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"n"}}],[11,"volume","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",26,{"inputs":[{"name":"cylinder2"}],"output":{"name":"mat1"}}],[11,"surface","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"n"}}],[11,"volume","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",27,{"inputs":[{"name":"cylinder3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cuboid","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"n"}}],[11,"volume","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",28,{"inputs":[{"name":"cuboid2"}],"output":{"name":"mat1"}}],[11,"surface","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"n"}}],[11,"volume","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",29,{"inputs":[{"name":"cuboid3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_cone","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"n"}}],[11,"volume","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",30,{"inputs":[{"name":"cone2"}],"output":{"name":"mat1"}}],[11,"surface","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"n"}}],[11,"volume","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",31,{"inputs":[{"name":"cone3"}],"output":{"name":"mat3"}}],[11,"surface","nphysics::volumetric::volumetric_compound","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"n"}}],[11,"volume","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",32,{"inputs":[{"name":"compound2"}],"output":{"name":"mat1"}}],[11,"mass_properties","","The mass properties of this `CompoundData`.",32,null],[11,"surface","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"n"}}],[11,"volume","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",33,{"inputs":[{"name":"compound3"}],"output":{"name":"mat3"}}],[11,"mass_properties","","The mass properties of this `CompoundData`.",33,null],[11,"surface","nphysics::volumetric::volumetric_convex","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"n"}}],[11,"volume","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"n"}}],[11,"center_of_mass","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",34,{"inputs":[{"name":"convex3"}],"output":{"name":"mat3"}}],[11,"mass_properties","","",34,null],[11,"surface","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"n"}}],[11,"volume","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"n"}}],[11,"center_of_mass","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",35,{"inputs":[{"name":"convex2"}],"output":{"name":"mat1"}}],[11,"mass_properties","","",35,null],[11,"surface","nphysics::volumetric","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"volume","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"center_of_mass","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"pnt2"}}],[11,"unit_angular_inertia","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"mat1"}}],[11,"mass_properties","","",36,null],[11,"surface","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"volume","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"n"}}],[11,"center_of_mass","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"pnt3"}}],[11,"unit_angular_inertia","","",36,{"inputs":[{"name":"repr"}],"output":{"name":"mat3"}}],[11,"mass_properties","","",36,null],[8,"Volumetric","","Trait implemented by objects which have a mass, a center of mass, and an inertia tensor.",null,null],[10,"surface","","Computes the surface of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"n"}}],[10,"volume","","Computes the volume of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"n"}}],[10,"center_of_mass","","Computes the center of mass of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"p"}}],[10,"unit_angular_inertia","","Computes the angular inertia tensor of this object.",37,{"inputs":[{"name":"volumetric"}],"output":{"name":"i"}}],[11,"mass","","Given its density, this computes the mass of this object.",37,{"inputs":[{"name":"volumetric"},{"name":"n"}],"output":{"name":"n"}}],[11,"angular_inertia","","Given its mass, this computes the angular inertia of this object.",37,{"inputs":[{"name":"volumetric"},{"name":"n"}],"output":{"name":"i"}}],[11,"mass_properties","","Given its density, this computes the mass, center of mass, and inertia tensor of this object.",37,null],[8,"InertiaTensor","","Trait implemented by inertia tensors.",null,null],[10,"apply","","Applies this inertia tensor to a vector.",38,{"inputs":[{"name":"inertiatensor"},{"name":"av"}],"output":{"name":"av"}}],[10,"to_world_space","","Transforms this inertia tensor from local space to world space.",38,{"inputs":[{"name":"inertiatensor"},{"name":"m"}],"output":{"name":"self"}}],[10,"to_relative_wrt_point","","Computes this inertia tensor relative to a given point.",38,{"inputs":[{"name":"inertiatensor"},{"name":"n"},{"name":"p"}],"output":{"name":"self"}}],[0,"math","nphysics","Compilation flags dependent aliases for mathematical types.",null,null],[6,"Scalar","nphysics::math","The scalar type.",null,null],[6,"Point","","The point type.",null,null],[6,"Vect","","The vector type.",null,null],[6,"Orientation","","The orientation type.",null,null],[6,"Matrix","","The transformation matrix type.",null,null],[6,"RotationMatrix","","The rotation matrix type.",null,null],[6,"AngularInertia","","The inertia tensor type.",null,null]],"paths":[[8,"Integrator"],[3,"BodyExpEulerIntegrator"],[3,"BodySmpEulerIntegrator"],[3,"BodyForceGenerator"],[3,"BodyDamping"],[3,"TranslationalCCDMotionClamping"],[4,"Constraint"],[8,"Detector"],[3,"Anchor"],[3,"JointManager"],[3,"BallInSocket"],[3,"Fixed"],[8,"Joint"],[3,"ActivationManager"],[3,"Velocities"],[3,"VelocityConstraint"],[4,"CorrectionMode"],[8,"Solver"],[3,"AccumulatedImpulseSolver"],[3,"World"],[4,"ActivationState"],[4,"RigidBodyState"],[3,"RigidBody"],[3,"UnionFindSet"],[6,"Ball2"],[6,"Ball3"],[6,"Cylinder2"],[6,"Cylinder3"],[6,"Cuboid2"],[6,"Cuboid3"],[6,"Cone2"],[6,"Cone3"],[6,"Compound2"],[6,"Compound3"],[6,"Convex3"],[6,"Convex2"],[8,"Repr"],[8,"Volumetric"],[8,"InertiaTensor"]]};
searchIndex['ncollide'] = {"items":[[0,"","ncollide","ncollide\n========",null,null],[0,"math","","",null,null],[8,"FloatError","ncollide::math","Trait for constant helping handling floating point computations.",null,null],[10,"epsilon","","Epsilon value used to perform fuzzy comparisons with zero.",0,{"inputs":[{"name":"floaterror"}],"output":{"name":"self"}}],[8,"Scalar","","Trait implemented by scalar types.",null,null],[8,"Point","","Trait implemented by point types.",null,null],[16,"Vect","","",1,null],[8,"Vect","","Trait implemented by vector types.",null,null],[16,"Scalar","","",2,null],[8,"Isometry","","Trait implemented by transformation matrices types.",null,null],[8,"HasInertiaMatrix","","Trait implement by vectors that are transformable by the inertia matrix `I`.",null,null],[0,"utils","ncollide","",null,null],[0,"data","ncollide::utils","Data structure utilities.",null,null],[0,"pair","ncollide::utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[11,"new","ncollide_utils::data::pair","Builds a new `Pair`.",3,{"inputs":[{"name":"pair"},{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"decode","","",3,{"inputs":[{"name":"pair"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"pair"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"pair"}],"output":{"name":"pair"}}],[11,"eq","","",3,{"inputs":[{"name":"pair"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"decode","","",4,{"inputs":[{"name":"pairtwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"pairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new PairTWHash",4,{"inputs":[{"name":"pairtwhash"}],"output":{"name":"pairtwhash"}}],[11,"hash","","",4,{"inputs":[{"name":"pairtwhash"},{"name":"pair"}],"output":{"name":"usize"}}],[11,"decode","ncollide_utils::data::hash","",5,{"inputs":[{"name":"uintpairtwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"uintpairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"new","","Creates a new UintPairTWHash.",5,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"hash","","",5,null],[11,"decode","","",6,{"inputs":[{"name":"uinttwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"uinttwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"new","","Creates a new UintTWHash.",6,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"hash","","",6,{"inputs":[{"name":"uinttwhash"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"decode","ncollide_utils::data::hash_map","",7,{"inputs":[{"name":"entry"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"entry"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"entry"}],"output":{"name":"entry"}}],[11,"decode","","",8,{"inputs":[{"name":"hashmap"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"hashmap"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates a new hash map.",8,{"inputs":[{"name":"hashmap"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",8,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",8,null],[11,"elements_mut","","The elements added to this hash map.",8,null],[11,"len","","The number of elements contained by this hashmap.",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",8,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",8,null],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",8,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet. If the functions returns `None`, nothing is\ninserted.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",8,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",8,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"new","ncollide_utils::data::owned_allocation_cache","Initializes the cache.",9,{"inputs":[{"name":"ownedallocationcache"}],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",9,{"inputs":[{"name":"ownedallocationcache"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",9,null],[11,"clear","","Clears the cache, destroying any stored pointer.",9,null],[11,"new","ncollide_utils::data::vec_slice","Creates a new immutable slice.",10,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",10,null],[11,"len","","The length of this slice.",10,{"inputs":[{"name":"vecslice"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",10,{"inputs":[{"name":"vecslice"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",10,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",10,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",11,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",11,null],[11,"len","","The length of this slice.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",11,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",11,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice.\nBoth slices must have the same length.",11,null],[11,"new","ncollide_utils::data::ref_with_cost","Creates a new reference packed with a cost value.",12,{"inputs":[{"name":"refwithcost"},{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"eq","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[11,"decode","ncollide_utils::data::uid_remap","",13,{"inputs":[{"name":"fastkey"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"fastkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"fmt","","",13,{"inputs":[{"name":"fastkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_invalid","","Creates a new invalid key that won't be used by the `UidRemap` structure, ever.",13,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",13,{"inputs":[{"name":"fastkey"}],"output":{"name":"usize"}}],[11,"decode","","",14,{"inputs":[{"name":"lookupdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"lookupdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"lookupdata"}],"output":{"name":"lookupdata"}}],[11,"fmt","","",14,{"inputs":[{"name":"lookupdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"fmt","","",15,{"inputs":[{"name":"uidremap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"new","","Creates an empty `UidRemap`.",15,{"inputs":[{"name":"uidremap"},{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",15,null],[11,"get","","Returns a reference to the value corresponding to the key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value\npresent in the map, that value and its fast key are returned. Otherwise, `None` is\nreturned.",15,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values.\nThe iterator's element type is `&'r O`.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",15,{"inputs":[{"name":"uidremap"}],"output":{"name":"itermut"}}],[11,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",15,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"uidremap"},{"name":"i"}],"output":{"name":"uidremap"}}],[11,"extend","","",15,null],[11,"index","","",15,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"o"}}],[11,"default","ncollide_utils::data::vec_map","",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",16,null],[11,"hash","","",16,null],[11,"new","","Creates an empty `VecMap`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",16,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",16,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"len","","Returns the number of elements in the map.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",16,null],[11,"get","","Returns a reference to the value corresponding to the key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",17,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",17,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",17,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",18,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",19,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",19,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",16,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",16,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",16,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",16,null],[11,"index","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",16,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",23,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"new","ncollide_utils::optimization","Creates a new backtracking line search methods.",25,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"usize"}],"output":{"name":"backtrackinglinesearch"}}],[11,"step_size","","",25,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[11,"fmt","ncollide_utils::hashable_partial_eq","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"hashablepartialeq"}}],[11,"decode","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really\nwant to transform the wrapped object's partial equality to an equivalence relation.",26,{"inputs":[{"name":"hashablepartialeq"},{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",26,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"t"}}],[11,"hash","","",26,null],[11,"as_bytes","nalgebra::structs::vec","",27,null],[11,"as_bytes","","",27,null],[11,"as_bytes","","",28,null],[11,"as_bytes","","",28,null],[11,"as_bytes","nalgebra::structs::pnt","",29,null],[11,"as_bytes","","",29,null],[11,"as_bytes","","",30,null],[11,"as_bytes","","",30,null],[3,"Pair","ncollide::utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",3,null],[12,"second","","second object of the pair",3,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[0,"hash","ncollide::utils::data","Trait for hash functions.",null,null],[8,"HashFun","ncollide::utils::data::hash","Hash function.",null,null],[10,"hash","","Hash function.",31,{"inputs":[{"name":"hashfun"},{"name":"k"}],"output":{"name":"usize"}}],[3,"UintPairTWHash","","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide::utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide::utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",7,null],[12,"value","","The value of the entry.",7,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[0,"owned_allocation_cache","ncollide::utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide::utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[0,"vec_slice","ncollide::utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide::utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[0,"ref_with_cost","ncollide::utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide::utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",12,null],[12,"cost","","The cost of the object.",12,null],[0,"uid_remap","ncollide::utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide::utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined\nid of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[0,"vec_map","ncollide::utils::data","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","ncollide::utils::data::vec_map","A map optimized for small integer keys.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",17,null],[13,"Occupied","","An occupied Entry",17,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[5,"is_affinely_dependent_triangle","ncollide::utils","Tests if three points are exactly aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"binom","","Computes the binomial coefficient C^k_n (\"k among n\").",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"project_homogeneous_to","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",32,null],[3,"BacktrackingLineSearch","","The backtracking line search method.",null,null],[5,"median","","Computes the median of a set of values.",null,null],[5,"minimize_with_bfgs","","Minimizes a function using the bfgs method.",null,null],[5,"newton","","Finds the root of a function using the Newton method.",null,null],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"is_affinely_dependent_triangle3","","Tests if three 3D points are exactly aligned without the need of the `Cross` trait.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"triangle_perimeter","","Computes the perimeter of a triangle.",null,null],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"center_reduce","","Centers and reduces a set of data.",null,null],[5,"center","","Computes the center of a set of point.",null,null],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"cross3","","A 3d cross product that do not require the `Cross<Self, Self>` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[3,"HashablePartialEq","","A structure that implements `Eq` and is hashable even if the wrapped data implements only\n`PartialEq`.",null,null],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[8,"LineSearch","","Trait for line search methods.",null,null],[10,"step_size","","Gets a near-optimal step size for the next descent.",33,{"inputs":[{"name":"linesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"project_homogeneous","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"cov_and_center","","Computes the covariance matrix and center of a set of points.",null,null],[5,"cov","","Computes the convariance matrix of a set of points.",null,null],[5,"maximize_with_newton","","Maximizes a real function using the Newton method.",null,null],[5,"bfgs","","Minimizes a function using the quasi-newton BFGS method.",null,null],[0,"shape","ncollide","Collision shapes supported by ncollide.",null,null],[11,"decode","ncollide_entities::shape::plane","",34,{"inputs":[{"name":"plane"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"fmt","","",34,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"new","","Builds a new plane from its center and its normal.",34,{"inputs":[{"name":"plane"},{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",34,{"inputs":[{"name":"plane"},{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",34,{"inputs":[{"name":"plane"}],"output":{"name":"v"}}],[11,"repr","","",34,{"inputs":[{"name":"plane"}],"output":{"name":"reprdesc"}}],[11,"decode","ncollide_entities::shape::cuboid","",35,{"inputs":[{"name":"cuboid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"cuboid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"cuboid"}],"output":{"name":"cuboid"}}],[11,"fmt","","",35,{"inputs":[{"name":"cuboid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each\naxis. Each half-extent must be greater than 0.04.",35,{"inputs":[{"name":"cuboid"},{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",35,{"inputs":[{"name":"cuboid"}],"output":{"name":"v"}}],[11,"fmt","ncollide_entities::shape::minkowski_sum","",36,{"inputs":[{"name":"minkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",36,{"inputs":[{"name":"minkowskisum"},{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",36,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",36,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",36,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",36,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g2"}}],[11,"fmt","","",37,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",37,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",37,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",37,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",37,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",37,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g2"}}],[11,"decode","ncollide_entities::shape::segment","",38,{"inputs":[{"name":"segment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"segment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"fmt","","",38,{"inputs":[{"name":"segment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"new","","Creates a new segment from two points.",38,{"inputs":[{"name":"segment"},{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",38,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",38,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",38,null],[11,"decode","ncollide_entities::shape::triangle","",39,{"inputs":[{"name":"triangle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"triangle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"triangle"}],"output":{"name":"triangle"}}],[11,"fmt","","",39,{"inputs":[{"name":"triangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"new","","Creates a triangle from three points.",39,{"inputs":[{"name":"triangle"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",39,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",39,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",39,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",39,null],[11,"clone","ncollide_entities::shape::base_mesh","",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"basemesh"}}],[11,"new","","Builds a new mesh.",40,{"inputs":[{"name":"basemesh"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",40,null],[11,"indices","","The indices of this mesh.",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",40,{"inputs":[{"name":"basemesh"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",40,{"inputs":[{"name":"basemesh"},{"name":"usize"}],"output":{"name":"e"}}],[11,"clone","ncollide_entities::shape::trimesh","",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Builds a new mesh.",41,{"inputs":[{"name":"trimesh"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",41,null],[11,"indices","","The indices of this mesh.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",41,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"clone","ncollide_entities::shape::polyline","",42,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Builds a new mesh.",42,{"inputs":[{"name":"polyline"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",42,null],[11,"indices","","The indices of this mesh.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",42,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",42,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"decode","ncollide_entities::shape::capsule","",43,{"inputs":[{"name":"capsule"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"capsule"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"capsule"}],"output":{"name":"capsule"}}],[11,"fmt","","",43,{"inputs":[{"name":"capsule"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"new","","Creates a new capsule.",43,{"inputs":[{"name":"capsule"},{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",43,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule's rounded part.",43,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"decode","ncollide_entities::shape::cone","",44,{"inputs":[{"name":"cone"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"cone"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"cone"}],"output":{"name":"cone"}}],[11,"fmt","","",44,{"inputs":[{"name":"cone"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cone.",44,{"inputs":[{"name":"cone"},{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",44,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",44,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"decode","ncollide_entities::shape::cylinder","",45,{"inputs":[{"name":"cylinder"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"fmt","","",45,{"inputs":[{"name":"cylinder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cylinder.",45,{"inputs":[{"name":"cylinder"},{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",45,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",45,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"fmt","ncollide_entities::shape::reflection","",46,{"inputs":[{"name":"reflection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit,\nthe reflection computation is done in constant time.",46,{"inputs":[{"name":"reflection"},{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",46,{"inputs":[{"name":"reflection"}],"output":{"name":"g"}}],[11,"decode","ncollide_entities::shape::torus","",47,{"inputs":[{"name":"torus"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"torus"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"torus"}],"output":{"name":"torus"}}],[11,"fmt","","",47,{"inputs":[{"name":"torus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"new","","Creates a new torus with the given radiuses.",47,{"inputs":[{"name":"torus"},{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",47,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",47,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"clone","ncollide_entities::shape::compound","",48,{"inputs":[{"name":"compound"}],"output":{"name":"compound"}}],[11,"new","","Builds a new compound shape.",48,{"inputs":[{"name":"compound"},{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",48,null],[11,"bvt","","The optimization structure used by this compound shape.",48,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",48,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",48,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"decode","ncollide_entities::shape::convex","",49,{"inputs":[{"name":"convex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"convex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"convex"}],"output":{"name":"convex"}}],[11,"fmt","","",49,{"inputs":[{"name":"convex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"new","","Creates a polytope from a set of point.",49,{"inputs":[{"name":"convex"},{"name":"vec"}],"output":{"name":"convex"}}],[11,"points","","The list of points of this convex polytope.",49,null],[11,"map_part_at","ncollide_entities::shape::compound","",48,null],[11,"map_transformed_part_at","","",48,null],[11,"aabb_at","","",48,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",48,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"map_part_at","ncollide_entities::shape::trimesh","",41,null],[11,"map_transformed_part_at","","",41,null],[11,"aabb_at","","",41,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"map_part_at","ncollide_entities::shape::polyline","",42,null],[11,"map_transformed_part_at","","",42,null],[11,"aabb_at","","",42,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",42,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"support_point","ncollide_entities::shape::cuboid","",35,null],[11,"support_point","ncollide_entities::shape::capsule","",43,null],[11,"support_point","ncollide_entities::shape::cone","",44,null],[11,"support_point","ncollide_entities::shape::cylinder","",45,null],[11,"support_point","ncollide_entities::shape::convex","",49,null],[11,"support_point","ncollide_entities::shape::reflection","",46,null],[11,"support_point","ncollide_entities::shape::triangle","",39,null],[11,"support_point","ncollide_entities::shape::segment","",38,null],[11,"support_point","ncollide_entities::shape::minkowski_sum","",36,null],[11,"support_point","","",37,null],[11,"new","ncollide_entities::bounding_volume::bounding_volume_bvt","Creates a new `BoundingVolumeInterferencesCollector`.",50,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",50,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",50,null],[11,"decode","ncollide_entities::bounding_volume::aabb","",51,{"inputs":[{"name":"aabb"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"aabb"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"aabb"}],"output":{"name":"aabb"}}],[11,"eq","","",51,{"inputs":[{"name":"aabb"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"aabb"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"aabb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new AABB.",51,{"inputs":[{"name":"aabb"},{"name":"p"},{"name":"p"}],"output":{"name":"aabb"}}],[11,"new_invalid","","Creates an invalid AABB with:\n* `mins = Bounded::max_value()`\n* `maxs = Bounded::max_value()`.\nThis is useful to build aabb using merges.",51,{"inputs":[{"name":"aabb"}],"output":{"name":"aabb"}}],[11,"mins","","Reference to the AABB point with the smallest components along each axis.",51,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"maxs","","Reference to the AABB point with the biggest components along each axis.",51,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"center","","The center of this AABB.",51,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"half_extents","","The half extents of this AABB.",51,null],[11,"intersects","","",51,{"inputs":[{"name":"aabb"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"contains","","",51,{"inputs":[{"name":"aabb"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"merge","","",51,null],[11,"merged","","",51,{"inputs":[{"name":"aabb"},{"name":"aabb"}],"output":{"name":"aabb"}}],[11,"loosen","","",51,null],[11,"loosened","","",51,null],[11,"tighten","","",51,null],[11,"tightened","","",51,null],[11,"translation","","",51,null],[11,"inv_translation","","",51,null],[11,"append_translation_mut","","",51,null],[11,"append_translation","","",51,null],[11,"prepend_translation_mut","","",51,null],[11,"prepend_translation","","",51,null],[11,"set_translation","","",51,null],[11,"aabb","ncollide_entities::shape::cuboid","",35,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::cone","",44,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::cylinder","",45,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::capsule","",43,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::triangle","",39,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::segment","",38,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::plane","",34,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::convex","",49,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::compound","",48,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::base_mesh","",40,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::trimesh","",41,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide_entities::shape::polyline","",42,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","ncollide","",52,{"inputs":[{"name":"repr"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"decode","ncollide_entities::bounding_volume::bounding_sphere","",53,{"inputs":[{"name":"boundingsphere"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"boundingsphere"}],"output":{"name":"boundingsphere"}}],[11,"eq","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bounding sphere.",53,null],[11,"center","","The bounding sphere center.",53,{"inputs":[{"name":"boundingsphere"}],"output":{"name":"p"}}],[11,"radius","","The bounding sphere radius.",53,null],[11,"transform_by","","Transforms this bounding sphere by `m`.",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"intersects","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"contains","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"merge","","",53,null],[11,"merged","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"boundingsphere"}],"output":{"name":"boundingsphere"}}],[11,"loosen","","",53,null],[11,"loosened","","",53,null],[11,"tighten","","",53,null],[11,"tightened","","",53,null],[11,"translation","","",53,null],[11,"inv_translation","","",53,null],[11,"append_translation_mut","","",53,null],[11,"append_translation","","",53,null],[11,"prepend_translation_mut","","",53,null],[11,"prepend_translation","","",53,null],[11,"set_translation","","",53,null],[11,"bounding_sphere","ncollide_entities::shape::cuboid","",35,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::cone","",44,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::cylinder","",45,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::capsule","",43,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::plane","",34,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::convex","",49,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::compound","",48,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::triangle","",39,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::segment","",38,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::base_mesh","",40,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::trimesh","",41,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide_entities::shape::polyline","",42,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","ncollide","",52,{"inputs":[{"name":"repr"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"decode","ncollide_entities::partitioning::dbvt","",54,{"inputs":[{"name":"updatestate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"updatestate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",55,{"inputs":[{"name":"dbvt"}],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",55,null],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",55,{"inputs":[{"name":"dbvt"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",55,null],[11,"visit","","Visit this tree using… a visitor!",55,null],[11,"clone","","",56,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"dbvtleafstate"}}],[11,"is_root","","Indicates whether this leaf is the root.",56,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"bool"}}],[11,"is_detached","","Indicates whether this leaf is detached.",56,{"inputs":[{"name":"dbvtleafstate"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"dbvtleaf"}}],[11,"new","","Creates a new leaf.",57,{"inputs":[{"name":"dbvtleaf"},{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",57,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",57,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"decode","ncollide_entities::partitioning::bvt","",58,{"inputs":[{"name":"bvt"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"bvt"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"bvt"}],"output":{"name":"bvt"}}],[11,"decode","","",59,{"inputs":[{"name":"bvtnode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"bvtnode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bvtnode"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",58,{"inputs":[{"name":"bvt"},{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Visit this tree using… a visitor!",58,null],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",58,null],[11,"best_first_search","","Performs a best-fist-search on the tree.",58,{"inputs":[{"name":"bvt"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",58,{"inputs":[{"name":"bvt"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",58,{"inputs":[{"name":"bvt"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",58,{"inputs":[{"name":"bvt"},{"name":"vec"}],"output":{"name":"bvt"}}],[11,"bounding_volume","","The bounding volume of this node.",59,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bv"}}],[11,"new","ncollide_entities::partitioning::bvt_visitor","Creates a new `BoundingVolumeInterferencesCollector`.",60,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",60,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",60,null],[11,"clone","ncollide_entities::inspection::repr","",61,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"clone","","",62,{"inputs":[{"name":"reprdesc"}],"output":{"name":"reprdesc"}}],[11,"new","","Creates a new representation descriptor.",62,{"inputs":[{"name":"reprdesc"},{"name":"typeid"},{"name":"typeid"},{"name":"traitobject"}],"output":{"name":"reprdesc"}}],[11,"type_id","","`TypeId` of this shape's exact type.",62,{"inputs":[{"name":"reprdesc"}],"output":{"name":"typeid"}}],[11,"repr_id","","`TypeId` of this shape's representation.",62,{"inputs":[{"name":"reprdesc"}],"output":{"name":"typeid"}}],[11,"repr","","This shape's representation.",62,{"inputs":[{"name":"reprdesc"}],"output":{"name":"traitobject"}}],[11,"downcast_ref","","Converts this repr as an exact shape.",62,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[11,"repr","ncollide_entities::shape::compound","",48,{"inputs":[{"name":"compound"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::trimesh","",41,{"inputs":[{"name":"trimesh"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::polyline","",42,{"inputs":[{"name":"polyline"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::capsule","",43,{"inputs":[{"name":"capsule"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cone","",44,{"inputs":[{"name":"cone"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::convex","",49,{"inputs":[{"name":"convex"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cuboid","",35,{"inputs":[{"name":"cuboid"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::cylinder","",45,{"inputs":[{"name":"cylinder"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::segment","",38,{"inputs":[{"name":"segment"}],"output":{"name":"reprdesc"}}],[11,"repr","ncollide_entities::shape::triangle","",39,{"inputs":[{"name":"triangle"}],"output":{"name":"reprdesc"}}],[6,"Ball2","ncollide::shape","",null,null],[6,"Plane2","","",null,null],[6,"Cuboid2","","",null,null],[6,"Capsule2","","",null,null],[6,"Cone2","","",null,null],[6,"Cylinder2","","",null,null],[6,"Convex2","","",null,null],[6,"Segment2","","",null,null],[6,"Triangle2","","",null,null],[6,"Polyline2","","",null,null],[6,"Compound2","","",null,null],[6,"Ball3","","",null,null],[6,"Plane3","","",null,null],[6,"Cuboid3","","",null,null],[6,"Capsule3","","",null,null],[6,"Cone3","","",null,null],[6,"Cylinder3","","",null,null],[6,"Convex3","","",null,null],[6,"Segment3","","",null,null],[6,"Triangle3","","",null,null],[6,"Polyline3","","",null,null],[6,"TriMesh3","","",null,null],[6,"Compound3","","",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Triangle","","A triangle shape.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",63,null],[3,"Cuboid","","Shape of a box.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Convex","","The implicit convex hull of a set of points.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",64,null],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave\nshape.",64,null],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",64,{"inputs":[{"name":"compositeshape"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",64,{"inputs":[{"name":"compositeshape"}],"output":{"name":"bvt"}}],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped shapes.",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Ball","","A Ball shape.",null,null],[3,"Torus","","A torus.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[0,"inspection","ncollide","Traits and methods to inspect and retrieve the capabilities and representations of shapes at runtime.",null,null],[6,"Repr2","ncollide::inspection","",null,null],[6,"Repr3","","",null,null],[5,"composite_shape_repr_id","","Gets the id associated with the `CompositeShape` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[8,"Repr","","An object with a unique runtime geometric representation.",null,null],[10,"repr","","Gets a reference to this object's main representation.",52,{"inputs":[{"name":"repr"}],"output":{"name":"reprdesc"}}],[3,"ReprDesc","","",null,null],[5,"maybe_as_support_map","","Converts a shape to a support map if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_support_map","","Converts a shape descriptor to a support map if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"support_map_repr_id","","Gets the id associated with the `SupportMap` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[5,"maybe_repr_desc_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[0,"bounding_volume","ncollide","Bounding volumes.",null,null],[6,"BoundingSphere2","ncollide::bounding_volume","",null,null],[6,"AABB2","","",null,null],[6,"BoundingSphere3","","",null,null],[6,"AABB3","","",null,null],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[8,"HasAABB","","Trait of objects that can be bounded by an AABB.",null,null],[10,"aabb","","The object’s AABB.",65,{"inputs":[{"name":"hasaabb"},{"name":"m"}],"output":{"name":"aabb"}}],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The object bounding volume.",66,{"inputs":[{"name":"hasboundingvolume"}],"output":{"name":"bv"}}],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[8,"HasBoundingSphere","","Trait implemented by objects having a bounding sphere.",null,null],[10,"bounding_sphere","","The object bounding sphere.",67,{"inputs":[{"name":"hasboundingsphere"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[3,"AABB","","An Axis Aligned Bounding Box.",null,null],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"intersects","","Checks if this bounding volume intersect with another one.",68,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",68,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",68,null],[10,"merged","","Merges this bounding volume with another one.",68,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",68,null],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",68,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[10,"tighten","","Tighten this bounding volume.",68,null],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",68,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[5,"implicit_shape_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[0,"partitioning","ncollide","Spatial partitioning tools.",null,null],[3,"BVT","ncollide::partitioning","A Boundig Volume Tree.",null,null],[5,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",69,{"inputs":[{"name":"bvtvisitor"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",69,null],[3,"DBVT","","A Dynamic Bounding Volume Tree.",null,null],[5,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",59,null],[13,"Leaf","","A leaf.",59,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",70,null],[13,"Parts","","Result of the partitioning of several elements.",70,null],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",57,null],[12,"center","","The center of this node bounding volume.",57,null],[12,"object","","An user-defined object.",57,null],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",71,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",71,null],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",71,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",71,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",72,{"inputs":[{"name":"bvtcostfn"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",72,{"inputs":[{"name":"bvtcostfn"},{"name":"b"}],"output":{"name":"option"}}],[0,"support_map","ncollide","Definition of support functions.",null,null],[5,"point_cloud_support_point","ncollide::support_map","Computes the support point of a cloud of points.",null,null],[8,"SupportMap","","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a\nfunction associating a vector to the shape point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\nshape-dependent. Use `support_point` to sample the complete shape.",73,null],[5,"cso_support_point","","Computes the support point of the CSO `g1 - g2` on a given direction.",null,null],[0,"geometry","ncollide","Non-persistant pairwise geometric queries.",null,null],[0,"algorithms","ncollide::geometry","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide::geometry::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide::geometry::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",74,null],[10,"add_point","","Adds a point to the simplex.",74,null],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",74,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is\nmutable for optimization purpose.",74,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",74,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",74,{"inputs":[{"name":"simplex"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",74,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",74,null],[0,"johnson_simplex","ncollide::geometry::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[11,"new","ncollide_queries::geometry::algorithms::johnson_simplex","Creates a new, empty, Johnson simplex.",75,{"inputs":[{"name":"johnsonsimplex"},{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",75,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"clone","","",75,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"decode","","",76,{"inputs":[{"name":"recursiontemplate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"recursiontemplate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"recursiontemplate"}],"output":{"name":"recursiontemplate"}}],[11,"eq","","",76,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",76,{"inputs":[{"name":"recursiontemplate"},{"name":"usize"}],"output":{"name":"arc"}}],[11,"reset","","",75,null],[11,"dimension","","",75,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",75,null],[11,"contains_point","","",75,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",75,null],[11,"project_origin_and_reduce","","",75,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"project_origin","","",75,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"modify_pnts","","",75,null],[11,"clone","ncollide_queries::geometry::algorithms::gjk","",77,{"inputs":[{"name":"gjkresult"}],"output":{"name":"gjkresult"}}],[11,"decode","","",77,{"inputs":[{"name":"gjkresult"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"gjkresult"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","ncollide_queries::geometry::contacts_internal::contact","",78,{"inputs":[{"name":"contact"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"contact"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"contact"}],"output":{"name":"contact"}}],[11,"eq","","",78,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"contact"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new contact.",78,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",78,null],[11,"new","ncollide_queries::geometry::distance_internal::composite_shape_against_any","",79,{"inputs":[{"name":"compositeshapeagainstanydistcostfn"},{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"compositeshapeagainstanydistcostfn"}}],[11,"compute_bv_cost","","",79,{"inputs":[{"name":"compositeshapeagainstanydistcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",79,{"inputs":[{"name":"compositeshapeagainstanydistcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","ncollide_queries::geometry::time_of_impact_internal::composite_shape_against_any","",80,null],[11,"compute_bv_cost","","",80,{"inputs":[{"name":"compositeshapeagainstanytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",80,{"inputs":[{"name":"compositeshapeagainstanytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"project_point","ncollide::shape","",34,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",34,null],[11,"contains_point","","",34,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",35,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",35,null],[11,"contains_point","","",35,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::bounding_volume","",51,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",51,null],[11,"contains_point","","",51,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",53,null],[11,"contains_point","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::shape","",45,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",45,null],[11,"contains_point","","",45,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",44,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",44,null],[11,"contains_point","","",44,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",43,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",43,null],[11,"contains_point","","",43,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",49,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",49,null],[11,"contains_point","","",49,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",38,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",38,null],[11,"contains_point","","",38,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",39,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",39,null],[11,"contains_point","","",39,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",48,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",48,null],[11,"contains_point","","",48,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"compute_bv_cost","ncollide_queries::point::point_compound","",81,{"inputs":[{"name":"compoundpointprojcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",81,{"inputs":[{"name":"compoundpointprojcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"visit_internal","","",82,{"inputs":[{"name":"pointcontainementtest"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",82,null],[11,"project_point","ncollide::shape","",40,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",40,null],[11,"contains_point","","",40,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"compute_bv_cost","ncollide_queries::point::point_mesh","",83,{"inputs":[{"name":"basemeshpointprojcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",83,{"inputs":[{"name":"basemeshpointprojcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"visit_internal","","",84,{"inputs":[{"name":"pointcontainementtest"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",84,null],[11,"project_point","ncollide::shape","",41,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",41,null],[11,"contains_point","","",41,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",42,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",42,null],[11,"contains_point","","",42,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::geometry::algorithms","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",52,null],[11,"contains_point","","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","ncollide_queries::point::point_bvt","Creates a new `PointInterferencesCollector`.",85,{"inputs":[{"name":"pointinterferencescollector"},{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"visit_internal","","",85,{"inputs":[{"name":"pointinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",85,null],[11,"clone","ncollide_queries::ray::ray","",86,{"inputs":[{"name":"ray"}],"output":{"name":"ray"}}],[11,"decode","","",86,{"inputs":[{"name":"ray"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"ray"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"ray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new ray starting from `orig` and with the direction `dir`. `dir` must be\nnormalized.",86,null],[11,"new_with_uvs","","Creates a new `RayIntersection`.",87,null],[11,"new","","Creates a new `RayIntersection`.",87,null],[11,"toi_and_normal_with_ray","ncollide::shape","",34,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",35,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",35,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",35,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::bounding_volume","",51,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",51,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",51,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",53,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide::shape","",45,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",44,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",43,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",49,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",38,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",36,{"inputs":[{"name":"minkowskisum"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",39,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",48,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",48,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"compute_bv_cost","ncollide_queries::ray::ray_compound","",88,{"inputs":[{"name":"compoundraytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",88,{"inputs":[{"name":"compoundraytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",89,{"inputs":[{"name":"compoundraytoiandnormalcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",89,{"inputs":[{"name":"compoundraytoiandnormalcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::shape","",40,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",40,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",40,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"compute_bv_cost","ncollide_queries::ray::ray_mesh","",90,{"inputs":[{"name":"basemeshraytoicostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",90,{"inputs":[{"name":"basemeshraytoicostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",91,{"inputs":[{"name":"basemeshraytoiandnormalcostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",91,{"inputs":[{"name":"basemeshraytoiandnormalcostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"compute_bv_cost","","",92,{"inputs":[{"name":"basemeshraytoiandnormalanduvscostfn"},{"name":"aabb"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",92,{"inputs":[{"name":"basemeshraytoiandnormalanduvscostfn"},{"name":"usize"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::shape","",41,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",41,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",41,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",42,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",42,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",42,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::geometry::algorithms","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",52,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","ncollide_queries::ray::ray_bvt","Creates a new `BestRayInterferenceSearch`.",93,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"compute_bv_cost","","",93,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",93,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"b"}],"output":{"name":"option"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",94,{"inputs":[{"name":"rayinterferencescollector"},{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"visit_internal","","",94,{"inputs":[{"name":"rayinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",94,null],[3,"JohnsonSimplex","ncollide::geometry::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex.",null,null],[0,"gjk","ncollide::geometry::algorithms","The Gilbert–Johnson–Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide::geometry::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",77,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",77,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is to far away from the polytope.",77,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK\nalgorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK.\nalgorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[0,"minkowski_sampling","ncollide::geometry::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide::geometry::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide::geometry","Implementation details of the `contact` and `contacts` functions.",null,null],[5,"ball_against_ball","ncollide::geometry::contacts_internal","Contact between balls.",null,null],[5,"any_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, Convex, etc.) and a plane.",null,null],[5,"any_against_any","","Computes one contact point between two shapes.",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",78,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",78,null],[12,"normal","","Contact normal",78,null],[12,"depth","","Penetration depth",78,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, Convex, etc.)",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"composite_shape_against_any","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[0,"distance_internal","ncollide::geometry","Implementation details of the `distance` function.",null,null],[5,"plane_against_support_map","ncollide::geometry::distance_internal","Distance between a plane and a support-mapped shape.",null,null],[5,"ball_against_ball","","Distance between balls.",null,null],[5,"any_against_any","","Computes the minimum distance separating two shapes.",null,null],[5,"composite_shape_against_any","","Smallest distance between a composite shape and any other shape.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[5,"support_map_against_support_map_with_params","","Distance between support-mapped shapes.",null,null],[5,"any_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[0,"time_of_impact_internal","ncollide::geometry","Implementation details of the `time_of_impact` function.",null,null],[5,"any_against_composite_shape","ncollide::geometry::time_of_impact_internal","Time Of Impact of any shape with a composite shape, under translational movement.",null,null],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,null],[5,"any_against_any","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"plane_against_support_map","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"ball_against_ball","","Time Of Impact of two balls under translational movement.",null,null],[5,"composite_shape_against_any","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,null],[5,"any_against_any","ncollide::geometry","Computes one contact point between two shapes.",null,null],[5,"any_against_any","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"any_against_any","","Computes the minimum distance separating two shapes.",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",78,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",78,null],[12,"normal","","Contact normal",78,null],[12,"depth","","Penetration depth",78,null],[0,"point","ncollide","Point inclusion and projection.",null,null],[8,"PointQuery","ncollide::point","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",95,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[10,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",95,null],[10,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",95,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[3,"PointInterferencesCollector","","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[0,"ray","ncollide","Ray-casting related definitions and implementations.",null,null],[6,"Ray3","ncollide::ray","",null,null],[6,"Ray2","","",null,null],[6,"RayIntersection3","","",null,null],[6,"RayIntersection2","","",null,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[3,"Ray","","A Ray.",null,null],[12,"orig","","Starting point of the ray.",86,null],[12,"dir","","Direction of the ray.",86,null],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",87,null],[12,"normal","","The normal at the intersection point.",87,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape\ndo not support texture coordinates.",87,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",96,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",96,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed\nshape and a ray.",96,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",96,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,null],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[0,"narrow_phase","ncollide","Collision detection algorithms and structure for the Narrow Phase.",null,null],[3,"OneShotContactManifoldGenerator","ncollide::narrow_phase","Contact manifold generator producing a full manifold at the first update.",null,null],[8,"CollisionDispatcher","","",null,null],[10,"get_collision_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",97,{"inputs":[{"name":"collisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[3,"BasicCollisionDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"ReprCompositeShape","","Collision detector between a shape and a concave shape.",null,null],[3,"CompositeShapeRepr","","Collision detector between a concave shape and another shape.",null,null],[6,"CollisionAlgorithm","","",null,null],[3,"SupportMapSupportMap","","Persistent collision detector between two shapes having a support mapping function.",null,null],[8,"ContactSignalHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact","","Activate an action for when two objects start or stop to be close to each other.",98,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[3,"SupportMapPlane","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"BallBall","","Collision detector between two balls.",null,null],[8,"CollisionDetector","","Trait of the algorithms executed during the so-called Narrow Phase.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",99,{"inputs":[{"name":"collisiondetector"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[10,"num_colls","","The number of collision detected during the last update.",99,{"inputs":[{"name":"collisiondetector"}],"output":{"name":"usize"}}],[10,"colls","","Collects the collisions detected during the last update.",99,null],[3,"PlaneSupportMap","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[0,"broad_phase","ncollide","Broad phases.",null,null],[3,"DBVTBroadPhase","ncollide::broad_phase","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[8,"BroadPhase","","Trait all broad phase must implement.",null,null],[10,"defered_add","","Tells the broad phase to add an element during the next update.",100,null],[10,"defered_remove","","Tells the broad phase to remove an element during the next update.",100,null],[10,"defered_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",100,null],[10,"update","","Updates the object additions, removals, and interferences detection.",100,null],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",100,null],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",100,null],[10,"interferences_with_point","","Collects every object which might contain a given point.",100,null],[0,"world","ncollide","High level API to detect collisions in large, complex scenes.",null,null],[3,"CollisionGroups","ncollide::world","30 groups of collision used to filter which object collide with which other one.",null,null],[3,"CollisionObject","","A stand-alone object that has a position and a shape.",null,null],[12,"position","","The position of the collision object.",101,null],[12,"shape","","The shape of the collision object.",101,null],[12,"collision_groups","","The collision groups of the collision object.",101,null],[12,"data","","The data associated to this object.",101,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[6,"BroadPhaseObject","","",null,null],[3,"CollisionObjectsDispatcher","","Collision detector dispatcher for collision objects.",null,null],[0,"procedural","ncollide","",null,null],[0,"utils","ncollide::procedural","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide::procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,null],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer.\nThe circle is contained on the plane spanned by the `x` and `y` axis.",null,null],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the\n`base_circle` point in common.\nPushes `nsubdiv - 2` elements to `out`.",null,null],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,null],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each\nidentical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide::procedural","Path generation.",null,null],[11,"new","ncollide_procedural::path::polyline_pattern","Creates a new polyline pattern.",102,{"inputs":[{"name":"polylinepattern"},{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"new","ncollide_procedural::path::no_cap","Creates a new `NoCap`.",103,{"inputs":[{"name":"nocap"}],"output":{"name":"nocap"}}],[11,"gen_start_cap","","",103,null],[11,"gen_end_cap","","",103,null],[11,"new","ncollide_procedural::path::arrowhead_cap","Creates a cap that looks like an arrow.",104,{"inputs":[{"name":"arrowheadcap"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"gen_end_cap","","",104,null],[11,"gen_start_cap","","",104,null],[11,"stroke","ncollide_procedural::path::polyline_pattern","",102,{"inputs":[{"name":"polylinepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"new","ncollide_procedural::path::polyline_path","Creates a new polyline-based path.",105,{"inputs":[{"name":"polylinepath"},{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"next","","",105,{"inputs":[{"name":"polylinepath"}],"output":{"name":"pathsample"}}],[11,"fmt","ncollide_procedural::trimesh","",106,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",106,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",106,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"fmt","","",107,{"inputs":[{"name":"trimesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new `TriMesh`.",107,{"inputs":[{"name":"trimesh"},{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",107,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",107,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",107,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",107,null],[11,"num_triangles","","The number of triangles on this mesh.",107,{"inputs":[{"name":"trimesh"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",107,null],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations\ninfered from the index buffer.",107,null],[11,"scale_by","","Scales each vertex of this mesh.",107,null],[11,"scale_by_scalar","","Scales each vertex of this mesh.",107,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",107,null],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",107,null],[11,"clone","ncollide_procedural::polyline","",108,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Creates a new polyline.",108,{"inputs":[{"name":"polyline"},{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"translate_by","","Translates each vertex of this polyline.",108,null],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",108,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",108,null],[11,"scale_by_scalar","","Scales each vertex of this polyline.",108,null],[11,"scale_by","","Scales each vertex of this mesh.",108,null],[3,"PolylinePattern","ncollide::procedural::path","A pattern composed of polyline and two caps.",null,null],[3,"NoCap","","A cap that renders nothing.",null,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",109,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",109,null],[13,"EndPoint","","A point that ends the path currently generated.",109,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",109,null],[8,"StrokePattern","","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",110,{"inputs":[{"name":"strokepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",111,{"inputs":[{"name":"curvesampler"}],"output":{"name":"pathsample"}}],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",112,null],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",112,null],[3,"PolylinePath","","A path with its sample points given by a polyline.",null,null],[6,"TriMesh3","ncollide::procedural","",null,null],[6,"Polyline3","","",null,null],[6,"TriMesh2","","",null,null],[6,"Polyline2","","",null,null],[3,"Polyline","","Shapeetric description of a polyline.",null,null],[12,"coords","","Coordinates of the polyline vertices.",108,null],[12,"normals","","Coordinates of the polyline normals.",108,null],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",106,null],[13,"Split","","The vertex, normal, and uvs have different indices.",106,null],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[3,"TriMesh","","Shapeetric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",107,null],[12,"normals","","Coordinates of the mesh normals.",107,null],[12,"uvs","","Textures coordinates of the mesh.",107,null],[12,"indices","","Index buffer of the mesh.",107,null],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,null],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"vec3"}],"output":{"name":"trimesh"}}],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[0,"transformation","ncollide","",null,null],[5,"convex_hull2","ncollide::transformation","Computes the convex hull of a set of 2d points.",null,null],[8,"ToPolyline","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",113,{"inputs":[{"name":"topolyline"},{"name":"i"}],"output":{"name":"polyline"}}],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[8,"ToTriMesh","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",114,{"inputs":[{"name":"totrimesh"},{"name":"i"}],"output":{"name":"trimesh"}}],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull\nvertices.",null,null],[5,"hacd","","Approximate convex decomposition of a triangle mesh.",null,null],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null]],"paths":[[8,"FloatError"],[8,"Point"],[8,"Vect"],[3,"Pair"],[3,"PairTWHash"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"Entry"],[3,"HashMap"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"RefWithCost"],[3,"FastKey"],[3,"LookupData"],[3,"UidRemap"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"BacktrackingLineSearch"],[3,"HashablePartialEq"],[3,"Vec3"],[3,"Vec2"],[3,"Pnt3"],[3,"Pnt2"],[8,"HashFun"],[8,"AsBytes"],[8,"LineSearch"],[3,"Plane"],[3,"Cuboid"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Segment"],[3,"Triangle"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[3,"Capsule"],[3,"Cone"],[3,"Cylinder"],[3,"Reflection"],[3,"Torus"],[3,"Compound"],[3,"Convex"],[3,"BoundingVolumeInterferencesCollector"],[3,"AABB"],[8,"Repr"],[3,"BoundingSphere"],[4,"UpdateState"],[3,"DBVT"],[4,"DBVTLeafState"],[3,"DBVTLeaf"],[3,"BVT"],[4,"BVTNode"],[3,"BoundingVolumeInterferencesCollector"],[3,"TraitObject"],[3,"ReprDesc"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"HasAABB"],[8,"HasBoundingVolume"],[8,"HasBoundingSphere"],[8,"BoundingVolume"],[8,"BVTVisitor"],[4,"BinaryPartition"],[8,"BVTTVisitor"],[8,"BVTCostFn"],[8,"SupportMap"],[8,"Simplex"],[3,"JohnsonSimplex"],[3,"RecursionTemplate"],[4,"GJKResult"],[3,"Contact"],[3,"CompositeShapeAgainstAnyDistCostFn"],[3,"CompositeShapeAgainstAnyTOICostFn"],[3,"CompoundPointProjCostFn"],[3,"PointContainementTest"],[3,"BaseMeshPointProjCostFn"],[3,"PointContainementTest"],[3,"PointInterferencesCollector"],[3,"Ray"],[3,"RayIntersection"],[3,"CompoundRayToiCostFn"],[3,"CompoundRayToiAndNormalCostFn"],[3,"BaseMeshRayToiCostFn"],[3,"BaseMeshRayToiAndNormalCostFn"],[3,"BaseMeshRayToiAndNormalAndUVsCostFn"],[3,"RayIntersectionCostFn"],[3,"RayInterferencesCollector"],[8,"PointQuery"],[8,"RayCast"],[8,"CollisionDispatcher"],[8,"ContactSignalHandler"],[8,"CollisionDetector"],[8,"BroadPhase"],[3,"CollisionObject"],[3,"PolylinePattern"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePath"],[4,"IndexBuffer"],[3,"TriMesh"],[3,"Polyline"],[4,"PathSample"],[8,"StrokePattern"],[8,"CurveSampler"],[8,"PolylineCompatibleCap"],[8,"ToPolyline"],[8,"ToTriMesh"]]};
searchIndex['ncollide_pipeline'] = {"items":[[0,"","ncollide_pipeline","Persistent and time-coherent collision detection.",null,null],[0,"broad_phase","","Broad phases.",null,null],[3,"DBVTBroadPhase","ncollide_pipeline::broad_phase","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[11,"new","","Creates a new broad phase based on a Dynamic Bounding Volume Tree.",0,null],[11,"num_interferences","","Number of interferences detected by this broad phase.",0,{"inputs":[{"name":"dbvtbroadphase"}],"output":{"name":"usize"}}],[11,"defered_add","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[11,"defered_remove","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"}],"output":null}],[11,"update","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[11,"defered_set_bounding_volume","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"usize"},{"name":"bv"}],"output":null}],[11,"interferences_with_bounding_volume","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"bv"},{"name":"vec"}],"output":null}],[11,"interferences_with_ray","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"ray"},{"name":"vec"}],"output":null}],[11,"interferences_with_point","","",0,{"inputs":[{"name":"dbvtbroadphase"},{"name":"p"},{"name":"vec"}],"output":null}],[8,"BroadPhase","","Trait all broad phase must implement.",null,null],[10,"defered_add","","Tells the broad phase to add an element during the next update.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[10,"defered_remove","","Tells the broad phase to remove an element during the next update.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"}],"output":null}],[10,"defered_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",1,{"inputs":[{"name":"broadphase"},{"name":"usize"},{"name":"bv"}],"output":null}],[10,"update","","Updates the object additions, removals, and interferences detection.",1,{"inputs":[{"name":"broadphase"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",1,{"inputs":[{"name":"broadphase"},{"name":"bv"},{"name":"vec"}],"output":null}],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",1,{"inputs":[{"name":"broadphase"},{"name":"ray"},{"name":"vec"}],"output":null}],[10,"interferences_with_point","","Collects every object which might contain a given point.",1,{"inputs":[{"name":"broadphase"},{"name":"p"},{"name":"vec"}],"output":null}],[0,"narrow_phase","ncollide_pipeline","Collision detection algorithms and structure for the Narrow Phase.",null,null],[3,"BallBall","ncollide_pipeline::narrow_phase","Collision detector between two balls.",null,null],[3,"PlaneSupportMap","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapPlane","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapSupportMap","","Persistent collision detector between two shapes having a support mapping function.",null,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[3,"OneShotContactManifoldGenerator","","Contact manifold generator producing a full manifold at the first update.",null,null],[3,"CompositeShapeRepr","","Collision detector between a concave shape and another shape.",null,null],[3,"ReprCompositeShape","","Collision detector between a shape and a concave shape.",null,null],[3,"BasicCollisionDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[11,"clone","","",2,{"inputs":[{"name":"ballball"}],"output":{"name":"ballball"}}],[11,"new","","Creates a new persistent collision detector between two balls.",2,null],[11,"update","","",2,{"inputs":[{"name":"ballball"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",2,{"inputs":[{"name":"ballball"}],"output":{"name":"usize"}}],[11,"colls","","",2,{"inputs":[{"name":"ballball"},{"name":"vec"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"planesupportmap"}],"output":{"name":"planesupportmap"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support\nmapping function.",3,null],[11,"clone","","",4,{"inputs":[{"name":"supportmapplane"}],"output":{"name":"supportmapplane"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support\nmapping function.",4,null],[11,"update","","",3,{"inputs":[{"name":"planesupportmap"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",3,{"inputs":[{"name":"planesupportmap"}],"output":{"name":"usize"}}],[11,"colls","","",3,{"inputs":[{"name":"planesupportmap"},{"name":"vec"}],"output":null}],[11,"update","","",4,{"inputs":[{"name":"supportmapplane"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",4,{"inputs":[{"name":"supportmapplane"}],"output":{"name":"usize"}}],[11,"colls","","",4,{"inputs":[{"name":"supportmapplane"},{"name":"vec"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"supportmapsupportmap"}],"output":{"name":"supportmapsupportmap"}}],[11,"new","","Creates a new persistant collision detector between two shapes with support mapping\nfunctions.",5,null],[11,"update","","",5,{"inputs":[{"name":"supportmapsupportmap"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",5,{"inputs":[{"name":"supportmapsupportmap"}],"output":{"name":"usize"}}],[11,"colls","","",5,{"inputs":[{"name":"supportmapsupportmap"},{"name":"vec"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"decode","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new incremental contact manifold generator.",6,null],[11,"get_sub_collision","","Gets a collision from the sub-detector used by this manifold generator. This does not\nupdate the manifold itself.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"option"}}],[11,"add_new_contacts","","Updates the current manifold by adding one point.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"update_contacts","","Updates the contacts already existing on this manifold.",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"m"},{"name":"m"}],"output":null}],[11,"update","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"}],"output":{"name":"usize"}}],[11,"colls","","",6,{"inputs":[{"name":"incrementalcontactmanifoldgenerator"},{"name":"vec"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"decode","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new one shot contact manifold generator.",7,null],[11,"update","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"}],"output":{"name":"usize"}}],[11,"colls","","",7,{"inputs":[{"name":"oneshotcontactmanifoldgenerator"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new collision detector between a concave shape and another shape.",8,null],[11,"new","","Creates a new collision detector between a shape and a concave shape.",9,null],[11,"update","","",8,{"inputs":[{"name":"compositeshaperepr"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",8,{"inputs":[{"name":"compositeshaperepr"}],"output":{"name":"usize"}}],[11,"colls","","",8,{"inputs":[{"name":"compositeshaperepr"},{"name":"vec"}],"output":null}],[11,"update","","",9,{"inputs":[{"name":"reprcompositeshape"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"num_colls","","",9,{"inputs":[{"name":"reprcompositeshape"}],"output":{"name":"usize"}}],[11,"colls","","",9,{"inputs":[{"name":"reprcompositeshape"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new basic collision dispatcher.",10,{"inputs":[{"name":"basiccollisiondispatcher"},{"name":"n"}],"output":{"name":"basiccollisiondispatcher"}}],[11,"get_collision_algorithm","","",10,{"inputs":[{"name":"basiccollisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[6,"CollisionAlgorithm","","",null,null],[8,"CollisionDetector","","Trait of the algorithms executed during the so-called Narrow Phase.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",11,{"inputs":[{"name":"collisiondetector"},{"name":"collisiondispatcher"},{"name":"m"},{"name":"repr"},{"name":"m"},{"name":"repr"}],"output":{"name":"bool"}}],[10,"num_colls","","The number of collision detected during the last update.",11,{"inputs":[{"name":"collisiondetector"}],"output":{"name":"usize"}}],[10,"colls","","Collects the collisions detected during the last update.",11,{"inputs":[{"name":"collisiondetector"},{"name":"vec"}],"output":null}],[8,"CollisionDispatcher","","",null,null],[10,"get_collision_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",12,{"inputs":[{"name":"collisiondispatcher"},{"name":"reprdesc"},{"name":"reprdesc"}],"output":{"name":"option"}}],[8,"ContactSignalHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact","","Activate an action for when two objects start or stop to be close to each other.",13,{"inputs":[{"name":"contactsignalhandler"},{"name":"b"},{"name":"b"},{"name":"bool"}],"output":null}],[0,"world","ncollide_pipeline","High level API to detect collisions in large, complex scenes.",null,null],[3,"CollisionObject","ncollide_pipeline::world","A stand-alone object that has a position and a shape.",null,null],[12,"position","","The position of the collision object.",14,null],[12,"shape","","The shape of the collision object.",14,null],[12,"collision_groups","","The collision groups of the collision object.",14,null],[12,"data","","The data associated to this object.",14,null],[3,"CollisionGroups","","30 groups of collision used to filter which object collide with which other one.",null,null],[3,"CollisionObjectsDispatcher","","Collision detector dispatcher for collision objects.",null,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[11,"new","","Creates a new collision object.",14,{"inputs":[{"name":"collisionobject"},{"name":"m"},{"name":"arc"},{"name":"collisiongroups"},{"name":"t"}],"output":{"name":"collisionobject"}}],[11,"fmt","","",15,{"inputs":[{"name":"collisiongroups"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"collisiongroups"}],"output":{"name":"collisiongroups"}}],[11,"decode","","",15,{"inputs":[{"name":"collisiongroups"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"collisiongroups"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new `CollisionGroups` that enables collisions with everything except\nself-collision.",15,{"inputs":[{"name":"collisiongroups"}],"output":{"name":"collisiongroups"}}],[11,"new_with_groups","","Creates a new `CollisionGroups` that enables collisions with the given groups.",15,null],[11,"new_without_groups","","Creates a new `CollisionGroups` that enables collisions with every group but the given\nones.",15,null],[11,"enable_collisions_with_all_groups","","Enables collision with all groups.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"disable_collisions_with_all_groups","","Disables collision with all groups.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"enable_collisions_with_group","","Enable collision detection with a specific group.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":null}],[11,"disable_collisions_with_group","","Disables collision detection with a specific group.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":null}],[11,"enable_self_collision","","Enables self collision detection.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"disable_self_collision","","Disables self collision detection.",15,{"inputs":[{"name":"collisiongroups"}],"output":null}],[11,"can_collide_with_group","","Tests whether collisions with a given group is enabled.",15,{"inputs":[{"name":"collisiongroups"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_collide_with_groups","","Tests whether two collision groups have at least one group in common.",15,{"inputs":[{"name":"collisiongroups"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_collide_with_self","","Tests whether self-collision is enabled.",15,{"inputs":[{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CollisionObjectsDispatcher`.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"box"}],"output":{"name":"collisionobjectsdispatcher"}}],[11,"update","","Updates the contact pairs.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"usize"}],"output":null}],[11,"contact_pairs","","Iterates through all the contact pairs.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"f"}],"output":null}],[11,"contacts","","Calls a closures on each contact between two objects.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"f"}],"output":null}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"str"},{"name":"box"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"str"}],"output":null}],[11,"handle_proximity","","Creates/removes the persistant collision detector associated to a given pair of objects.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"},{"name":"bool"}],"output":null}],[11,"is_proximity_allowed","","Tests if two objects can be tested for mutual collision.",16,{"inputs":[{"name":"collisionobjectsdispatcher"},{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"new","","Creates a new collision world.",17,null],[11,"add","","Adds a collision object to the world.",17,{"inputs":[{"name":"collisionworld"},{"name":"usize"},{"name":"m"},{"name":"arc"},{"name":"collisiongroups"},{"name":"t"}],"output":null}],[11,"remove","","Remove a collision object from the world.",17,{"inputs":[{"name":"collisionworld"},{"name":"usize"}],"output":null}],[11,"update","","Updates the collision world.",17,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"defered_set_position","","Sets the position the collision object attached to the specified object will have during\nthe next update.",17,{"inputs":[{"name":"collisionworld"},{"name":"usize"},{"name":"m"}],"output":null}],[11,"register_contact_signal_handler","","Registers a handler for contact start/stop events.",17,{"inputs":[{"name":"collisionworld"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_signal_handler","","Unregisters a handler for contact start/stop events.",17,{"inputs":[{"name":"collisionworld"},{"name":"str"}],"output":null}],[11,"perform_position_update","","Executes the position updates.",17,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"perform_broad_phase","","Executes the broad phase of the collision detection pipeline.",17,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"perform_narrow_phase","","Executes the narrow phase of the collision detection pipeline.",17,{"inputs":[{"name":"collisionworld"}],"output":null}],[11,"contact_pairs","","Iterats through all the contact pairs.",17,{"inputs":[{"name":"collisionworld"},{"name":"f"}],"output":null}],[11,"contacts","","Collects every contact detected since the last update.",17,{"inputs":[{"name":"collisionworld"},{"name":"f"}],"output":null}],[11,"interferences_with_ray","","Computes the interferences between every rigid bodies of a given broad phase, and a ray.",17,{"inputs":[{"name":"collisionworld"},{"name":"ray"},{"name":"f"}],"output":null}],[11,"interferences_with_point","","Computes the interferences between every rigid bodies of a given broad phase, and a point.",17,{"inputs":[{"name":"collisionworld"},{"name":"p"},{"name":"f"}],"output":null}],[11,"interferences_with_aabb","","Computes the interferences between every rigid bodies of a given broad phase, and a aabb.",17,{"inputs":[{"name":"collisionworld"},{"name":"aabb"},{"name":"f"}],"output":null}],[6,"BroadPhaseObject","","Type of the broad phase trait-object used by the collision world.",null,null]],"paths":[[3,"DBVTBroadPhase"],[8,"BroadPhase"],[3,"BallBall"],[3,"PlaneSupportMap"],[3,"SupportMapPlane"],[3,"SupportMapSupportMap"],[3,"IncrementalContactManifoldGenerator"],[3,"OneShotContactManifoldGenerator"],[3,"CompositeShapeRepr"],[3,"ReprCompositeShape"],[3,"BasicCollisionDispatcher"],[8,"CollisionDetector"],[8,"CollisionDispatcher"],[8,"ContactSignalHandler"],[3,"CollisionObject"],[3,"CollisionGroups"],[3,"CollisionObjectsDispatcher"],[3,"CollisionWorld"]]};
searchIndex['ncollide_transformation'] = {"items":[[0,"","ncollide_transformation","Transformation, simplification and decomposition of meshes.",null,null],[5,"hacd","","Approximate convex decomposition of a triangle mesh.",null,null],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null],[5,"convex_hull2","","Computes the convex hull of a set of 2d points.",null,null],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull\nvertices.",null,null],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::ball_to_trimesh","",0,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::capsule_to_trimesh","",1,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::cone_to_trimesh","",2,{"inputs":[{"name":"cone3"},{"name":"u32"}],"output":{"name":"trimesh3"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::cuboid_to_trimesh","",3,null],[11,"to_trimesh","ncollide_transformation::to_trimesh::cylinder_to_trimesh","",4,{"inputs":[{"name":"cylinder3"},{"name":"u32"}],"output":{"name":"trimesh3"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::mesh_to_trimesh","",5,null],[11,"to_trimesh","ncollide_entities::shape::minkowski_sum","",6,null],[11,"to_trimesh","ncollide_entities::shape::reflection","",7,{"inputs":[{"name":"reflection"},{"name":"i"}],"output":{"name":"trimesh"}}],[11,"to_trimesh","ncollide_transformation::to_trimesh::triangle_to_trimesh","",8,null],[11,"to_polyline","ncollide_transformation::to_polyline::ball_to_polyline","",9,{"inputs":[{"name":"ball2"},{"name":"u32"}],"output":{"name":"polyline2"}}],[11,"to_polyline","ncollide_transformation::to_polyline::capsule_to_polyline","",10,{"inputs":[{"name":"capsule2"},{"name":"u32"}],"output":{"name":"polyline2"}}],[11,"to_polyline","ncollide_transformation::to_polyline::cone_to_polyline","",11,null],[11,"to_polyline","ncollide_transformation::to_polyline::cuboid_to_polyline","",12,null],[11,"to_polyline","ncollide_transformation::to_polyline::cylinder_to_polyline","",13,null],[11,"to_polyline","ncollide_entities::shape::minkowski_sum","",6,null],[11,"to_polyline","ncollide_entities::shape::reflection","",7,{"inputs":[{"name":"reflection"},{"name":"i"}],"output":{"name":"polyline"}}],[11,"to_polyline","ncollide_transformation::to_polyline::segment_to_polyline","",14,null],[11,"to_polyline","ncollide_transformation::to_polyline::triangle_to_polyline","",15,null],[8,"ToTriMesh","ncollide_transformation","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",16,{"inputs":[{"name":"totrimesh"},{"name":"i"}],"output":{"name":"trimesh"}}],[8,"ToPolyline","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",17,{"inputs":[{"name":"topolyline"},{"name":"i"}],"output":{"name":"polyline"}}]],"paths":[[6,"Ball3"],[6,"Capsule3"],[6,"Cone3"],[6,"Cuboid3"],[6,"Cylinder3"],[6,"TriMesh3"],[3,"MinkowskiSum"],[3,"Reflection"],[6,"Triangle3"],[6,"Ball2"],[6,"Capsule2"],[6,"Cone2"],[6,"Cuboid2"],[6,"Cylinder2"],[6,"Segment2"],[6,"Triangle2"],[8,"ToTriMesh"],[8,"ToPolyline"]]};
searchIndex['ncollide_queries'] = {"items":[[0,"","ncollide_queries","Geometric queries.",null,null],[0,"geometry","","Non-persistant pairwise geometric queries.",null,null],[3,"Contact","ncollide_queries::geometry","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",0,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",0,null],[12,"normal","","Contact normal",0,null],[12,"depth","","Penetration depth",0,null],[5,"contact","","Computes one contact point between two shapes.",null,null],[5,"distance","","Computes the minimum distance separating two shapes.",null,null],[5,"time_of_impact","","Computes the smallest time of impact of two shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[0,"algorithms","","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide_queries::geometry::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide_queries::geometry::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":null}],[10,"add_point","","Adds a point to the simplex.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":null}],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is\nmutable for optimization purpose.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",1,{"inputs":[{"name":"simplex"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",1,{"inputs":[{"name":"simplex"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",1,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",1,{"inputs":[{"name":"simplex"},{"name":"fn"}],"output":null}],[0,"johnson_simplex","ncollide_queries::geometry::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"JohnsonSimplex","ncollide_queries::geometry::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex.",null,null],[11,"clone","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"decode","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"recursiontemplate"}],"output":{"name":"recursiontemplate"}}],[11,"eq","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"recursiontemplate"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",3,{"inputs":[{"name":"recursiontemplate"},{"name":"usize"}],"output":{"name":"arc"}}],[11,"new","","Creates a new, empty, Johnson simplex.",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"johnsonsimplex"}}],[11,"reset","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":null}],[11,"dimension","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",2,null],[11,"contains_point","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"p"}],"output":null}],[11,"project_origin_and_reduce","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"project_origin","","",2,{"inputs":[{"name":"johnsonsimplex"}],"output":{"name":"p"}}],[11,"modify_pnts","","",2,{"inputs":[{"name":"johnsonsimplex"},{"name":"fn"}],"output":null}],[0,"gjk","ncollide_queries::geometry::algorithms","The Gilbert–Johnson–Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide_queries::geometry::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",4,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",4,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is to far away from the polytope.",4,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK\nalgorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK.\nalgorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"gjkresult"}],"output":{"name":"gjkresult"}}],[11,"decode","","",4,{"inputs":[{"name":"gjkresult"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"gjkresult"},{"name":"__s"}],"output":{"name":"result"}}],[0,"minkowski_sampling","ncollide_queries::geometry::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide_queries::geometry::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide_queries::geometry","Implementation details of the `contact` and `contacts` functions.",null,null],[5,"ball_against_ball","ncollide_queries::geometry::contacts_internal","Contact between balls.",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `Convex`, etc.)",null,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, Convex, etc.)",null,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, Convex, etc.) and a plane.",null,null],[5,"composite_shape_against_any","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"any_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[11,"decode","ncollide_queries::geometry","",0,{"inputs":[{"name":"contact"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"contact"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"contact"}],"output":{"name":"contact"}}],[11,"eq","","",0,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"contact"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"contact"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new contact.",0,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",0,{"inputs":[{"name":"contact"}],"output":null}],[0,"distance_internal","","Implementation details of the `distance` function.",null,null],[5,"ball_against_ball","ncollide_queries::geometry::distance_internal","Distance between balls.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[5,"support_map_against_support_map_with_params","","Distance between support-mapped shapes.",null,null],[5,"plane_against_support_map","","Distance between a plane and a support-mapped shape.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"composite_shape_against_any","","Smallest distance between a composite shape and any other shape.",null,null],[5,"any_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[0,"time_of_impact_internal","ncollide_queries::geometry","Implementation details of the `time_of_impact` function.",null,null],[5,"ball_against_ball","ncollide_queries::geometry::time_of_impact_internal","Time Of Impact of two balls under translational movement.",null,{"inputs":[{"name":"p"},{"name":"vect"},{"name":"ball"},{"name":"p"},{"name":"vect"},{"name":"ball"}],"output":{"name":"option"}}],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"plane_against_support_map","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"plane"},{"name":"m"},{"name":"vect"},{"name":"g"}],"output":{"name":"option"}}],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g"},{"name":"m"},{"name":"vect"},{"name":"plane"}],"output":{"name":"option"}}],[5,"composite_shape_against_any","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[5,"any_against_composite_shape","","Time Of Impact of any shape with a composite shape, under translational movement.",null,{"inputs":[{"name":"m"},{"name":"vect"},{"name":"g1"},{"name":"m"},{"name":"vect"},{"name":"g2"}],"output":{"name":"option"}}],[0,"point","ncollide_queries","Point inclusion and projection.",null,null],[3,"PointInterferencesCollector","ncollide_queries::point","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[11,"project_point","ncollide_entities::shape::plane","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",5,null],[11,"contains_point","","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::ball","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",6,null],[11,"contains_point","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cuboid","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",7,null],[11,"contains_point","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::bounding_volume::aabb","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",8,null],[11,"contains_point","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::bounding_volume::bounding_sphere","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",9,null],[11,"contains_point","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cylinder","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",10,null],[11,"contains_point","","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::cone","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",11,null],[11,"contains_point","","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::capsule","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",12,null],[11,"contains_point","","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::convex","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",13,null],[11,"contains_point","","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::segment","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",14,null],[11,"contains_point","","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::triangle","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",15,null],[11,"contains_point","","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::compound","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",16,null],[11,"contains_point","","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::base_mesh","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",17,null],[11,"contains_point","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::trimesh","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",18,null],[11,"contains_point","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_entities::shape::polyline","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",19,null],[11,"contains_point","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_queries::point","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[11,"distance_to_point","","",20,null],[11,"contains_point","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PointInterferencesCollector`.",21,{"inputs":[{"name":"pointinterferencescollector"},{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"visit_internal","","",21,{"inputs":[{"name":"pointinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",21,{"inputs":[{"name":"pointinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"PointQuery","","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",22,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"p"}}],[10,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",22,null],[10,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",22,{"inputs":[{"name":"pointquery"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[0,"ray","ncollide_queries","Ray-casting related definitions and implementations.",null,null],[3,"Ray","ncollide_queries::ray","A Ray.",null,null],[12,"orig","","Starting point of the ray.",23,null],[12,"dir","","Direction of the ray.",23,null],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",24,null],[12,"normal","","The normal at the intersection point.",24,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape\ndo not support texture coordinates.",24,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,{"inputs":[{"name":"p"},{"name":"vect"},{"name":"ray"}],"output":{"name":"option"}}],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[11,"toi_and_normal_with_ray","ncollide_entities::shape::plane","",5,{"inputs":[{"name":"plane"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::ball","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",6,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::cuboid","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",7,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::bounding_volume::aabb","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",8,{"inputs":[{"name":"aabb"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::bounding_volume::bounding_sphere","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",9,{"inputs":[{"name":"boundingsphere"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::cylinder","",10,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::cone","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::capsule","",12,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::convex","",13,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::segment","",14,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::minkowski_sum","",25,{"inputs":[{"name":"minkowskisum"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","ncollide_entities::shape::triangle","",15,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::compound","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",16,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::base_mesh","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",17,{"inputs":[{"name":"basemesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::trimesh","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",18,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_entities::shape::polyline","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",19,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_queries::ray","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",20,{"inputs":[{"name":"repr"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `BestRayInterferenceSearch`.",26,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"compute_bv_cost","","",26,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",26,{"inputs":[{"name":"rayintersectioncostfn"},{"name":"b"}],"output":{"name":"option"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",27,{"inputs":[{"name":"rayinterferencescollector"},{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"visit_internal","","",27,{"inputs":[{"name":"rayinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",27,{"inputs":[{"name":"rayinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[6,"Ray3","","A 3D ray.",null,null],[6,"Ray2","","A 2D ray.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed\nshape and a ray.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",28,{"inputs":[{"name":"raycast"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}]],"paths":[[3,"Contact"],[8,"Simplex"],[3,"JohnsonSimplex"],[3,"RecursionTemplate"],[4,"GJKResult"],[3,"Plane"],[3,"Ball"],[3,"Cuboid"],[3,"AABB"],[3,"BoundingSphere"],[3,"Cylinder"],[3,"Cone"],[3,"Capsule"],[3,"Convex"],[3,"Segment"],[3,"Triangle"],[3,"Compound"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[8,"Repr"],[3,"PointInterferencesCollector"],[8,"PointQuery"],[3,"Ray"],[3,"RayIntersection"],[3,"MinkowskiSum"],[3,"RayIntersectionCostFn"],[3,"RayInterferencesCollector"],[8,"RayCast"]]};
searchIndex['ncollide_entities'] = {"items":[[0,"","ncollide_entities","Geometric entities manipulated by ncollide.",null,null],[0,"shape","","Collision shapes supported by ncollide.",null,null],[3,"Ball","ncollide_entities::shape","A Ball shape.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Cuboid","","Shape of a box.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Convex","","The implicit convex hull of a set of points.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped shapes.",null,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"Triangle","","A triangle shape.",null,null],[3,"Torus","","A torus.",null,null],[11,"decode","","",0,{"inputs":[{"name":"plane"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"fmt","","",0,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"new","","Builds a new plane from its center and its normal.",0,{"inputs":[{"name":"plane"},{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",0,{"inputs":[{"name":"plane"},{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",0,{"inputs":[{"name":"plane"}],"output":{"name":"v"}}],[11,"decode","","",1,{"inputs":[{"name":"cuboid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"cuboid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cuboid"}],"output":{"name":"cuboid"}}],[11,"fmt","","",1,{"inputs":[{"name":"cuboid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"cuboid"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each\naxis. Each half-extent must be greater than 0.04.",1,{"inputs":[{"name":"cuboid"},{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",1,{"inputs":[{"name":"cuboid"}],"output":{"name":"v"}}],[11,"fmt","","",2,{"inputs":[{"name":"minkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",2,{"inputs":[{"name":"minkowskisum"},{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",2,{"inputs":[{"name":"minkowskisum"}],"output":{"name":"g2"}}],[11,"fmt","","",3,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is\nimplicit, this is done in constant time.",3,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",3,{"inputs":[{"name":"annotatedminkowskisum"}],"output":{"name":"g2"}}],[11,"decode","","",4,{"inputs":[{"name":"segment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"segment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"fmt","","",4,{"inputs":[{"name":"segment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"segment"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"new","","Creates a new segment from two points.",4,{"inputs":[{"name":"segment"},{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",4,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",4,{"inputs":[{"name":"segment"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",4,null],[11,"decode","","",5,{"inputs":[{"name":"triangle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"triangle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"triangle"}],"output":{"name":"triangle"}}],[11,"fmt","","",5,{"inputs":[{"name":"triangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"triangle"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"new","","Creates a triangle from three points.",5,{"inputs":[{"name":"triangle"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",5,{"inputs":[{"name":"triangle"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"basemesh"}}],[11,"new","","Builds a new mesh.",6,{"inputs":[{"name":"basemesh"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",6,null],[11,"indices","","The indices of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",6,{"inputs":[{"name":"basemesh"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",6,{"inputs":[{"name":"basemesh"},{"name":"usize"}],"output":{"name":"e"}}],[11,"clone","","",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Builds a new mesh.",7,{"inputs":[{"name":"trimesh"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",7,null],[11,"indices","","The indices of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",7,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"clone","","",8,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Builds a new mesh.",8,{"inputs":[{"name":"polyline"},{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",8,null],[11,"indices","","The indices of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",8,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",8,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"decode","","",9,{"inputs":[{"name":"ball"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"ball"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"ball"}],"output":{"name":"ball"}}],[11,"fmt","","",9,{"inputs":[{"name":"ball"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"ball"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"new","","Creates a new ball from its radius and center.",9,{"inputs":[{"name":"ball"},{"name":"n"}],"output":{"name":"ball"}}],[11,"radius","","The ball radius.",9,{"inputs":[{"name":"ball"}],"output":{"name":"n"}}],[11,"decode","","",10,{"inputs":[{"name":"capsule"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"capsule"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"capsule"}],"output":{"name":"capsule"}}],[11,"fmt","","",10,{"inputs":[{"name":"capsule"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"capsule"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"new","","Creates a new capsule.",10,{"inputs":[{"name":"capsule"},{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",10,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule's rounded part.",10,{"inputs":[{"name":"capsule"}],"output":{"name":"n"}}],[11,"decode","","",11,{"inputs":[{"name":"cone"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"cone"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"cone"}],"output":{"name":"cone"}}],[11,"fmt","","",11,{"inputs":[{"name":"cone"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"cone"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cone.",11,{"inputs":[{"name":"cone"},{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",11,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",11,{"inputs":[{"name":"cone"}],"output":{"name":"n"}}],[11,"decode","","",12,{"inputs":[{"name":"cylinder"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"fmt","","",12,{"inputs":[{"name":"cylinder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"new","","Creates a new cylinder.",12,{"inputs":[{"name":"cylinder"},{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",12,{"inputs":[{"name":"cylinder"}],"output":{"name":"n"}}],[11,"fmt","","",13,{"inputs":[{"name":"reflection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit,\nthe reflection computation is done in constant time.",13,{"inputs":[{"name":"reflection"},{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",13,{"inputs":[{"name":"reflection"}],"output":{"name":"g"}}],[11,"decode","","",14,{"inputs":[{"name":"torus"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"torus"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"torus"}],"output":{"name":"torus"}}],[11,"fmt","","",14,{"inputs":[{"name":"torus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"torus"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"new","","Creates a new torus with the given radiuses.",14,{"inputs":[{"name":"torus"},{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",14,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",14,{"inputs":[{"name":"torus"}],"output":{"name":"n"}}],[11,"clone","","",15,{"inputs":[{"name":"compound"}],"output":{"name":"compound"}}],[11,"new","","Builds a new compound shape.",15,{"inputs":[{"name":"compound"},{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",15,null],[11,"bvt","","The optimization structure used by this compound shape.",15,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",15,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",15,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"decode","","",16,{"inputs":[{"name":"convex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"convex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"convex"}],"output":{"name":"convex"}}],[11,"fmt","","",16,{"inputs":[{"name":"convex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"convex"},{"name":"convex"}],"output":{"name":"bool"}}],[11,"new","","Creates a polytope from a set of point.",16,{"inputs":[{"name":"convex"},{"name":"vec"}],"output":{"name":"convex"}}],[11,"points","","The list of points of this convex polytope.",16,null],[11,"map_part_at","","",15,{"inputs":[{"name":"compound"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",15,{"inputs":[{"name":"compound"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",15,{"inputs":[{"name":"compound"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",15,{"inputs":[{"name":"compound"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",7,{"inputs":[{"name":"trimesh"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",7,{"inputs":[{"name":"trimesh"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",8,{"inputs":[{"name":"polyline"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",8,{"inputs":[{"name":"polyline"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",8,{"inputs":[{"name":"polyline"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",8,{"inputs":[{"name":"polyline"}],"output":{"name":"bvt"}}],[6,"Ball2","","A 2D ball.",null,null],[6,"Plane2","","A 2D plane.",null,null],[6,"Cuboid2","","A 2D cuboid.",null,null],[6,"Capsule2","","A 2D capsule.",null,null],[6,"Cone2","","A 2D cone.",null,null],[6,"Cylinder2","","A 2D cylinder.",null,null],[6,"Convex2","","A 2D convex polytope.",null,null],[6,"Segment2","","A 2D segment.",null,null],[6,"Triangle2","","A 2D triangle.",null,null],[6,"Polyline2","","A 2D polyline.",null,null],[6,"Compound2","","A 2D compound shape.",null,null],[6,"Ball3","","A 3D ball.",null,null],[6,"Plane3","","A 3D plane.",null,null],[6,"Cuboid3","","A 3D cuboid.",null,null],[6,"Capsule3","","A 3D capsule.",null,null],[6,"Cone3","","A 3D cone.",null,null],[6,"Cylinder3","","A 3D cylinder.",null,null],[6,"Convex3","","A 3D convex polytope.",null,null],[6,"Segment3","","A 3D segment.",null,null],[6,"Triangle3","","A 3D triangle.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Compound3","","A 3D compound shape.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",17,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",18,{"inputs":[{"name":"compositeshape"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave\nshape.",18,{"inputs":[{"name":"compositeshape"},{"name":"m"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",18,{"inputs":[{"name":"compositeshape"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",18,{"inputs":[{"name":"compositeshape"}],"output":{"name":"bvt"}}],[0,"support_map","ncollide_entities","Definition of support functions.",null,null],[5,"cso_support_point","ncollide_entities::support_map","Computes the support point of the CSO `g1 - g2` on a given direction.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"vect"}],"output":{"name":"annotatedpoint"}}],[5,"point_cloud_support_point","","Computes the support point of a cloud of points.",null,null],[11,"support_point","ncollide_entities::shape","",1,{"inputs":[{"name":"cuboid"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",9,{"inputs":[{"name":"ball"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",10,{"inputs":[{"name":"capsule"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",11,{"inputs":[{"name":"cone"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",16,{"inputs":[{"name":"convex"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",13,{"inputs":[{"name":"reflection"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",5,{"inputs":[{"name":"triangle"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",4,{"inputs":[{"name":"segment"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",2,{"inputs":[{"name":"minkowskisum"},{"name":"identity"},{"name":"vect"}],"output":{"name":"p"}}],[11,"support_point","","",3,{"inputs":[{"name":"annotatedminkowskisum"},{"name":"identity"},{"name":"vect"}],"output":{"name":"annotatedpoint"}}],[8,"SupportMap","ncollide_entities::support_map","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a\nfunction associating a vector to the shape point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\nshape-dependent. Use `support_point` to sample the complete shape.",19,{"inputs":[{"name":"supportmap"},{"name":"m"},{"name":"vect"}],"output":{"name":"p"}}],[0,"bounding_volume","ncollide_entities","Bounding volumes.",null,null],[3,"AABB","ncollide_entities::bounding_volume","An Axis Aligned Bounding Box.",null,null],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[5,"implicit_shape_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[11,"new","","Creates a new `BoundingVolumeInterferencesCollector`.",20,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",20,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",20,{"inputs":[{"name":"boundingvolumeinterferencescollector"},{"name":"b"},{"name":"bv"}],"output":null}],[11,"aabb","ncollide_entities::shape","",1,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",11,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",10,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",5,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",4,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",9,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",0,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",16,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",15,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"aabb","","",6,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"aabb","","",8,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",1,{"inputs":[{"name":"cuboid"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",11,{"inputs":[{"name":"cone"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",9,{"inputs":[{"name":"ball"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",12,{"inputs":[{"name":"cylinder"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",10,{"inputs":[{"name":"capsule"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",0,{"inputs":[{"name":"plane"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",16,{"inputs":[{"name":"convex"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",15,{"inputs":[{"name":"compound"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",5,{"inputs":[{"name":"triangle"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",4,{"inputs":[{"name":"segment"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",6,{"inputs":[{"name":"basemesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",7,{"inputs":[{"name":"trimesh"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_sphere","","",8,{"inputs":[{"name":"polyline"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[6,"BoundingSphere2","ncollide_entities::bounding_volume","A 2D bounding sphere.",null,null],[6,"AABB2","","A 2D AABB.",null,null],[6,"BoundingSphere3","","A 3D bounding sphere:",null,null],[6,"AABB3","","A 3D AABB.",null,null],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The object bounding volume.",21,{"inputs":[{"name":"hasboundingvolume"}],"output":{"name":"bv"}}],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"intersects","","Checks if this bounding volume intersect with another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":null}],[10,"merged","","Merges this bounding volume with another one.",22,{"inputs":[{"name":"boundingvolume"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":null}],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[10,"tighten","","Tighten this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":null}],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",22,{"inputs":[{"name":"boundingvolume"},{"name":"n"}],"output":{"name":"self"}}],[8,"HasAABB","","Trait of objects that can be bounded by an AABB.",null,null],[10,"aabb","","The object’s AABB.",23,{"inputs":[{"name":"hasaabb"},{"name":"m"}],"output":{"name":"aabb"}}],[8,"HasBoundingSphere","","Trait implemented by objects having a bounding sphere.",null,null],[10,"bounding_sphere","","The object bounding sphere.",24,{"inputs":[{"name":"hasboundingsphere"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[0,"partitioning","ncollide_entities","Spatial partitioning tools.",null,null],[3,"DBVT","ncollide_entities::partitioning","A Dynamic Bounding Volume Tree.",null,null],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",25,null],[12,"center","","The center of this node bounding volume.",25,null],[12,"object","","An user-defined object.",25,null],[3,"BVT","","A Boundig Volume Tree.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",26,null],[13,"Parts","","Result of the partitioning of several elements.",26,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",27,null],[13,"Leaf","","A leaf.",27,null],[5,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[5,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",null,null],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",28,{"inputs":[{"name":"dbvt"}],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",28,{"inputs":[{"name":"dbvt"},{"name":"rc"}],"output":null}],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",28,{"inputs":[{"name":"dbvt"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",28,{"inputs":[{"name":"dbvt"},{"name":"rc"}],"output":null}],[11,"visit","","Visit this tree using… a visitor!",28,{"inputs":[{"name":"dbvt"},{"name":"vis"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"dbvtleaf"}}],[11,"new","","Creates a new leaf.",25,{"inputs":[{"name":"dbvtleaf"},{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",25,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",25,{"inputs":[{"name":"dbvtleaf"}],"output":{"name":"bool"}}],[11,"decode","","",29,{"inputs":[{"name":"bvt"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"bvt"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"bvt"}],"output":{"name":"bvt"}}],[11,"decode","","",27,{"inputs":[{"name":"bvtnode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"bvtnode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bvtnode"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",29,{"inputs":[{"name":"bvt"},{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Visit this tree using… a visitor!",29,{"inputs":[{"name":"bvt"},{"name":"vis"}],"output":null}],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",29,{"inputs":[{"name":"bvt"},{"name":"bvt"},{"name":"vis"}],"output":null}],[11,"best_first_search","","Performs a best-fist-search on the tree.",29,{"inputs":[{"name":"bvt"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",29,{"inputs":[{"name":"bvt"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",29,{"inputs":[{"name":"bvt"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",29,{"inputs":[{"name":"bvt"},{"name":"vec"}],"output":{"name":"bvt"}}],[11,"bounding_volume","","The bounding volume of this node.",27,{"inputs":[{"name":"bvtnode"}],"output":{"name":"bv"}}],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",30,{"inputs":[{"name":"bvtvisitor"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",30,{"inputs":[{"name":"bvtvisitor"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",31,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",31,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":null}],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",31,{"inputs":[{"name":"bvttvisitor"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",31,{"inputs":[{"name":"bvttvisitor"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",32,{"inputs":[{"name":"bvtcostfn"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",32,{"inputs":[{"name":"bvtcostfn"},{"name":"b"}],"output":{"name":"option"}}],[0,"inspection","ncollide_entities","Traits and methods to inspect and retrieve the capabilities and representations of shapes at runtime.",null,null],[5,"maybe_as_composite_shape","ncollide_entities::inspection","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_composite_shape","","Converts a shape to a composite shape if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"composite_shape_repr_id","","Gets the id associated with the `CompositeShape` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[5,"maybe_as_support_map","","Converts a shape to a support map if possible.",null,{"inputs":[{"name":"g"}],"output":{"name":"option"}}],[5,"maybe_repr_desc_as_support_map","","Converts a shape descriptor to a support map if possible.",null,{"inputs":[{"name":"reprdesc"}],"output":{"name":"option"}}],[5,"support_map_repr_id","","Gets the id associated with the `SupportMap` trait.",null,{"inputs":[],"output":{"name":"typeid"}}],[6,"Repr2","","A 2d dynamic representation object.",null,null],[6,"Repr3","","A 3d dynamic representation object.",null,null]],"paths":[[3,"Plane"],[3,"Cuboid"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Segment"],[3,"Triangle"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[3,"Ball"],[3,"Capsule"],[3,"Cone"],[3,"Cylinder"],[3,"Reflection"],[3,"Torus"],[3,"Compound"],[3,"Convex"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"SupportMap"],[3,"BoundingVolumeInterferencesCollector"],[8,"HasBoundingVolume"],[8,"BoundingVolume"],[8,"HasAABB"],[8,"HasBoundingSphere"],[3,"DBVTLeaf"],[4,"BinaryPartition"],[4,"BVTNode"],[3,"DBVT"],[3,"BVT"],[8,"BVTVisitor"],[8,"BVTTVisitor"],[8,"BVTCostFn"]]};
searchIndex['ncollide_procedural'] = {"items":[[0,"","ncollide_procedural","Procedural mesh generation.",null,null],[3,"TriMesh","","Shapeetric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",0,null],[12,"normals","","Coordinates of the mesh normals.",0,null],[12,"uvs","","Textures coordinates of the mesh.",0,null],[12,"indices","","Index buffer of the mesh.",0,null],[3,"Polyline","","Shapeetric description of a polyline.",null,null],[12,"coords","","Coordinates of the polyline vertices.",1,null],[12,"normals","","Coordinates of the polyline normals.",1,null],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",2,null],[13,"Split","","The vertex, normal, and uvs have different indices.",2,null],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"vec3"}],"output":{"name":"trimesh"}}],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,{"inputs":[{"name":"vect"}],"output":{"name":"polyline"}}],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[0,"utils","","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide_procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"n"},{"name":"n"},{"name":"vec"}],"output":null}],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer.\nThe circle is contained on the plane spanned by the `x` and `y` axis.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"n"},{"name":"vec"}],"output":null}],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the\n`base_circle` point in common.\nPushes `nsubdiv - 2` elements to `out`.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"vec"}],"output":null}],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each\nidentical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide_procedural","Path generation.",null,null],[3,"PolylinePattern","ncollide_procedural::path","A pattern composed of polyline and two caps.",null,null],[3,"PolylinePath","","A path with its sample points given by a polyline.",null,null],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[3,"NoCap","","A cap that renders nothing.",null,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",3,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",3,null],[13,"EndPoint","","A point that ends the path currently generated.",3,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",3,null],[11,"new","","Creates a new `NoCap`.",4,{"inputs":[{"name":"nocap"}],"output":{"name":"nocap"}}],[11,"gen_start_cap","","",4,{"inputs":[{"name":"nocap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_end_cap","","",4,{"inputs":[{"name":"nocap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a cap that looks like an arrow.",5,{"inputs":[{"name":"arrowheadcap"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"gen_end_cap","","",5,{"inputs":[{"name":"arrowheadcap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_start_cap","","",5,{"inputs":[{"name":"arrowheadcap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new polyline pattern.",6,{"inputs":[{"name":"polylinepattern"},{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"stroke","","",6,{"inputs":[{"name":"polylinepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new polyline-based path.",7,{"inputs":[{"name":"polylinepath"},{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"next","","",7,{"inputs":[{"name":"polylinepath"}],"output":{"name":"pathsample"}}],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",8,{"inputs":[{"name":"curvesampler"}],"output":{"name":"pathsample"}}],[8,"StrokePattern","","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",9,{"inputs":[{"name":"strokepattern"},{"name":"c"}],"output":{"name":"trimesh"}}],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",10,{"inputs":[{"name":"polylinecompatiblecap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",10,{"inputs":[{"name":"polylinecompatiblecap"},{"name":"u32"},{"name":"polyline"},{"name":"pnt3"},{"name":"vec3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"fmt","ncollide_procedural","",2,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",2,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"vec"}}],[11,"fmt","","",0,{"inputs":[{"name":"trimesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new `TriMesh`.",0,{"inputs":[{"name":"trimesh"},{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"t"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"t"}],"output":null}],[11,"num_triangles","","The number of triangles on this mesh.",0,{"inputs":[{"name":"trimesh"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"r"}],"output":null}],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations\ninfered from the index buffer.",0,{"inputs":[{"name":"trimesh"}],"output":null}],[11,"scale_by","","Scales each vertex of this mesh.",0,{"inputs":[{"name":"trimesh"},{"name":"vect"}],"output":null}],[11,"scale_by_scalar","","Scales each vertex of this mesh.",0,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",0,{"inputs":[{"name":"trimesh"}],"output":null}],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",0,{"inputs":[{"name":"trimesh"},{"name":"bool"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"polyline"}],"output":{"name":"polyline"}}],[11,"new","","Creates a new polyline.",1,{"inputs":[{"name":"polyline"},{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"translate_by","","Translates each vertex of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"t"}],"output":null}],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"r"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",1,{"inputs":[{"name":"polyline"},{"name":"t"}],"output":null}],[11,"scale_by_scalar","","Scales each vertex of this polyline.",1,null],[11,"scale_by","","Scales each vertex of this mesh.",1,{"inputs":[{"name":"polyline"},{"name":"vect"}],"output":null}],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh2","","A 2D triangle mesh.",null,null],[6,"Polyline2","","A 2D polyline.",null,null]],"paths":[[3,"TriMesh"],[3,"Polyline"],[4,"IndexBuffer"],[4,"PathSample"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePattern"],[3,"PolylinePath"],[8,"CurveSampler"],[8,"StrokePattern"],[8,"PolylineCompatibleCap"]]};
searchIndex['ncollide_utils'] = {"items":[[0,"","ncollide_utils","Miscelaneous elementary geometric utilities.",null,null],[3,"BacktrackingLineSearch","","The backtracking line search method.",null,null],[3,"HashablePartialEq","","A structure that implements `Eq` and is hashable even if the wrapped data implements only\n`PartialEq`.",null,null],[5,"center","","Computes the center of a set of point.",null,null],[5,"project_homogeneous","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"project_homogeneous_to","","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component.",null,null],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[5,"is_affinely_dependent_triangle3","","Tests if three 3D points are exactly aligned without the need of the `Cross` trait.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_affinely_dependent_triangle","","Tests if three points are exactly aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"triangle_perimeter","","Computes the perimeter of a triangle.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"binom","","Computes the binomial coefficient C^k_n (\"k among n\").",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"maximize_with_newton","","Maximizes a real function using the Newton method.",null,null],[5,"newton","","Finds the root of a function using the Newton method.",null,null],[5,"minimize_with_bfgs","","Minimizes a function using the bfgs method.",null,null],[5,"bfgs","","Minimizes a function using the quasi-newton BFGS method.",null,{"inputs":[{"name":"usize"},{"name":"ss"},{"name":"v"},{"name":"outerproducttype"},{"name":"f"},{"name":"d"}],"output":{"name":"v"}}],[5,"cov","","Computes the convariance matrix of a set of points.",null,null],[5,"cov_and_center","","Computes the covariance matrix and center of a set of points.",null,null],[5,"center_reduce","","Centers and reduces a set of data.",null,null],[5,"median","","Computes the median of a set of values.",null,null],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"cross3","","A 3d cross product that do not require the `Cross<Self, Self>` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[0,"data","","Data structure utilities.",null,null],[0,"pair","ncollide_utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[3,"Pair","ncollide_utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",0,null],[12,"second","","second object of the pair",0,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[11,"decode","","",0,{"inputs":[{"name":"pair"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"pair"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"pair"}],"output":{"name":"pair"}}],[11,"new","","Builds a new `Pair`.",0,{"inputs":[{"name":"pair"},{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"eq","","",0,{"inputs":[{"name":"pair"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"pairtwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"pairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Creates a new PairTWHash",1,{"inputs":[{"name":"pairtwhash"}],"output":{"name":"pairtwhash"}}],[11,"hash","","",1,{"inputs":[{"name":"pairtwhash"},{"name":"pair"}],"output":{"name":"usize"}}],[0,"hash","ncollide_utils::data","Trait for hash functions.",null,null],[3,"UintPairTWHash","ncollide_utils::data::hash","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"HashFun","","Hash function.",null,null],[10,"hash","","Hash function.",2,{"inputs":[{"name":"hashfun"},{"name":"k"}],"output":{"name":"usize"}}],[11,"decode","","",3,{"inputs":[{"name":"uintpairtwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"uintpairtwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"new","","Creates a new UintPairTWHash.",3,{"inputs":[{"name":"uintpairtwhash"}],"output":{"name":"uintpairtwhash"}}],[11,"hash","","",3,null],[11,"decode","","",4,{"inputs":[{"name":"uinttwhash"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"uinttwhash"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"new","","Creates a new UintTWHash.",4,{"inputs":[{"name":"uinttwhash"}],"output":{"name":"uinttwhash"}}],[11,"hash","","",4,{"inputs":[{"name":"uinttwhash"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide_utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide_utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",5,null],[12,"value","","The value of the entry.",5,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[11,"decode","","",5,{"inputs":[{"name":"entry"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"entry"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"entry"}],"output":{"name":"entry"}}],[11,"decode","","",6,{"inputs":[{"name":"hashmap"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"hashmap"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates a new hash map.",6,{"inputs":[{"name":"hashmap"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",6,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",6,null],[11,"elements_mut","","The elements added to this hash map.",6,null],[11,"len","","The number of elements contained by this hashmap.",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",6,{"inputs":[{"name":"hashmap"}],"output":null}],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",6,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet. If the functions returns `None`, nothing is\ninserted.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",6,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",6,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[0,"owned_allocation_cache","ncollide_utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide_utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[11,"new","","Initializes the cache.",7,{"inputs":[{"name":"ownedallocationcache"}],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",7,{"inputs":[{"name":"ownedallocationcache"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",7,{"inputs":[{"name":"ownedallocationcache"},{"name":"box"}],"output":null}],[11,"clear","","Clears the cache, destroying any stored pointer.",7,{"inputs":[{"name":"ownedallocationcache"}],"output":null}],[0,"vec_slice","ncollide_utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide_utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[11,"new","","Creates a new immutable slice.",8,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",8,null],[11,"len","","The length of this slice.",8,{"inputs":[{"name":"vecslice"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",8,{"inputs":[{"name":"vecslice"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",8,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",8,{"inputs":[{"name":"vecslice"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",9,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",9,null],[11,"len","","The length of this slice.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",9,{"inputs":[{"name":"vecslicemut"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"vecslicemut"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice.\nBoth slices must have the same length.",9,{"inputs":[{"name":"vecslicemut"},{"name":"vecslice"}],"output":null}],[0,"ref_with_cost","ncollide_utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide_utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",10,null],[12,"cost","","The cost of the object.",10,null],[11,"new","","Creates a new reference packed with a cost value.",10,{"inputs":[{"name":"refwithcost"},{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"eq","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"refwithcost"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[0,"uid_remap","ncollide_utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide_utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined\nid of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[11,"decode","","",11,{"inputs":[{"name":"fastkey"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"fastkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"fmt","","",11,{"inputs":[{"name":"fastkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_invalid","","Creates a new invalid key that won't be used by the `UidRemap` structure, ever.",11,{"inputs":[{"name":"fastkey"}],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",11,{"inputs":[{"name":"fastkey"}],"output":{"name":"usize"}}],[11,"clone","","",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"fmt","","",12,{"inputs":[{"name":"uidremap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"uidremap"}}],[11,"new","","Creates an empty `UidRemap`.",12,{"inputs":[{"name":"uidremap"},{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",12,{"inputs":[{"name":"uidremap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value\npresent in the map, that value and its fast key are returned. Otherwise, `None` is\nreturned.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values.\nThe iterator's element type is `&'r O`.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",12,{"inputs":[{"name":"uidremap"}],"output":{"name":"itermut"}}],[11,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"uidremap"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"uidremap"},{"name":"i"}],"output":{"name":"uidremap"}}],[11,"extend","","",12,{"inputs":[{"name":"uidremap"},{"name":"iter"}],"output":null}],[11,"index","","",12,{"inputs":[{"name":"uidremap"},{"name":"fastkey"}],"output":{"name":"o"}}],[0,"vec_map","ncollide_utils::data","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","ncollide_utils::data::vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",13,null],[13,"Occupied","","An occupied Entry",13,null],[11,"default","","",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",14,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":null}],[11,"hash","","",14,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",14,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",13,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",13,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",13,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",15,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",16,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",16,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",14,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",14,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",14,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",14,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",20,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"new","ncollide_utils","Creates a new backtracking line search methods.",22,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"usize"}],"output":{"name":"backtrackinglinesearch"}}],[11,"step_size","","",22,{"inputs":[{"name":"backtrackinglinesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[11,"fmt","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"hashablepartialeq"}}],[11,"decode","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really\nwant to transform the wrapped object's partial equality to an equivalence relation.",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",23,{"inputs":[{"name":"hashablepartialeq"}],"output":{"name":"t"}}],[11,"hash","","",23,{"inputs":[{"name":"hashablepartialeq"},{"name":"h"}],"output":null}],[8,"LineSearch","","Trait for line search methods.",null,null],[10,"step_size","","Gets a near-optimal step size for the next descent.",24,{"inputs":[{"name":"linesearch"},{"name":"f"},{"name":"v"},{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",25,null]],"paths":[[3,"Pair"],[3,"PairTWHash"],[8,"HashFun"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"Entry"],[3,"HashMap"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"RefWithCost"],[3,"FastKey"],[3,"UidRemap"],[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"BacktrackingLineSearch"],[3,"HashablePartialEq"],[8,"LineSearch"],[8,"AsBytes"]]};
searchIndex['ncollide_math'] = {"items":[[0,"","ncollide_math","Trait implemented by the primitive algebraic types used by ncollide.",null,null],[8,"FloatError","","Trait for constant helping handling floating point computations.",null,null],[10,"epsilon","","Epsilon value used to perform fuzzy comparisons with zero.",0,{"inputs":[{"name":"floaterror"}],"output":{"name":"self"}}],[8,"Scalar","","Trait implemented by scalar types.",null,null],[8,"Point","","Trait implemented by point types.",null,null],[16,"Vect","","",1,null],[8,"Vect","","Trait implemented by vector types.",null,null],[16,"Scalar","","",2,null],[8,"Isometry","","Trait implemented by transformation matrices types.",null,null],[8,"HasInertiaMatrix","","Trait implement by vectors that are transformable by the inertia matrix `I`.",null,null]],"paths":[[8,"FloatError"],[8,"Point"],[8,"Vect"]]};
searchIndex['nalgebra'] = {"items":[[0,"","nalgebra","# nalgebra",null,null],[3,"Identity","","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMat","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DVec","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Iso2","","Two dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Iso3","","Three dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Iso4","","Four dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",3,null],[12,"translation","","The translation applicable by this isometry.",3,null],[3,"Mat1","","Square matrix of dimension 1.",null,null],[12,"m11","","",4,null],[3,"Mat2","","Square matrix of dimension 2.",null,null],[12,"m11","","",5,null],[12,"m21","","",5,null],[12,"m12","","",5,null],[12,"m22","","",5,null],[3,"Mat3","","Square matrix of dimension 3.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m31","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[12,"m32","","",6,null],[12,"m13","","",6,null],[12,"m23","","",6,null],[12,"m33","","",6,null],[3,"Mat4","","Square matrix of dimension 4.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m41","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m42","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[12,"m43","","",7,null],[12,"m14","","",7,null],[12,"m24","","",7,null],[12,"m34","","",7,null],[12,"m44","","",7,null],[3,"Mat5","","Square matrix of dimension 5.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m51","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m52","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m53","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[12,"m54","","",8,null],[12,"m15","","",8,null],[12,"m25","","",8,null],[12,"m35","","",8,null],[12,"m45","","",8,null],[12,"m55","","",8,null],[3,"Mat6","","Square matrix of dimension 6.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m61","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m62","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m63","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m64","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[12,"m65","","",9,null],[12,"m16","","",9,null],[12,"m26","","",9,null],[12,"m36","","",9,null],[12,"m46","","",9,null],[12,"m56","","",9,null],[12,"m66","","",9,null],[3,"Rot2","","Two dimensional rotation matrix.",null,null],[3,"Rot3","","Three dimensional rotation matrix.",null,null],[3,"Rot4","","Four dimensional rotation matrix.",null,null],[3,"Vec0","","Vector of dimension 0.",null,null],[3,"Vec1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",10,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",11,null],[12,"y","","Second component of the vector.",11,null],[3,"Vec3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[12,"z","","Third component of the vector.",12,null],[3,"Vec4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[12,"w","","Fourth component of the vector.",13,null],[3,"Vec5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[12,"a","","Fifth of the vector.",14,null],[3,"Vec6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[12,"b","","Sixth component of the vector.",15,null],[3,"Pnt0","","Point of dimension 0.",null,null],[3,"Pnt1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",16,null],[3,"Pnt2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",17,null],[12,"y","","Second component of the point.",17,null],[3,"Pnt3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[12,"z","","Third component of the point.",18,null],[3,"Pnt4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[12,"w","","Fourth component of the point.",19,null],[3,"Pnt5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[12,"a","","Fifth of the point.",20,null],[3,"Pnt6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[12,"b","","Sixth component of the point.",21,null],[3,"Persp3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Ortho3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quat","","A quaternion.",null,null],[12,"w","","The scalar component of the quaternion.",22,null],[12,"i","","The first vector component of the quaternion.",22,null],[12,"j","","The second vector component of the quaternion.",22,null],[12,"k","","The third vector component of the quaternion.",22,null],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"POrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",23,null],[13,"PartialEqual","","Equality relationship.",23,null],[13,"PartialGreater","","Result of a strict comparison.",23,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",23,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"pordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"orig","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dist","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"sqdist","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inv_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rot_mat","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"sqnorm","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"det","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inv","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"cov","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diag","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dim","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"clone","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_fn","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"new_identity","","Builds an identity matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",24,null],[11,"unsafe_at","","Just like `at` without bounds checking.",24,null],[11,"swap","","",24,null],[11,"shape","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"mean","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"col_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"set_diag","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":null}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"clone","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",0,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the result of a function.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"dvec"},{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",0,null],[11,"as_mut_slice","","Mutably slices this vector.",0,null],[11,"shape","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"dvec"},{"name":"n"},{"name":"dvec"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"eq","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",25,null],[11,"as_mut_slice","","Mutably slices this vector.",25,null],[11,"shape","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"},{"name":"dvec1"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",25,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",25,null],[11,"from_fn","","Builds a vector filled with the result of a function.",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",25,{"inputs":[{"name":"dvec1"},{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"eq","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",26,null],[11,"as_mut_slice","","Mutably slices this vector.",26,null],[11,"shape","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"},{"name":"dvec2"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26,null],[11,"from_fn","","Builds a vector filled with the result of a function.",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",26,{"inputs":[{"name":"dvec2"},{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"eq","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",27,null],[11,"as_mut_slice","","Mutably slices this vector.",27,null],[11,"shape","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"},{"name":"dvec3"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",27,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",27,{"inputs":[{"name":"dvec3"},{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",28,null],[11,"as_mut_slice","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"},{"name":"dvec4"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",28,{"inputs":[{"name":"dvec4"},{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"eq","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",29,null],[11,"as_mut_slice","","Mutably slices this vector.",29,null],[11,"shape","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"},{"name":"dvec5"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",29,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",29,{"inputs":[{"name":"dvec5"},{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",30,null],[11,"as_mut_slice","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"},{"name":"dvec6"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",30,{"inputs":[{"name":"dvec6"},{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","","",31,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",31,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"repeat","","",31,{"inputs":[{"name":"vec0"},{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",10,{"inputs":[{"name":"vec1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_array","","View this vector as an array.",10,null],[11,"as_array_mut","","View this vector as a mutable array.",10,null],[11,"from_array_ref","","View an array as a vector.",10,null],[11,"from_array_mut","","View an array as a vector.",10,null],[11,"index","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"append_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"prepend_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"sqnorm","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"is_zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",10,{"inputs":[{"name":"vec1"},{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"min_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"axpy","","",10,{"inputs":[{"name":"vec1"},{"name":"n"},{"name":"vec1"}],"output":null}],[11,"iter","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",10,{"inputs":[{"name":"vec1"},{"name":"r"}],"output":{"name":"vec1"}}],[11,"fmt","","",11,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",11,{"inputs":[{"name":"vec2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_array","","View this vector as an array.",11,null],[11,"as_array_mut","","View this vector as a mutable array.",11,null],[11,"from_array_ref","","View an array as a vector.",11,null],[11,"from_array_mut","","View an array as a vector.",11,null],[11,"index","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"sqnorm","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"is_zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",11,{"inputs":[{"name":"vec2"},{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"min_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"axpy","","",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"vec2"}],"output":null}],[11,"iter","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",11,{"inputs":[{"name":"vec2"},{"name":"r"}],"output":{"name":"vec2"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",12,{"inputs":[{"name":"vec3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_array","","View this vector as an array.",12,null],[11,"as_array_mut","","View this vector as a mutable array.",12,null],[11,"from_array_ref","","View an array as a vector.",12,null],[11,"from_array_mut","","View an array as a vector.",12,null],[11,"index","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"sqnorm","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"is_zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"vec3"},{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"min_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"axpy","","",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"vec3"}],"output":null}],[11,"iter","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",12,{"inputs":[{"name":"vec3"},{"name":"r"}],"output":{"name":"vec3"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",13,{"inputs":[{"name":"vec4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_array","","View this vector as an array.",13,null],[11,"as_array_mut","","View this vector as a mutable array.",13,null],[11,"from_array_ref","","View an array as a vector.",13,null],[11,"from_array_mut","","View an array as a vector.",13,null],[11,"index","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"sqnorm","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"is_zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",13,{"inputs":[{"name":"vec4"},{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"min_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"axpy","","",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"vec4"}],"output":null}],[11,"iter","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",13,{"inputs":[{"name":"vec4"},{"name":"r"}],"output":{"name":"vec4"}}],[11,"fmt","","",14,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",14,{"inputs":[{"name":"vec5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_array","","View this vector as an array.",14,null],[11,"as_array_mut","","View this vector as a mutable array.",14,null],[11,"from_array_ref","","View an array as a vector.",14,null],[11,"from_array_mut","","View an array as a vector.",14,null],[11,"index","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"sqnorm","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"is_zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",14,{"inputs":[{"name":"vec5"},{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"min_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"axpy","","",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"vec5"}],"output":null}],[11,"iter","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",14,{"inputs":[{"name":"vec5"},{"name":"r"}],"output":{"name":"vec5"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",15,{"inputs":[{"name":"vec6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"from","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_array","","View this vector as an array.",15,null],[11,"as_array_mut","","View this vector as a mutable array.",15,null],[11,"from_array_ref","","View an array as a vector.",15,null],[11,"from_array_mut","","View an array as a vector.",15,null],[11,"index","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"sqnorm","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"is_zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"vec6"},{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"min_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"axpy","","",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"vec6"}],"output":null}],[11,"iter","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",15,{"inputs":[{"name":"vec6"},{"name":"r"}],"output":{"name":"vec6"}}],[11,"fmt","","",32,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",32,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"repeat","","",32,{"inputs":[{"name":"pnt0"},{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",16,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"is_orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_array","","View this vector as an array.",16,null],[11,"as_array_mut","","View this vector as a mutable array.",16,null],[11,"from_array_ref","","View an array as a vector.",16,null],[11,"from_array_mut","","View an array as a vector.",16,null],[11,"index","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",16,{"inputs":[{"name":"pnt1"},{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"min_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"axpy","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"},{"name":"pnt1"}],"output":null}],[11,"iter","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",16,{"inputs":[{"name":"pnt1"},{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",17,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"is_orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_array","","View this vector as an array.",17,null],[11,"as_array_mut","","View this vector as a mutable array.",17,null],[11,"from_array_ref","","View an array as a vector.",17,null],[11,"from_array_mut","","View an array as a vector.",17,null],[11,"index","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",17,{"inputs":[{"name":"pnt2"},{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"min_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"axpy","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"pnt2"}],"output":null}],[11,"iter","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",17,{"inputs":[{"name":"pnt2"},{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",18,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"is_orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_array","","View this vector as an array.",18,null],[11,"as_array_mut","","View this vector as a mutable array.",18,null],[11,"from_array_ref","","View an array as a vector.",18,null],[11,"from_array_mut","","View an array as a vector.",18,null],[11,"index","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",18,{"inputs":[{"name":"pnt3"},{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"min_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"axpy","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"pnt3"}],"output":null}],[11,"iter","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",18,{"inputs":[{"name":"pnt3"},{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",19,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"is_orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_array","","View this vector as an array.",19,null],[11,"as_array_mut","","View this vector as a mutable array.",19,null],[11,"from_array_ref","","View an array as a vector.",19,null],[11,"from_array_mut","","View an array as a vector.",19,null],[11,"index","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",19,{"inputs":[{"name":"pnt4"},{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"min_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"axpy","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"pnt4"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",19,{"inputs":[{"name":"pnt4"},{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",20,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"is_orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_array","","View this vector as an array.",20,null],[11,"as_array_mut","","View this vector as a mutable array.",20,null],[11,"from_array_ref","","View an array as a vector.",20,null],[11,"from_array_mut","","View an array as a vector.",20,null],[11,"index","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",20,{"inputs":[{"name":"pnt5"},{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"min_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"axpy","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"pnt5"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",20,{"inputs":[{"name":"pnt5"},{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",21,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"is_orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_array","","View this vector as an array.",21,null],[11,"as_array_mut","","View this vector as a mutable array.",21,null],[11,"from_array_ref","","View an array as a vector.",21,null],[11,"from_array_mut","","View an array as a vector.",21,null],[11,"index","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",21,{"inputs":[{"name":"pnt6"},{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"min_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"axpy","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"pnt6"}],"output":null}],[11,"iter","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",21,{"inputs":[{"name":"pnt6"},{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","","",22,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",22,{"inputs":[{"name":"quat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",22,{"inputs":[{"name":"quat"}],"output":null}],[11,"inv","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"fmt","","",33,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",33,{"inputs":[{"name":"unitquat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",33,{"inputs":[{"name":"unitquat"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rand","","",22,{"inputs":[{"name":"quat"},{"name":"r"}],"output":{"name":"quat"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"inv","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",33,{"inputs":[{"name":"unitquat"},{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",33,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",33,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"unitquat"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"from","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_array","","View this vector as an array.",22,null],[11,"as_array_mut","","View this vector as a mutable array.",22,null],[11,"from_array_ref","","View an array as a vector.",22,null],[11,"from_array_mut","","View an array as a vector.",22,null],[11,"index","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"is_zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",22,{"inputs":[{"name":"quat"},{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"min_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"axpy","","",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"quat"}],"output":null}],[11,"iter","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",33,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","","",34,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",34,{"inputs":[{"name":"identity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",34,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"fmt","","",4,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",4,{"inputs":[{"name":"mat1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",4,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",4,null],[11,"from_array_ref","","View a column-major array of array as a vector.",4,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",4,null],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"is_zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"iter","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",4,null],[11,"set_fast","","",4,null],[11,"dim","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",4,null],[11,"swap","","",4,null],[11,"unsafe_at","","",4,null],[11,"unsafe_set","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",4,{"inputs":[{"name":"mat1"}],"output":null}],[11,"approx_epsilon","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"set_diag","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":null}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"mat1"},{"name":"r"}],"output":{"name":"mat1"}}],[11,"fmt","","",5,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",5,{"inputs":[{"name":"mat2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",5,{"inputs":[{"name":"mat2"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"repeat","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",5,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",5,null],[11,"from_array_ref","","View a column-major array of array as a vector.",5,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",5,null],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"is_zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"iter","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"transpose","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"mat2"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",5,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"set_diag","","",5,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":null}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"mat2"},{"name":"r"}],"output":{"name":"mat2"}}],[11,"fmt","","",6,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",6,{"inputs":[{"name":"mat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",6,{"inputs":[{"name":"mat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",6,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",6,null],[11,"from_array_ref","","View a column-major array of array as a vector.",6,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",6,null],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"is_zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"iter","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"mat3"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",6,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"set_diag","","",6,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":null}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"mat3"},{"name":"r"}],"output":{"name":"mat3"}}],[11,"fmt","","",7,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",7,{"inputs":[{"name":"mat4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",7,{"inputs":[{"name":"mat4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",7,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",7,null],[11,"from_array_ref","","View a column-major array of array as a vector.",7,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",7,null],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"is_zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"iter","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"mat4"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"set_diag","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":null}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"mat4"},{"name":"r"}],"output":{"name":"mat4"}}],[11,"fmt","","",8,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",8,{"inputs":[{"name":"mat5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",8,{"inputs":[{"name":"mat5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",8,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",8,null],[11,"from_array_ref","","View a column-major array of array as a vector.",8,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",8,null],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"is_zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"mat5"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"set_diag","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":null}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"mat5"},{"name":"r"}],"output":{"name":"mat5"}}],[11,"fmt","","",9,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",9,{"inputs":[{"name":"mat6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",9,{"inputs":[{"name":"mat6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_array","","View this matrix as a column-major array of arrays.",9,null],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",9,null],[11,"from_array_ref","","View a column-major array of array as a vector.",9,null],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",9,null],[11,"from","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"is_zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"iter","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"mat6"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"set_diag","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":null}],[11,"outer","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"mat6"},{"name":"r"}],"output":{"name":"mat6"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",35,{"inputs":[{"name":"rot2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"angle_to","","",35,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",35,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"rot2"}}],[11,"rand","","",35,{"inputs":[{"name":"rot2"},{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",36,{"inputs":[{"name":"rot3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",36,{"inputs":[{"name":"rot3"},{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",36,{"inputs":[{"name":"rot3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Reorient this matrix such that its local `x` axis points to a given point. Note that the\nusually known `look_at` function does the same thing but with the `z` axis. See `look_at_z`\nfor that.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"look_at_z","","Reorient this matrix such that its local `z` axis points to a given point.",36,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"angle_to","","",36,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",36,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"rot3"}}],[11,"rand","","",36,{"inputs":[{"name":"rot3"},{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",37,{"inputs":[{"name":"rot4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"append_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"prepend_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"submat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"new_identity","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"nrows","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"index","","",35,null],[11,"abs","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",35,{"inputs":[{"name":"rot2"}],"output":null}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"new_identity","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"nrows","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"index","","",36,null],[11,"abs","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",36,{"inputs":[{"name":"rot3"}],"output":null}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"new_identity","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"nrows","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"index","","",37,null],[11,"abs","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",37,{"inputs":[{"name":"rot4"}],"output":null}],[11,"approx_epsilon","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","","",1,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",1,{"inputs":[{"name":"iso2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",2,{"inputs":[{"name":"iso3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",3,{"inputs":[{"name":"iso4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3,{"inputs":[{"name":"iso4"},{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"dim","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",1,{"inputs":[{"name":"iso2"},{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"dim","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",2,{"inputs":[{"name":"iso3"},{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","","",38,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",38,{"inputs":[{"name":"persp3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",39,{"inputs":[{"name":"perspmat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",38,{"inputs":[{"name":"persp3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_fov","","Sets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",38,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",38,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",39,{"inputs":[{"name":"perspmat3"},{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",39,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",39,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",40,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",40,{"inputs":[{"name":"ortho3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",41,{"inputs":[{"name":"orthomat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",40,{"inputs":[{"name":"ortho3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",40,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",40,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",41,{"inputs":[{"name":"orthomat3"},{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",41,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",41,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",23,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",23,{"inputs":[{"name":"pordering"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23,{"inputs":[{"name":"pordering"},{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",42,{"inputs":[{"name":"absolute"},{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",43,{"inputs":[{"name":"absoluterotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",44,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",44,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",45,{"inputs":[{"name":"axpy"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",46,{"inputs":[{"name":"basis"},{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",46,{"inputs":[{"name":"basis"},{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",46,{"inputs":[{"name":"basis"},{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes' constant.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"e","","Euler's number.",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",47,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",48,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",48,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",49,{"inputs":[{"name":"cast"},{"name":"t"}],"output":{"name":"self"}}],[8,"Col","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",50,{"inputs":[{"name":"col"}],"output":{"name":"usize"}}],[10,"col","","Reads the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_col","","Writes the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColSlice","","Trait to access part of a column of a matrix",null,null],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",51,{"inputs":[{"name":"colslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",52,{"inputs":[{"name":"rowslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Cov","","Trait for computing the covariance of a set of data.",null,null],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"}],"output":{"name":"m"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",54,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",54,{"inputs":[{"name":"cross"},{"name":"self"}],"output":{"name":"crossproducttype"}}],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",55,{"inputs":[{"name":"crossmatrix"}],"output":{"name":"m"}}],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"det","","Returns the determinant of `m`.",56,{"inputs":[{"name":"det"}],"output":{"name":"n"}}],[8,"Diag","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diag","","Creates a new matrix with the given diagonal.",57,{"inputs":[{"name":"diag"},{"name":"v"}],"output":{"name":"self"}}],[10,"diag","","The diagonal of this matrix.",57,{"inputs":[{"name":"diag"}],"output":{"name":"v"}}],[8,"Dim","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dim","","The dimension of the object.",58,{"inputs":[{"name":"dim"},{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",59,{"inputs":[{"name":"dot"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",60,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",61,{"inputs":[{"name":"eye"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",63,{"inputs":[{"name":"fromhomogeneous"},{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inv","","Returns the inverse of `m`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"option"}}],[10,"inv_mut","","In-place version of `inverse`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",66,{"inputs":[{"name":"iterable"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",67,{"inputs":[{"name":"iterablemut"}],"output":{"name":"itermut"}}],[8,"Mat","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the covariance of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",68,{"inputs":[{"name":"mean"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"sqnorm","","Computes the squared norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"normalize","","Gets the normalized version of a copy of `v`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[8,"NumPnt","","Trait grouping most common operations on points.",null,null],[8,"NumVec","","Trait grouping most common operations on vectors.",null,null],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"orig","","The trivial origin.",70,{"inputs":[{"name":"orig"}],"output":{"name":"self"}}],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",70,{"inputs":[{"name":"orig"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",71,null],[10,"outer","","Computes the outer product: `a * b`",71,{"inputs":[{"name":"outer"},{"name":"self"}],"output":{"name":"outerproducttype"}}],[8,"POrd","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"pordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",72,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_vec","","Converts this point to its associated vector.",73,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",73,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",73,{"inputs":[{"name":"pntasvec"},{"name":"v"}],"output":null}],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",74,{"inputs":[{"name":"repeat"},{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",75,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_rotate","","Applies an inverse rotation to `v`.",75,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",76,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",76,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",77,null],[10,"to_rot_mat","","Gets the rotation matrix represented by `self`.",77,{"inputs":[{"name":"rotationmatrix"}],"output":{"name":"output"}}],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",79,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",79,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",79,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"angletype"}}],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",79,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"deltarotationtype"}}],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",80,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",80,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",80,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",81,{"inputs":[{"name":"shape"}],"output":{"name":"i"}}],[8,"SquareMat","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",82,{"inputs":[{"name":"tohomogeneous"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",83,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_transform","","Applies an inverse transformation to `v`.",83,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",84,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"inv_transformation","","Gets the inverse transformation of `self`.",84,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",85,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_translate","","Apply an inverse translation to an object.",85,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",86,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"inv_translation","","Gets the inverse translation associated with this object.",86,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",87,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",87,{"inputs":[{"name":"transpose"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",88,{"inputs":[{"name":"uniformspheresample"},{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"norm","","Computes the norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",72,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DVec1"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DVec5"],[3,"DVec6"],[3,"Vec0"],[3,"Pnt0"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",14,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",15,null],[13,"Invalid","","",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",16,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",16,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",17,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",18,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",19,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",22,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",23,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",24,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",25,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",29,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",30,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",30,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",30,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",30,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",30,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",31,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",31,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",31,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",31,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"rand","","",32,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",33,null],[11,"from_seed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
initSearch(searchIndex);
