{"name":"nphysics","tagline":"2 and 3-dimensional rigid body physics engine for Rust.","body":"nphysics\r\n========\r\n**nphysics** is a 2 and 3-dimensional physics engine for games and animations.\r\n\r\nIts most distinctive feature is its genericity wrt the simulation\r\ndimension.Â That means you can use it for both 2-dimensional physics and\r\n3-dimensional physics. Higher dimensions could be possible, but **nphysics**\r\nhas not be written/tested with those in thought.\r\n\r\n## Features\r\n- static and dynamic rigid bodies.\r\n- common convex primitives: cone, box, ball, cylinder.\r\n- concave geometries build from convex primitives (aka. compound geometries).\r\n- stable stacking.\r\n- island based sleeping (objects deactivation).\r\n- ray casting.\r\n- swept sphere based continuous collision detection.\r\n- ball-in-socket joint.\r\n- fixed joint.\r\n\r\n## Dependencies\r\nAll dependencies are automatically cloned with a recursive clone.\r\nThe libraries needed to compile the physics engine are:\r\n\r\n* [ncollide](http://ncollide.org): the collision detection library.\r\n* [nalgebra](http://nalgebra.org): the linear algebra library.\r\n\r\nThe libraries needed to compile the examples are:\r\n\r\n* [kiss3d](http://kiss3d.org): the 3d graphics engine.\r\n* [rust-sfml](https://github.com/JeremyLetang/rust-sfml): the 2d graphics engine.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}