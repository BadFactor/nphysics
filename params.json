{"name":"nphysics","tagline":"2 and 3-dimensional rigid body physics engine for Rust.","body":"nphysics\r\n========\r\n**nphysics** is a 2 and 3-dimensional physics engine for games and animations.\r\n\r\nIts most distinctive feature is its genericity wrt the simulation\r\ndimension.Â That means you can use it for both 2-dimensional physics and\r\n3-dimensional physics. Higher dimensions could be possible, but **nphysics**\r\nhas not be written/tested with those in thought.\r\n\r\n## Features\r\n- static and dynamic rigid bodies.\r\n- common convex primitives: cone, box, ball, cylinder.\r\n- concave geometries build from convex primitives (aka. compound geometries).\r\n- stable stacking.\r\n- island based sleeping (objects deactivation).\r\n- ray casting.\r\n- swept sphere based continuous collision detection.\r\n- ball-in-socket joint.\r\n- fixed joint.\r\n\r\nFor more, check out the documentations of the different variants of the library:\r\n* [nphysics2df32](doc/nphysics2df32), for a 2d physics engine using single-precision numbers.\r\n* [nphysics3df32](doc/nphysics3df32), for a 3d physics engine using single-precision numbers.\r\n* [nphysics2df64](doc/nphysics2df64), for a 2d physics engine using double-precision numbers.\r\n* [nphysics3df64](doc/nphysics3df64), for a 3d physics engine using double-precision numbers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}